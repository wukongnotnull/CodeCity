(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{541:function(_,v,t){"use strict";t.r(v);var a=t(25),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"网络篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络篇"}},[_._v("#")]),_._v(" 网络篇")]),_._v(" "),t("h2",{attrs:{id:"_1-http-响应码有哪些-分别代表什么含义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-响应码有哪些-分别代表什么含义"}},[_._v("#")]),_._v(" 1，HTTP 响应码有哪些？分别代表什么含义？")]),_._v(" "),t("blockquote",[t("p",[_._v("200：成功，Web 服务器成功处理了客户端的请求。")]),_._v(" "),t("p",[_._v("301：永久重定向，当客户端请求一个网址的时候，Web 服务器会将当前请求重定向到另一个网址，搜索引擎会抓取重定向后网页的内容并且将旧的网址替换为重定向后的网址。 302：临时重定向，搜索引擎会抓取重定向后网页的内容而保留旧的网址，因为搜索引擎认为 重定向后的网址是暂时的。")]),_._v(" "),t("p",[_._v("400：客户端请求错误，多为参数不合法导致 Web 服务器验参失败。")]),_._v(" "),t("p",[_._v("404：未找到，Web 服务器找不到资源。")]),_._v(" "),t("p",[_._v("500：Web 服务器错误，服务器处理客户端请求的时候发生错误。")]),_._v(" "),t("p",[_._v("503：服务不可用，服务器停机。")]),_._v(" "),t("p",[_._v("504：网关超时。")])]),_._v(" "),t("h2",{attrs:{id:"_2-forward-和-redirect-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-forward-和-redirect-的区别"}},[_._v("#")]),_._v(" 2，Forward 和 Redirect 的区别？")]),_._v(" "),t("blockquote",[t("p",[_._v("浏览器 URL 地址：Forward 是服务器内部的重定向，服务器内部请求某个 servlet，然后获取响应的内容，浏览器的 URL 地址是不会变化的；Redirect 是客户端请求服务器，然后服务器给客户端返回了一个 302 状态码和新的 location，客户端重新发起 HTTP 请求，服务器给客户端响应 location 对应的 URL 地址，浏览器的 URL 地址发生了变化。")]),_._v(" "),t("p",[_._v("数据的共享：Forward 是服务器内部的重定向，request 在整个重定向过程中是不变的， request 中的信息在 servlet 间是共享的。Redirect 发起了两次 HTTP 请求分别使用不同的request。")]),_._v(" "),t("p",[_._v("请求的次数：Forward 只有一次请求；Redirect 有两次请求。")])]),_._v(" "),t("h2",{attrs:{id:"_3-get-和-post-请求有哪些区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-get-和-post-请求有哪些区别"}},[_._v("#")]),_._v(" 3， Get 和 Post 请求有哪些区别？")]),_._v(" "),t("p",[_._v("用途：")]),_._v(" "),t("blockquote",[t("p",[_._v("get 请求用来从服务器获取资源")]),_._v(" "),t("p",[_._v("post 请求用来向服务器提交数据")])]),_._v(" "),t("p",[_._v("表单的提交方式：")]),_._v(" "),t("blockquote",[t("p",[_._v("get 请求直接将表单数据以 的形式拼接到 URL 上（"),t("span",{staticClass:"underline"},[_._v("http://www.")])]),_._v(" "),t("p",[t("span",{staticClass:"underline"},[_._v("baidu.com/action?name1=value1&name2=value2")]),_._v("），多个参数参数值需要用 & 连接起来并")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image1.png",alt:""}}),_._v('{width="0.17777777777777778in" height="0.1986111111111111in"}且用 拼接到 action 后面；')]),_._v(" "),t("p",[_._v("post 请求将表单数据放到请求头或者请求的消息体中。")])]),_._v(" "),t("p",[_._v("传输数据的大小限制：")]),_._v(" "),t("blockquote",[t("p",[_._v("get 请求传输的数据受到 URL 长度的限制，而 URL 长度是由浏览器决定的；")]),_._v(" "),t("p",[_._v("post 请求传输数据的大小理论上来说是没有限制的。")])]),_._v(" "),t("p",[_._v("参数的编码：")]),_._v(" "),t("blockquote",[t("p",[_._v("get 请求的参数会在地址栏明文显示，使用 URL 编码的文本格式传递参数；")]),_._v(" "),t("p",[_._v("post 请求使用二进制数据多重编码传递参数。")])]),_._v(" "),t("p",[_._v("缓存：")]),_._v(" "),t("blockquote",[t("p",[_._v("get 请求可以被浏览器缓存被收藏为标签；")]),_._v(" "),t("p",[_._v("post 请求不会被缓存也不能被收藏为标签。")])]),_._v(" "),t("h2",{attrs:{id:"_4-说说-与-的区别-以及各自的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-说说-与-的区别-以及各自的优缺点"}},[_._v("#")]),_._v(" 4，说说 与 的区别，以及各自的优缺点")]),_._v(" "),t("p",[_._v("1、TCP面向连接（如打电话要先拨号建立连接）：UDP是无连接的，即发送数据之前不需要建立连 接。")]),_._v(" "),t("p",[_._v("2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序 到达;UDP尽最大努力交付，即不保证可靠交付。tcp通过校验和，重传控制，序号标识，滑动窗")]),_._v(" "),t("p",[_._v("口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。")]),_._v(" "),t("p",[_._v("3、UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通 信。")]),_._v(" "),t("p",[_._v("4.每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信")]),_._v(" "),t("p",[_._v("5、TCP对系统资源要求较多，UDP对系统资源要求较少。")]),_._v(" "),t("h2",{attrs:{id:"_5-说一下-和-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-说一下-和-的区别"}},[_._v("#")]),_._v(" 5，说一下 和 的区别")]),_._v(" "),t("p",[_._v("端口不同：HTTP和")]),_._v(" "),t("p",[_._v("的连接方式不同没用的端口也不一样，HTTP是80，")]),_._v(" "),t("p",[_._v("用的是443")]),_._v(" "),t("p",[_._v("消耗资源：和HTTP相比，HTTPS通信会因为加解密的处理消耗更多的CPU和内存资源。")]),_._v(" "),t("p",[_._v("开销： 通信需要证书，这类证书通常需要向认证机构申请或者付费购买。")]),_._v(" "),t("h2",{attrs:{id:"_6-说说http、tcp、socket-的关系是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-说说http、tcp、socket-的关系是什么"}},[_._v("#")]),_._v(" 6，说说HTTP、TCP、Socket 的关系是什么？")]),_._v(" "),t("blockquote",[t("p",[_._v("TCP/IP 代表传输控制协议/网际协议，指的是一系列协议族。")]),_._v(" "),t("p",[_._v("HTTP 本身就是一个协议，是从 Web 服务器传输超文本到本地浏览器的传送协议。")]),_._v(" "),t("p",[_._v("Socket 是 TCP/IP 网络的 API ，其实就是一个门面模式，它把复杂的 TCP/IP 协议族隐藏在Socket 接口后面。对用户来说，一组简单的接口就是全部，让 Socket 去组织数据，以符合指定的协议。")])]),_._v(" "),t("p",[_._v("综上所述：")]),_._v(" "),t("blockquote",[t("p",[_._v("需要 IP 协议来连接网络")]),_._v(" "),t("p",[_._v("TCP 是一种允许我们安全传输数据的机制，使用 TCP 协议来传输数据的 HTTP 是 Web 服务器和客户端使用的特殊协议。")]),_._v(" "),t("p",[_._v("HTTP 基于 TCP 协议，所以可以使用 Socket 去建立一个 TCP 连接。")])]),_._v(" "),t("h2",{attrs:{id:"_7-说一下http的长连接与短连接的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-说一下http的长连接与短连接的区别"}},[_._v("#")]),_._v(" 7，说一下HTTP的长连接与短连接的区别")]),_._v(" "),t("p",[_._v("HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。"),t("strong",[_._v("短连接")])]),_._v(" "),t("p",[_._v("在HTTP/1.0中默认使用短链接,也就是说，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。如果客户端访问的某个HTML或其他类型的Web资源，如")]),_._v(" "),t("p",[_._v("文件、图像文件、")]),_._v(" "),t("h4",{attrs:{id:"长连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#长连接"}},[_._v("#")]),_._v(" 长连接")]),_._v(" "),t("p",[_._v("文件等。当浏览器每遇到这样一个Web资源，就会建立一个HTTP会话.")]),_._v(" "),t("p",[_._v("从HTTP/1.1起，默认使用长连接，用以保持连接特性。在使用长连接的情况下，当一个网页打开完 成后，客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭。如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时 间，可以在不同的服务器软件（如Apache）中设定这个时间。")]),_._v(" "),t("h2",{attrs:{id:"_8-tcp-为什么要三次握手-两次不行吗-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-tcp-为什么要三次握手-两次不行吗-为什么"}},[_._v("#")]),_._v(" 8，TCP 为什么要三次握手，两次不行吗？为什么？")]),_._v(" "),t("blockquote",[t("p",[_._v('TCP 客户端和服务端建立连接需要三次握手，首先服务端需要开启监听，等待客户端的连接请求，这个时候服务端处于"收听"状态；')]),_._v(" "),t("p",[_._v('客户端向服务端发起连接，选择 的初始序列号，此时客户端处于"同步已发送"的状态；')]),_._v(" "),t("p",[_._v("服务端收到客户端的连接请求，同意连接并向客户端发送确认，确认号是 表示客户")]),_._v(" "),t("p",[_._v('端可以发送下一个数据包序号从于"同步收到"状态；')]),_._v(" "),t("p",[_._v("开始，同时选择")]),_._v(" "),t("p",[_._v("的初始序列号，此时服务端处")]),_._v(" "),t("p",[_._v("客户端收到服务端的确认后，向服务端发送确认信息，确认号是 表示服务端可以发")]),_._v(" "),t("p",[_._v('送下一个数据包序号从 开始，此时客户端处于"已建立连接"的状态；')]),_._v(" "),t("p",[_._v('服务端收到客户端的确认后，也进入"已建立连接"的状态。')])]),_._v(" "),t("p",[_._v("从三次握手的过程可以看出如果只有两次握手，那么客户端的起始序列号可以确认，服务端的起始 序列号将得不到确认。")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image2.jpeg",alt:""}}),_._v('{width="5.34375in" height="5.979166666666667in"}')]),_._v(" "),t("h2",{attrs:{id:"_9-说一下-tcp-粘包是怎么产生的-怎么解决粘包问题的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-说一下-tcp-粘包是怎么产生的-怎么解决粘包问题的"}},[_._v("#")]),_._v(" 9，说一下 TCP 粘包是怎么产生的？怎么解决粘包问题的？")]),_._v(" "),t("p",[_._v("上文中讲 TCP 和 UDP 区别的时候提到 TCP 传输数据基于字节流，从应用层到 TCP 传输层的多个数据包是一连串的字节流是没有边界的，而且 TCP 首部并没有记录数据包的长度，所以 TCP 传输数据的时候可能会发送粘包和拆包的问题；而 UDP 是基于数据报传输数据的，UDP 首部也记录了数据报的长度，可以轻易的区分出不同的数据包的边界。")]),_._v(" "),t("p",[_._v("接下来看下 TCP 传输数据的几种情况，首先第一种情况是正常的，既没有发送粘包也没有发生拆包。")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image3.png",alt:""}}),_._v('{width="6.785416666666666in" height="1.2465277777777777in"}')]),_._v(" "),t("p",[_._v("第二种情况发生了明显的粘包现象，这种情况对于数据接收方来说很难处理。")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image4.png",alt:""}}),_._v('{width="6.785416666666666in" height="1.2465277777777777in"}')]),_._v(" "),t("p",[_._v("接下来的两种情况发生了粘包和拆包的现象，接收端收到的数据包要么是不完整的要么是多出来一 块儿。")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image5.png",alt:""}}),_._v('{width="6.785416666666666in" height="1.2465277777777777in"}'),t("img",{attrs:{src:"media/image6.png",alt:""}}),_._v('{width="6.825in" height="1.2645833333333334in"}')]),_._v(" "),t("p",[_._v("造成粘包和拆包现象的原因：")]),_._v(" "),t("blockquote",[t("p",[_._v("TCP 发送缓冲区剩余空间不足以发送一个完整的数据包，将发生拆包； 要发送的数据超过了最大报文长度的限制，TCP 传输数据时进行拆包；")]),_._v(" "),t("p",[_._v("要发送的数据包小于 TCP 发送缓冲区剩余空间，TCP 将多个数据包写满发送缓冲区一次发送出去，将发生粘包；")]),_._v(" "),t("p",[_._v("接收端没有及时读取 TCP 发送缓冲区中的数据包，将会发生粘包。")])]),_._v(" "),t("p",[_._v("粘包拆包的解决方法：")]),_._v(" "),t("blockquote",[t("p",[_._v("发送端给数据包添加首部，首部中添加数据包的长度属性，这样接收端通过首部中的长度字段 就可以知道数据包的实际长度啦；")]),_._v(" "),t("p",[_._v("针对发送的数据包小于缓冲区大小的情况，发送端可以将不同的数据包规定成同样的长度，不 足这个长度的补充 0，接收端从缓冲区读取固定的长度数据这样就可以区分不同的数据包； 发送端通过给不同的数据包添加间隔符合确定边界，接收端通过这个间隔符合就可以区分不同 的数据包。")])]),_._v(" "),t("h2",{attrs:{id:"_10-tcp-如何保证可靠性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-tcp-如何保证可靠性"}},[_._v("#")]),_._v(" 10，TCP 如何保证可靠性")]),_._v(" "),t("h4",{attrs:{id:"序列号和确认号机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列号和确认号机制"}},[_._v("#")]),_._v(" 序列号和确认号机制：")]),_._v(" "),t("p",[_._v("TCP 发送端发送数据包的时候会选择一个 seq 序列号，接收端收到数据包后会检测数据包的完整性，如果检测通过会响应一个 ack 确认号表示收到了数据包。")]),_._v(" "),t("h4",{attrs:{id:"超时重发机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#超时重发机制"}},[_._v("#")]),_._v(" 超时重发机制：")]),_._v(" "),t("p",[_._v("TCP 发送端发送了数据包后会启动一个定时器，如果一定时间没有收到接受端的确认后，将会重新发送该数据包。")]),_._v(" "),t("h4",{attrs:{id:"对乱序数据包重新排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对乱序数据包重新排序"}},[_._v("#")]),_._v(" 对乱序数据包重新排序：")]),_._v(" "),t("p",[_._v("从 IP 网络层传输到 TCP 层的数据包可能会乱序，TCP 层会对数据包重新排序再发给应用层。"),t("strong",[_._v("丢弃重复数据：")])]),_._v(" "),t("p",[_._v("从 IP 网络层传输到 TCP 层的数据包可能会重复，TCP 层会丢弃重复的数据包。"),t("strong",[_._v("流量控制：")])]),_._v(" "),t("p",[_._v("TCP 发送端和接收端都有一个固定大小的缓冲空间，为了防止发送端发送数据的速度太快导致接收端缓冲区溢出，发送端只能发送接收端可以接纳的数据，为了达到这种控制效果，TCP 用了流量控制协议（可变大小的滑动窗口协议）来实现。")]),_._v(" "),t("h2",{attrs:{id:"_11-osi-的七层模型都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-osi-的七层模型都有哪些"}},[_._v("#")]),_._v(" 11，OSI 的七层模型都有哪些？")]),_._v(" "),t("p",[_._v("OSI七层模型一般指开放系统互连参考模型 (Open System Interconnect 简称OSI)是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型,为开放式互连信息系统提供了一种功能结构的框架。")]),_._v(" "),t("blockquote",[t("p",[_._v("应用层：各种应用程序协议，比如 HTTP、HTTPS、FTP、SOCKS 安全套接字协议、DNS 域名系统、GDP 网关发现协议等等。")]),_._v(" "),t("p",[_._v("表示层：加密解密、转换翻译、压缩解压缩，比如 LPP 轻量级表示协议。")]),_._v(" "),t("p",[_._v("会话层：不同机器上的用户建立和管理会话，比如 SSL 安全套接字层协议、TLS 传输层安全协议、RPC 远程过程调用协议等等。")]),_._v(" "),t("p",[_._v("传输层：接受上一层的数据，在必要的时候对数据进行分割，并将这些数据交给网络层，保证 这些数据段有效到达对端，比如 TCP 传输控制协议、UDP 数据报协议。")]),_._v(" "),t("p",[_._v("网络层：控制子网的运行：逻辑编址、分组传输、路由选择，比如 IP、IPV6、SLIP 等等。数据链路层：物理寻址，同时将原始比特流转变为逻辑传输路线，比如 XTP 压缩传输协议、PPTP 点对点隧道协议等等。")]),_._v(" "),t("p",[_._v("物理层：机械、电子、定时接口通信信道上的原始比特流传输，比如 IEEE802.2 等等。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image7.png",alt:""}}),_._v('{width="6.802083333333333in" height="8.072916666666666in"}')]),_._v(" "),t("h2",{attrs:{id:"_12-浏览器中输入-www-woaijava-com-之后都发生了什么-请详细阐述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-浏览器中输入-www-woaijava-com-之后都发生了什么-请详细阐述"}},[_._v("#")]),_._v(' 12，浏览器中输入："www.woaijava.com"之后都发生了什么？ 请详细阐述')]),_._v(" "),t("blockquote",[t("p",[_._v("由域名→IP地址 寻找IP地址的过程依次经过了浏览器缓存、系统缓存、hosts文件、路由器缓存、 递归搜索根域名服务器。")]),_._v(" "),t("p",[_._v("建立TCP/IP连接（三次握手具体过程） 由浏览器发送一个HTTP请求")]),_._v(" "),t("p",[_._v("经过路由器的转发，通过服务器的防火墙，该HTTP请求到达了服务器服务器处理该HTTP请求，返回一个HTML文件")]),_._v(" "),t("p",[_._v("浏览器解析该HTML文件，并且显示在浏览器端这里需要注意：")]),_._v(" "),t("p",[_._v("HTTP协议是一种基于TCP/IP的应用层协议，进行HTTP数据请求必须先建立TCP/IP连接")]),_._v(" "),t("p",[_._v("可以这样理解：HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了 网络通信的能力。")]),_._v(" "),t("p",[_._v("两个计算机之间的交流无非是两个端口之间的数据通信,具体的数据会以什么样的形式展现是以不同的应用层协议来定义的。")])]),_._v(" "),t("h2",{attrs:{id:"_13-如何实现跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-如何实现跨域"}},[_._v("#")]),_._v(" 13，如何实现跨域？")]),_._v(" "),t("p",[_._v("当浏览器执行 JS 脚本的时候，会检测脚本要访问的协议、域名、端口号是不是和当前网址一致，如果不一致就是跨域。跨域是不允许的，这种限制叫做浏览器的同源策略，简单点的说法就是浏览器 不允许一个源中加载脚本与其他源中的资源进行交互。那么如何实现跨域呢？")]),_._v(" "),t("blockquote",[t("p",[_._v("JSONP、CORS方式、代理方式"),t("strong",[_._v("1 JSONP 方式")])])]),_._v(" "),t("p",[_._v("script、img、iframe、link、video、audio 等带有 src 属性的标签可以跨域请求和执行资源，")]),_._v(" "),t("p",[_._v('JSONP 利用这一点"漏洞"实现跨域。')]),_._v(" "),t("p",[_._v("再看下 jQuery 的写法。")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image8.png",alt:""}}),_._v('{width="0.18819444444444444in" height="0.2076388888888889in"}JSONP 实现跨域很简单但是只支持 GET 请求方式。而且在服务器端接受到 JSONP 请求后需要设置')]),_._v(" "),t("p",[_._v("请求头，添加 Access-Control-Allow-Origin 属性，属性值为览器才会正常解析，否则会报 406 错误。")]),_._v(" "),t("p",[_._v("，表示允许所有域名访问，这样浏")]),_._v(" "),t("h4",{attrs:{id:"cors-方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cors-方式"}},[_._v("#")]),_._v(" CORS 方式")]),_._v(" "),t("p",[_._v("CORS（Cross-Origin Resource Sharing）即跨域资源共享，需要浏览器和服务器同时支持，这种请求方式分为简单请求和非简单请求。")]),_._v(" "),t("p",[_._v("当浏览器发出的 XMLHttpRequest 请求的请求方式是 POST 或者 GET，请求头中只包含 Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type（application/x-www- form-urlencoded、multipart/form-data、text/plain）时那么这个请求就是一个简单请求。")]),_._v(" "),t("p",[_._v("对于简单的请求，浏览器会在请求头中添加 Origin 属性，标明本次请求来自哪个源（协议 + 域名 +")]),_._v(" "),t("p",[_._v("端口）。")]),_._v(" "),t("p",[_._v("如果 Origin 标明的域名在服务器许可范围内，那么服务器就会给出响应：")]),_._v(" "),t("p",[_._v("表示服务器同意浏览器发送 cookie，另外浏览器也需要设置支持发送 cookie，否则就算服务器支持浏览器也不会发送。")]),_._v(" "),t("p",[_._v("另外一种是非简单请求，请求方式是 PUT 或 DELETE，或者请求头中添加了 Content-")]),_._v(" "),t("p",[_._v("Type:application/json 属性和属性值的请求。")]),_._v(" "),t("p",[_._v("这种请求在浏览器正式发出 XMLHttpRequest 请求前会先发送一个预检 HTTP 请求，询问服务器当前网页的域名是否在服务器的许可名单之中，只有得到服务器的肯定后才会正式发出通信请求。")]),_._v(" "),t("p",[_._v("预检请求的头信息：")]),_._v(" "),t("p",[_._v("如果服务器回应预检请求的响应头中没有任何 CORS 相关的头信息的话表示不支持跨域，如果允许跨域就会做出响应，响应头信息如下：")]),_._v(" "),t("p",[_._v("接着浏览器会像简单请求一样，发送一个 CORS 请求，请求头中一定包含 Origin 属性，服务器的响应头中也一定得包含 Access-Control-Allow-Origin 属性。")]),_._v(" "),t("h4",{attrs:{id:"代理方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理方式"}},[_._v("#")]),_._v(" 代理方式")]),_._v(" "),t("p",[_._v("跨域限制是浏览器的同源策略导致的，使用 nginx 当做服务器访问别的服务的 HTTP 接口是不需要执行 JS 脚步不存在同源策略限制的，所以可以利用 Nginx 创建一个代理服务器，这个代理服务器的域名跟浏览器要访问的域名一致，然后通过这个代理服务器修改 cookie 中的域名为要访问的 HTTP 接口的域名，通过反向代理实现跨域。")]),_._v(" "),t("p",[_._v("Nginx 的配置信息：")]),_._v(" "),t("p",[_._v("前端代码：")]),_._v(" "),t("h2",{attrs:{id:"_14-tcp-为什么要三次握手-两次不行吗-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-tcp-为什么要三次握手-两次不行吗-为什么"}},[_._v("#")]),_._v(" 14，TCP 为什么要三次握手，两次不行吗？为什么？")]),_._v(" "),t("blockquote",[t("p",[_._v('CP 客户端和服务端建立连接需要三次握手，首先服务端需要开启监听，等待客户端的连接请求，这个时候服务端处于"收听"状态；')]),_._v(" "),t("p",[_._v('客户端向服务端发起连接，选择 的初始序列号，此时客户端处于"同步已发送"的状态；')]),_._v(" "),t("p",[_._v("服务端收到客户端的连接请求，同意连接并向客户端发送确认，确认号是 表示客户")]),_._v(" "),t("p",[_._v('端可以发送下一个数据包序号从于"同步收到"状态；')]),_._v(" "),t("p",[_._v("开始，同时选择")]),_._v(" "),t("p",[_._v("的初始序列号，此时服务端处")]),_._v(" "),t("p",[_._v("客户端收到服务端的确认后，向服务端发送确认信息，确认号是 表示服务端可以发")]),_._v(" "),t("p",[_._v('送下一个数据包序号从 开始，此时客户端处于"已建立连接"的状态；')]),_._v(" "),t("p",[_._v('服务端收到客户端的确认后，也进入"已建立连接"的状态。')])]),_._v(" "),t("p",[_._v("从三次握手的过程可以看出如果只有两次握手，那么客户端的起始序列号可以确认，服务端的起始 序列号将得不到确认。")]),_._v(" "),t("blockquote",[t("p",[t("img",{attrs:{src:"media/image2.jpeg",alt:""}}),_._v('{width="5.346527777777778in" height="5.979166666666667in"}')])]),_._v(" "),t("h2",{attrs:{id:"_15-说一下-tcp-粘包是怎么产生的-怎么解决粘包问题的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-说一下-tcp-粘包是怎么产生的-怎么解决粘包问题的"}},[_._v("#")]),_._v(" 15，说一下 TCP 粘包是怎么产生的？怎么解决粘包问题的？")]),_._v(" "),t("p",[_._v("上文中讲 TCP 和 UDP 区别的时候提到 TCP 传输数据基于字节流，从应用层到 TCP 传输层的多个数据包是一连串的字节流是没有边界的，而且 TCP 首部并没有记录数据包的长度，所以 TCP 传输数据的时候可能会发送粘包和拆包的问题；而 UDP 是基于数据报传输数据的，UDP 首部也记录了数据报的长度，可以轻易的区分出不同的数据包的边界。")]),_._v(" "),t("blockquote",[t("p",[t("img",{attrs:{src:"media/image9.jpeg",alt:""}}),_._v('{width="6.722916666666666in" height="6.091666666666667in"}')])]),_._v(" "),t("p",[_._v("造成粘包和拆包现象的原因：")]),_._v(" "),t("blockquote",[t("p",[_._v("TCP 发送缓冲区剩余空间不足以发送一个完整的数据包，将发生拆包； 要发送的数据超过了最大报文长度的限制，TCP 传输数据时进行拆包；")]),_._v(" "),t("p",[_._v("要发送的数据包小于 TCP 发送缓冲区剩余空间，TCP 将多个数据包写满发送缓冲区一次发送出去，将发生粘包；")]),_._v(" "),t("p",[_._v("接收端没有及时读取 TCP 发送缓冲区中的数据包，将会发生粘包。")])]),_._v(" "),t("p",[_._v("粘包拆包的解决方法：")]),_._v(" "),t("blockquote",[t("p",[_._v("发送端给数据包添加首部，首部中添加数据包的长度属性，这样接收端通过首部中的长度字段 就可以知道数据包的实际长度啦；")]),_._v(" "),t("p",[_._v("针对发送的数据包小于缓冲区大小的情况，发送端可以将不同的数据包规定成同样的长度，不 足这个长度的补充 0，接收端从缓冲区读取固定的长度数据这样就可以区分不同的数据包； 发送端通过给不同的数据包添加间隔符合确定边界，接收端通过这个间隔符合就可以区分不同 的数据包。")])]),_._v(" "),t("h2",{attrs:{id:"_16-http1-0、http1-1、http2-0的关系和区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-http1-0、http1-1、http2-0的关系和区别"}},[_._v("#")]),_._v(" 16，HTTP1.0、HTTP1.1、HTTP2.0的关系和区别")]),_._v(" "),t("h4",{attrs:{id:"一-对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-对比"}},[_._v("#")]),_._v(" 一，对比")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image10.jpeg",alt:""}}),_._v('{width="6.629166666666666in" height="2.7506944444444446in"}')]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("二、HTTP1.0：")])])]),_._v(" "),t("p",[_._v("浏览器的每次请求都需要与服务器建立一个TCP连接，服务器处理完成后立即断开TCP连接（无连 接），服务器不跟踪每个客户端也不记录过去的请求（无状态）。")]),_._v(" "),t("h4",{attrs:{id:"三、http1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、http1-1"}},[_._v("#")]),_._v(" 三、HTTP1.1：")]),_._v(" "),t("p",[_._v("HTTP/1.0中默认使用Connection: close。在HTTP/1.1中已经默认使用Connection: keep-alive，避免了连接建立和释放的开销，但服务器必须按照客户端请求的先后顺序依次回送相应的结果，以保 证客户端能够区分出每次请求的响应内容。通过Content-Length字段来判断当前请求的数据是否已 经全部接收。不允许同时存在两个并行的响应。")]),_._v(" "),t("h4",{attrs:{id:"四、http2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、http2-0"}},[_._v("#")]),_._v(" 四、HTTP2.0：")]),_._v(" "),t("p",[_._v("HTTP/2引入二进制数据帧和流的概念，其中帧对数据进行顺序标识，如下图所示，这样浏览器收到 数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了 序列，服务器就可以并行的传输数据，这就是流所做的事情。")]),_._v(" "),t("p",[_._v("流（stream） 已建立连接上的双向字节流 消息 与逻辑消息对应的完整的一系列数据帧 帧 HTTP2.0")]),_._v(" "),t("p",[_._v("通信的最小单位，每个帧包含帧头部，至少也会标识出当前帧所属的流（stream id）。 多路复用：")]),_._v(" "),t("p",[_._v("1、所有的HTTP2.0通信都在一个TCP连接上完成，这个连接可以承载任意数量的双向数据流。")]),_._v(" "),t("p",[_._v("2、每个数据流以消息的形式发送，而消息由一或多个帧组成。这些帧可以乱序发送，然后再根据 每个帧头部的流标识符（stream id）重新组装。")]),_._v(" "),t("p",[_._v("举个例子，每个请求是一个数据流，数据流以消息的方式发送，而消息又分为多个帧，帧头部记录 着stream id用来标识所属的数据流，不同属的帧可以在连接中随机混杂在一起。接收方可以根据stream id将帧再归属到各自不同的请求当中去。")]),_._v(" "),t("p",[_._v("3、另外，多路复用（连接共享）可能会导致关键请求被阻塞。HTTP2.0里每个数据流都可以设置优 先级和依赖，优先级高的数据流会被服务器优先处理和返回给客户端，数据流还可以依赖其他的子 数据流。")]),_._v(" "),t("p",[_._v('4、可见，HTTP2.0实现了真正的并行传输，它能够在一个TCP上进行任意数量HTTP请求。而这个 强大的功能则是基于"二进制分帧"的特性。')]),_._v(" "),t("p",[_._v("头部压缩")]),_._v(" "),t("p",[_._v("在HTTP1.x中，头部元数据都是以纯文本的形式发送的，通常会给每个请求增加500~800字节的负 荷。")]),_._v(" "),t("p",[_._v("HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header ﬁelds表， 既避免了重复header的传输，又减小了需要传输的大小。高效的压缩算法可以很大的压缩header，减少发送包的数量从而降低延迟。")]),_._v(" "),t("p",[_._v("服务器推送：")]),_._v(" "),t("p",[_._v("服务器除了对最初请求的响应外，服务器还可以额外的向客户端推送资源，而无需客户端明确的请 求。")]),_._v(" "),t("h2",{attrs:{id:"_17-说说http协议与tcp-ip协议的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-说说http协议与tcp-ip协议的关系"}},[_._v("#")]),_._v(" 17，说说HTTP协议与TCP/IP协议的关系")]),_._v(" "),t("p",[_._v("HTTP的长连接和短连接本质上是TCP长连接和短连接。")]),_._v(" "),t("p",[_._v("HTTP属于应用层协议，在传输层使用TCP协议，在网络层使用IP协议。 IP协议主要解决网络路由和寻址问题，")]),_._v(" "),t("p",[_._v("TCP协议主要解决如何在IP层之上可靠地传递数据包，使得网络上接收端收到发送端所发出的所有 包，并且顺序与发送顺序一致。TCP协议是可靠的、面向连接的。")]),_._v(" "),t("h2",{attrs:{id:"_18-如何理解http协议是无状态的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-如何理解http协议是无状态的"}},[_._v("#")]),_._v(" 18，如何理解HTTP协议是无状态的？")]),_._v(" "),t("p",[_._v("HTTP协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。 也就是说，打开一个服务器上的网页和上一次打开这个服务器上的网页之间没有任何联系。HTTP是 一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是 UDP协议（无连接）。")]),_._v(" "),t("h2",{attrs:{id:"_19-什么是长连接和短连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-什么是长连接和短连接"}},[_._v("#")]),_._v(" 19，什么是长连接和短连接？")]),_._v(" "),t("p",[_._v("在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连 接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的 Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重 新建立一个HTTP会话。")]),_._v(" "),t("p",[_._v("而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加 入这行代码：")]),_._v(" "),t("p",[_._v("在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连 接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会 永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现 长连接需要客户端和服务端都支持长连接。")]),_._v(" "),t("p",[_._v("HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。")]),_._v(" "),t("h2",{attrs:{id:"_20-长连接和短连接的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-长连接和短连接的优缺点"}},[_._v("#")]),_._v(" 20，长连接和短连接的优缺点？")]),_._v(" "),t("p",[_._v("长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间 。对于频繁请求资源的客户来说，较适用长连接。不过这里存在一个问题，存活功能的探测周期太长，还有就是它只是探测TCP 连接的存活，属于比较斯文的做法，遇到恶意的连接时，保活功能就不够使了。在长连接的应用场 景下，client端一般不会主动关闭它们之间的连接，Client与server之间的连接如果一直不关闭的 话，会存在一个问题，随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需 要采取一些策略，如关闭一些长时间没有读写事件发生的连接，这样可 以避免一些恶意连接导致server端服务受损；如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接 数，这样可以完全避免某个蛋疼的客户端连累后端服务。")]),_._v(" "),t("p",[_._v("短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。但如 果客户请求频繁，将在TCP的建立和关闭操作上浪费时间和带宽。")]),_._v(" "),t("h2",{attrs:{id:"_21-说说长连接短连接的操作过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-说说长连接短连接的操作过程"}},[_._v("#")]),_._v(" 21，说说长连接短连接的操作过程")]),_._v(" "),t("p",[_._v("短连接的操作步骤是：建立连接------数据传输------关闭连接...建立连接------数据传输------关闭连 接长连接的操作步骤是：建立连接------数据传输...（保持连接）...数据传输------关闭连接")]),_._v(" "),t("h2",{attrs:{id:"_22-说说tcp三次握手和四次挥手的全过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-说说tcp三次握手和四次挥手的全过程"}},[_._v("#")]),_._v(" 22，说说TCP三次握手和四次挥手的全过程")]),_._v(" "),t("h4",{attrs:{id:"三次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[_._v("#")]),_._v(" 三次握手")]),_._v(" "),t("p",[_._v("第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包")]),_._v(" "),t("p",[_._v("（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关 闭连接之前，TCP 连接都将被一直保持下去。")]),_._v(" "),t("h4",{attrs:{id:"四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[_._v("#")]),_._v(" 四次挥手")]),_._v(" "),t("p",[_._v('与建立连接的"三次握手"类似，断开一个TCP连接则需要"四次握手"。 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在ﬁn包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关 闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序')]),_._v(" "),t("p",[_._v("号）。 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。")]),_._v(" "),t("h2",{attrs:{id:"_23、osi-的七层模型都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、osi-的七层模型都有哪些"}},[_._v("#")]),_._v(" 23、OSI 的七层模型都有哪些？")]),_._v(" "),t("p",[_._v("OSI（Open System Interconnection）开放系统互连参考模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。")]),_._v(" "),t("blockquote",[t("p",[_._v("应用层：各种应用程序协议，比如 HTTP、HTTPS、FTP、SOCKS 安全套接字协议、DNS 域名系统、GDP 网关发现协议等等。")]),_._v(" "),t("p",[_._v("表示层：加密解密、转换翻译、压缩解压缩，比如 LPP 轻量级表示协议。")]),_._v(" "),t("p",[_._v("会话层：不同机器上的用户建立和管理会话，比如 SSL 安全套接字层协议、TLS 传输层安全协议、RPC 远程过程调用协议等等。")]),_._v(" "),t("p",[_._v("传输层：接受上一层的数据，在必要的时候对数据进行分割，并将这些数据交给网络层，保证 这些数据段有效到达对端，比如 TCP 传输控制协议、UDP 数据报协议。")]),_._v(" "),t("p",[_._v("网络层：控制子网的运行：逻辑编址、分组传输、路由选择，比如 IP、IPV6、SLIP 等等。数据链路层：物理寻址，同时将原始比特流转变为逻辑传输路线，比如 XTP 压缩传输协议、PPTP 点对点隧道协议等等。")]),_._v(" "),t("p",[_._v("物理层：机械、电子、定时接口通信信道上的原始比特流传输，比如 IEEE802.2 等等。")]),_._v(" "),t("p",[t("img",{attrs:{src:"media/image11.png",alt:""}}),_._v('{width="1.5208333333333333in" height="3.3645833333333335in"}')])]),_._v(" "),t("h2",{attrs:{id:"_24、osi这样分层有什么好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24、osi这样分层有什么好处"}},[_._v("#")]),_._v(" 24、OSI这样分层有什么好处？")]),_._v(" "),t("p",[_._v("OSI分层的好处可以从五个方面讲：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("人们可以很容易的讨论和学习协议的规范细节。")])]),_._v(" "),t("li",[t("p",[_._v("层间的标准接口方便了工程模块化。")])]),_._v(" "),t("li",[t("p",[_._v("创建了一个更好的互连环境。")])]),_._v(" "),t("li",[t("p",[_._v("降低了复杂度，使程序更容易修改，产品开发的速度更快。")])]),_._v(" "),t("li",[t("p",[_._v("每层利用紧邻的下层服务，更容易记住个层的功能。")])])]),_._v(" "),t("h2",{attrs:{id:"_25、说说tcp-ip四层网络模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25、说说tcp-ip四层网络模型"}},[_._v("#")]),_._v(" 25、说说TCP/IP四层网络模型")]),_._v(" "),t("p",[_._v("TCP/IP分层模型（TCP/IP Layening Model）被称作因特网分层模型(Internet Layering Model)、因特网参考模型(Internet Reference Model)。下图表示了TCP/IP分层模型的四层。")]),_._v(" "),t("blockquote",[t("p",[t("img",{attrs:{src:"media/image12.png",alt:""}}),_._v('{width="3.654861111111111in" height="3.761111111111111in"}')])]),_._v(" "),t("p",[_._v("TCP/IP协议被组织成四个概念层，其中有三层对应于ISO参考模型中的相应层。ICP/IP协议族并不包 含物理层和数据链路层，因此它不能独立完成整个计算机网络系统的功能，必须与许多其他的协议 协同工作。 TCP/IP分层模型的四个协议层分别完成以下的功能：")]),_._v(" "),t("h4",{attrs:{id:"第一层-网络接口层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一层-网络接口层"}},[_._v("#")]),_._v(" 第一层 网络接口层")]),_._v(" "),t("p",[_._v("网络接口层包括用于协作IP数据在已有网络介质上传输的协议。协议：ARP,RARP")]),_._v(" "),t("h4",{attrs:{id:"第二层-网间层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二层-网间层"}},[_._v("#")]),_._v(" 第二层 网间层")]),_._v(" "),t("p",[_._v("网间层对应于OSI七层参考模型的网络层。负责数据的包装、寻址和路由。同时还包含网间控制报 文协议(Internet Control Message Protocol,ICMP)用来提供网络诊断信息。")]),_._v(" "),t("p",[_._v("协议：本层包含IP协议、RIP协议(Routing Information Protocol，路由信息协议)，ICMP协议。"),t("strong",[_._v("第三层 传输层")])]),_._v(" "),t("p",[_._v("传输层对应于OSI七层参考模型的传输层，它提供两种端到端的通信服务。")]),_._v(" "),t("p",[_._v("其中TCP协议(Transmission Control Protocol)提供可靠的数据流运输服务，UDP协议(Use Datagram Protocol)提供不可靠的用户数据报服务。")]),_._v(" "),t("h4",{attrs:{id:"第四层-应用层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四层-应用层"}},[_._v("#")]),_._v(" 第四层 应用层")]),_._v(" "),t("p",[_._v("应用层对应于OSI七层参考模型的应用层和表达层。")]),_._v(" "),t("p",[_._v("因特网的应用层协议包括Finger、Whois、FTP(文件传输协议)、Gopher、HTTP(超文本传输协")]),_._v(" "),t("p",[_._v("议)、Telent(远程终端协议)、SMTP(简单邮件传送协议)、IRC(因特网中继会话)、NNTP（网络新闻 传输协议）等。")]),_._v(" "),t("h2",{attrs:{id:"_26、说说域名解析详细过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26、说说域名解析详细过程"}},[_._v("#")]),_._v(" 26、说说域名解析详细过程？")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("浏览器访问 "),t("span",{staticClass:"underline"},[_._v("www.baidu.com")]),_._v("，询问本地 DNS 服务器是否缓存了该网址解析后的 IP 地址。")])]),_._v(" "),t("li",[t("p",[_._v("如果本地 DNS 服务器没有缓存的话，就去 root-servers.net 根服务器查询该网址对应的 IP 地址。")])]),_._v(" "),t("li",[t("p",[_._v("根服务器返回顶级域名服务器的网址 gtld-servers.net，然后本地 DNS 服务器去顶级域名服务器查询该网址对应的 IP 地址。")])]),_._v(" "),t("li",[t("p",[_._v("顶级域名服务器返回 "),t("span",{staticClass:"underline"},[_._v("www.baidu.com")]),_._v(" 主区域服务器的地址，然后本地 DNS 服务器去 "),t("span",{staticClass:"underline"},[_._v("www.ba")]),_._v(" "),t("span",{staticClass:"underline"},[_._v("idu.com")]),_._v(" 主区域服务器查询此域名对应的 IP 地址。")])]),_._v(" "),t("li",[t("p",[_._v("本地 DNS 服务器拿到 "),t("span",{staticClass:"underline"},[_._v("www.baidu.com")]),_._v(" 解析后的 IP 地址后，缓存起来以便备查，然后把解析后的 IP 地址返回给浏览器。")])])]),_._v(" "),t("h2",{attrs:{id:"_27、-ip-地址分为几类-每类都代表什么-私网是哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27、-ip-地址分为几类-每类都代表什么-私网是哪些"}},[_._v("#")]),_._v(" 27、 IP 地址分为几类，每类都代表什么，私网是哪些？")]),_._v(" "),t("p",[_._v("大致上分为公共地址和私有地址两大类，公共地址可以在外网中随意访问，私有地址只能在内网访 问只有通过代理服务器才可以和外网通信。")]),_._v(" "),t("p",[_._v("公共地址：")]),_._v(" "),t("p",[_._v("私有地址：")]),_._v(" "),t("blockquote",[t("p",[_._v("0.0.0.0 路由器转发使用")]),_._v(" "),t("p",[_._v("127.x.x.x 保留")]),_._v(" "),t("p",[_._v("255.255.255.255 局域网下的广播地址")])]),_._v(" "),t("h2",{attrs:{id:"_28、说说tcp-如何保证可靠性的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28、说说tcp-如何保证可靠性的"}},[_._v("#")]),_._v(" 28、说说TCP 如何保证可靠性的？")]),_._v(" "),t("h4",{attrs:{id:"序列号和确认号机制-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列号和确认号机制-2"}},[_._v("#")]),_._v(" 序列号和确认号机制：")]),_._v(" "),t("p",[_._v("TCP 发送端发送数据包的时候会选择一个 seq 序列号，接收端收到数据包后会检测数据包的完整性，如果检测通过会响应一个 ack 确认号表示收到了数据包。")]),_._v(" "),t("h4",{attrs:{id:"超时重发机制-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#超时重发机制-2"}},[_._v("#")]),_._v(" 超时重发机制：")]),_._v(" "),t("p",[_._v("TCP 发送端发送了数据包后会启动一个定时器，如果一定时间没有收到接受端的确认后，将会重新发送该数据包。")]),_._v(" "),t("h4",{attrs:{id:"对乱序数据包重新排序-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对乱序数据包重新排序-2"}},[_._v("#")]),_._v(" 对乱序数据包重新排序：")]),_._v(" "),t("p",[_._v("从 IP 网络层传输到 TCP 层的数据包可能会乱序，TCP 层会对数据包重新排序再发给应用层。"),t("strong",[_._v("丢弃重复数据：")])]),_._v(" "),t("p",[_._v("从 IP 网络层传输到 TCP 层的数据包可能会重复，TCP 层会丢弃重复的数据包。"),t("strong",[_._v("流量控制：")])]),_._v(" "),t("p",[_._v("TCP 发送端和接收端都有一个固定大小的缓冲空间，为了防止发送端发送数据的速度太快导致接收端缓冲区溢出，发送端只能发送接收端可以接纳的数据，为了达到这种控制效果，TCP 用了流量控制协议（可变大小的滑动窗口协议）来实现。")])])}),[],!1,null,null,null);v.default=e.exports}}]);