(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{543:function(t,e,v){"use strict";v.r(e);var a=v(25),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"tomcat篇"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tomcat篇"}},[t._v("#")]),t._v(" Tomcat篇")]),t._v(" "),v("h2",{attrs:{id:"_1、tomcat的缺省端口是多少-怎么修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、tomcat的缺省端口是多少-怎么修改"}},[t._v("#")]),t._v(" 1、Tomcat的缺省端口是多少，怎么修改？")]),t._v(" "),v("p",[t._v("默认端口为8080，可以通过在tomcat安装包conf目录下，service.xml中的Connector元素的port 属性来修改端口。")]),t._v(" "),v("h2",{attrs:{id:"_2、tomcat-有哪几种connector-运行模式-优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、tomcat-有哪几种connector-运行模式-优化"}},[t._v("#")]),t._v(" 2、tomcat 有哪几种Connector 运行模式(优化)？")]),t._v(" "),v("p",[t._v("这三种模式的不同之处如下：")]),t._v(" "),v("p",[t._v("：一个线程处理一个请求。缺点：并发量高时，线程数较多，浪费资源。Tomcat7版本或更低 版本中，在Linux系统中默认使用这种方式。")]),t._v(" "),v("blockquote",[v("p",[t._v("：利用Java的异步IO处理，可以通过少量的线程处理大量的请求。tomcat8.0.x中默认使用的是")])]),t._v(" "),v("p",[t._v("NIO。Tomcat7必须修改Connector配置来启动：")]),t._v(" "),v("p",[t._v("：即Apache Portable Runtime，从操作系统层面解决io阻塞问题。Tomcat7或Tomcat8在Win7或以上的系统中启动默认使用这种方式。")]),t._v(" "),v("h2",{attrs:{id:"_3、tomcat有几种部署方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、tomcat有几种部署方式"}},[t._v("#")]),t._v(" 3、Tomcat有几种部署方式？")]),t._v(" "),v("blockquote",[v("p",[t._v("利用Tomcat的自动部署：把web应用拷贝到webapps目录（生产环境不建议放在该目录 中）。Tomcat在启动时会加载目录下的应用，并将编译后的结果放入work目录下。")]),t._v(" "),v("p",[t._v('使用Manager App控制台部署：在tomcat主页点击"Manager App" 进入应用管理控制台，可以指定一个web应用的路径或war文件。')]),t._v(" "),v("p",[t._v("修改 文件部署：在 文件中，增加Context节点可以部署应用。")]),t._v(" "),v("p",[t._v("增加自定义的Web部署文件：在")]),t._v(" "),v("p",[t._v("Context节点，可以部署应用。")]),t._v(" "),v("p",[t._v("路径下增加 xyz.xml文件，内容是")])]),t._v(" "),v("h2",{attrs:{id:"_4、tomcat容器是如何创建servlet类实例-用到了什么原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、tomcat容器是如何创建servlet类实例-用到了什么原理"}},[t._v("#")]),t._v(" 4、tomcat容器是如何创建servlet类实例？用到了什么原理？")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("当容器启动时，会读取在webapps目录下所有的web应用中的web.xml文件，然后对 xml文件进行解析，并读取servlet注册信息。然后，将每个应用中注册的servlet类都进行加载，并通过 反射的方式实例化。（有时候也是在第一次请求时实例化）")])]),t._v(" "),v("li",[v("p",[t._v("在servlet注册时加上1如果为正数，则在一开始就实例化，如果不写或为负数，则第一次请求 实例化。")])])]),t._v(" "),v("h2",{attrs:{id:"_5、tomcat-如何优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、tomcat-如何优化"}},[t._v("#")]),t._v(" 5、tomcat 如何优化？")]),t._v(" "),v("p",[t._v("tomcat作为Web服务器，它的处理性能直接关系到用户体验，下面是几种常见的优化措施：")]),t._v(" "),v("p",[t._v("掉对web.xml的监视，把jsp提前编辑成Servlet。有富余物理内存的情况，加大tomcat使用的jvm的 内存")]),t._v(" "),v("p",[t._v("服务器所能提供CPU、内存、硬盘的性能对处理能力有决定性影响。")]),t._v(" "),v("blockquote",[v("p",[t._v("对于高并发情况下会有大量的运算，那么CPU的速度会直接影响到处理速度。")]),t._v(" "),v("p",[t._v("内存在大量数据处理的情况下，将会有较大的内存容量需求，可以用-Xmx -Xms - XX:MaxPermSize等参数对内存不同功能块进行划分。我们之前就遇到过内存分配不足，导致 虚拟机一直处于full GC，从而导致处理能力严重下降。")]),t._v(" "),v("p",[t._v("硬盘主要问题就是读写性能，当大量文件进行读写时，磁盘极容易成为性能瓶颈。最好的办法 还是利用下面提到的缓存。")]),t._v(" "),v("p",[t._v("对于静态页面最好是能够缓存起来，这样就不必每次从磁盘上读。这里我们采用了Nginx作为 缓存服务器，将图片、css、js文件都进行了缓存，有效的减少了后端tomcat的访问。")]),t._v(" "),v("p",[t._v("另外，为了能加快网络传输速度，开启gzip压缩也是必不可少的。但考虑到tomcat已经需要处 理很多东西了，所以把这个压缩的工作就交给前端的Nginx来完成。")]),t._v(" "),v("p",[t._v("除了文本可以用gzip压缩，其实很多图片也可以用图像处理工具预先进行压缩，找到一个平衡 点可以让画质损失很小而文件可以减小很多。曾经我就见过一个图片从300多kb压缩到几十 kb，自己几乎看不出来区别。")])]),t._v(" "),v("p",[t._v("单个服务器性能总是有限的，最好的办法自然是实现横向扩展，那么组建tomcat集群是有效提升性 能的手段。我们还是采用了Nginx来作为请求分流的服务器，后端多个tomcat共享session来协同工 作。可以参考之前写的《利用nginx+tomcat+memcached组建web服务器负载均衡》。")]),t._v(" "),v("p",[t._v('找到Connector port="8080" protocol="HTTP/1.1"，增加maxThreads和acceptCount属性（使acceptCount大于等于maxThreads），如下：')]),t._v(" "),v("p",[t._v("其中：")]),t._v(" "),v("p",[t._v("在server.xml中增加executor节点，然后配置connector的executor属性，如下：")]),t._v(" "),v("p",[t._v("其中：")]),t._v(" "),v("p",[t._v("注：当tomcat并发用户量大的时候，单个jvm进程确实可能打开过多的文件句柄，这时会报")]),t._v(" "),v("p",[t._v("java.net.SocketException:Too many open ﬁles错误。可使用下面步骤检查：")]),t._v(" "),v("blockquote",[v("p",[t._v("删除没用的web应用：因为tomcat启动每次都会部署这些应用。")]),t._v(" "),v("p",[t._v("关闭WebSocket： 。")]),t._v(" "),v("p",[t._v("随机数优化：设置JVM参数： 。")])]),t._v(" "),v("p",[t._v("因为tomcat启动起来后就是一个java进程，所以这块可以参照JVM部分的优化思路。堆内存相关参 数，比如说：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("-Xms：虚拟机初始化时的最小堆内存。")])]),t._v(" "),v("li",[v("p",[t._v("-Xmx：虚拟机可使用的最大堆内存。-Xms与-Xmx设成一样的值，避免JVM因为频繁的GC导致性 能大起大落")])]),t._v(" "),v("li",[v("p",[t._v("-XX:MaxNewSize：新生代占整个堆内存的最大值。")])])]),t._v(" "),v("p",[t._v("另外还有方法区参数调整（注意：JDK版本）、垃圾收集器等优化。JVM相关参数请看："),v("span",{staticClass:"underline"},[t._v("手把手教你设置JVM调优参数")])]),t._v(" "),v("h2",{attrs:{id:"_6、熟悉tomcat的哪些配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6、熟悉tomcat的哪些配置"}},[t._v("#")]),t._v(" 6、熟悉tomcat的哪些配置？")]),t._v(" "),v("blockquote",[v("p",[t._v("(表示一个web应用程序，通常为WAR文件，关于WAR的具体信息见servlet规范)标签。")]),t._v(" "),v("p",[t._v("：该web应用的文档基准目录（Document Base，也称为Context Root），或者是WAR")])]),t._v(" "),v("p",[t._v("文件的路径。可以使绝对路径，也可以使用相对于context所属的Host的appBase路径。")]),t._v(" "),v("blockquote",[v("p",[t._v("：表示此web应用程序的url的前缀，这样请求的url为 。")]),t._v(" "),v("p",[t._v("：这个属性非常重要，如果为true，则tomcat会自动检测应用程序的/WEB-INF/lib")])]),t._v(" "),v("p",[t._v("和/WEB-INF/classes目录的变化，自动装载新的应用程序，我们可以在不重启tomcat的情况下改变 应用程序。")]),t._v(" "),v("p",[t._v("：如果希望Catalina为该web应用使能一个JNDI InitialContext对象，设为true。该InitialialContext符合J2EE平台的约定，缺省值为true。")]),t._v(" "),v("blockquote",[v("p",[t._v("：Context提供的临时目录的路径，用于servlet的临时读/写。利用")])]),t._v(" "),v("p",[t._v("javax.servlet.context.tempdir属性，servlet可以访问该目录。如果没有指定，使用")]),t._v(" "),v("p",[t._v("$CATALINA_HOME/work下一个合适的目录。")]),t._v(" "),v("blockquote",[v("p",[t._v("：如果该值为true，System.out和System.err的输出被重定向到web应用的")])]),t._v(" "),v("p",[t._v("logger。如果没有指定，缺省值为false")]),t._v(" "),v("p",[t._v("：与这个Engine关联的Logger记录的调试信息的详细程度。数字越大，输出越详细。如果没 有指定，缺省为0。")]),t._v(" "),v("blockquote",[v("p",[t._v("(表示一个虚拟主机)标签。")]),t._v(" "),v("p",[t._v("：指定主机名。")]),t._v(" "),v("p",[t._v("：应用程序基本目录，即存放应用程序的目录。")])]),t._v(" "),v("p",[t._v("：如果为true，则tomcat会自动将WAR文件解压，否则不解压，直接从WAR文件中运 行应用程序。")]),t._v(" "),v("blockquote",[v("p",[t._v("(表示日志，调试和错误信息)标签。")]),t._v(" "),v("p",[t._v("：指定logger使用的类名，此类必须实现org.apache.catalina.Logger接口。")]),t._v(" "),v("p",[t._v("：指定log文件的前缀。")]),t._v(" "),v("p",[t._v("：指定log文件的后缀。")]),t._v(" "),v("p",[t._v("：如果为true，则log文件名中要加入时间，如下例：localhost_log.2001-10-04.txt。")])]),t._v(" "),v("h2",{attrs:{id:"_7、tomcat是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7、tomcat是什么"}},[t._v("#")]),t._v(" 7、Tomcat是什么？")]),t._v(" "),v("p",[t._v("Tomcat 服务器Apache软件基金会项目中的一个核心项目，是一个免费的开放源代码的Web 应用服务器（Servlet容器），属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被 普遍使用，是开发和调试JSP 程序的首选。")]),t._v(" "),v("h2",{attrs:{id:"_8-什么是servlet呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-什么是servlet呢"}},[t._v("#")]),t._v(" 8，什么是Servlet呢？")]),t._v(" "),v("p",[t._v("Servlet是JavaEE规范的一种，主要是为了扩展Java作为Web服务的功能，统一接口。由其他内部厂 商如tomcat，jetty内部实现web的功能。如一个http请求到来：容器将请求封装为servlet中的HttpServletRequest对象，调用init()，service()等方法输出response,由容器包装为httpresponse 返回给客户端的过程。")]),t._v(" "),v("p",[v("img",{attrs:{src:"media/image1.jpeg",alt:""}}),t._v('{width="6.789583333333334in" height="3.951388888888889in"}')]),t._v(" "),v("h2",{attrs:{id:"_9-什么是servlet规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是servlet规范"}},[t._v("#")]),t._v(" 9，什么是Servlet规范？")]),t._v(" "),v("blockquote",[v("p",[t._v("从 Jar 包上来说，Servlet 规范就是两个 Jar 文件。servlet-api.jar 和 jsp-api.jar，Jsp 也是一种")]),t._v(" "),v("p",[t._v("Servlet。")]),t._v(" "),v("p",[t._v("从package上来说，就是 javax.servlet 和 javax.servlet.http 两个包。")]),t._v(" "),v("p",[t._v("从接口来说，就是规范了 Servlet 接口、Filter 接口、Listener 接口、ServletRequest 接口、")]),t._v(" "),v("p",[t._v("ServletResponse 接口等。类图如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:"media/image2.jpeg",alt:""}}),t._v('{width="6.378472222222222in" height="3.9784722222222224in"}')])]),t._v(" "),v("h2",{attrs:{id:"_10、为什么我们将tomcat称为web容器或者servlet容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10、为什么我们将tomcat称为web容器或者servlet容器"}},[t._v("#")]),t._v(" 10、为什么我们将tomcat称为Web容器或者Servlet容器 ？")]),t._v(" "),v("p",[t._v("我们用一张图来表示他们之间的关系:")]),t._v(" "),v("p",[v("img",{attrs:{src:"media/image3.png",alt:""}}),t._v('{width="6.829166666666667in" height="2.227777777777778in"}')]),t._v(" "),v("p",[t._v("简单的理解：启动一个ServerSocket，监听8080端口。Servlet"),v("strong",[t._v("容器")]),t._v("用来装我们开发的Servlet。")]),t._v(" "),v("h2",{attrs:{id:"_11-tomcat是如何处理http请求流程的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-tomcat是如何处理http请求流程的"}},[t._v("#")]),t._v(" 11，tomcat是如何处理Http请求流程的？")]),t._v(" "),v("p",[t._v("假设来我们在浏览器上输入"),v("span",{staticClass:"underline"},[t._v("http://localhost:8080/my-web-mave/index.jsp")]),t._v(" 在tomcat中是如何处理这个请求流程的：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("我们的请求被发送到本机端口8080，被在那里侦听的Coyote HTTP/1.1 Connector获得。")])]),t._v(" "),v("li",[v("p",[t._v("Connector把该请求交给它所在的Service的Engine来处理，并等待来自Engine的回应 。")])]),t._v(" "),v("li",[v("p",[t._v("Engine获得请求localhost/my-web-maven/index.jsp，匹配它所拥有的所有虚拟主机Host ， 我们的虚拟主机在server.xml中默认配置的就是localhost。")])]),t._v(" "),v("li",[v("p",[t._v("Engine匹配到name=localhost的Host（即使匹配不到也把请求交给该Host处理，因为该Host")])])]),t._v(" "),v("blockquote",[v("p",[t._v("被定义为该Engine的默认主机）。")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[v("p",[t._v("localhost Host获得请求/my-web-maven/index.jsp，匹配它所拥有的所有Context。")])]),t._v(" "),v("li",[v("p",[t._v('Host匹配到路径为/my-web-maven的Context（如果匹配不到就把该请求交给路径名为""的Context去处理）。')])]),t._v(" "),v("li",[v("p",[t._v('path="/my-web-maven"的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet 。')])]),t._v(" "),v("li",[v("p",[t._v("Context匹配到URL PATTERN为*.jsp的servlet，对应于JspServlet类。")])]),t._v(" "),v("li",[v("p",[t._v("构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet 或doPost方法 。")])]),t._v(" "),v("li",[v("p",[t._v("Context把执行完了之后的HttpServletResponse对象返回给Host 。")])]),t._v(" "),v("li",[v("p",[t._v("Host把HttpServletResponse对象返回给Engine 。")])]),t._v(" "),v("li",[v("p",[t._v("Engine把HttpServletResponse对象返回给Connector 。")])]),t._v(" "),v("li",[v("p",[t._v("Connector把HttpServletResponse对象返回给客户browser 。")])])]),t._v(" "),v("h2",{attrs:{id:"_12、tomcat结构目录有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12、tomcat结构目录有哪些"}},[t._v("#")]),t._v(" 12、tomcat结构目录有哪些?")]),t._v(" "),v("p",[v("img",{attrs:{src:"media/image4.jpeg",alt:""}}),t._v('{width="6.854166666666667in" height="2.1416666666666666in"}')]),t._v(" "),v("h3",{attrs:{id:"bin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bin"}},[t._v("#")]),t._v(" bin")]),t._v(" "),v("p",[t._v("启动，关闭和其他脚本。这些 .sh文件（对于Unix系统）是这些.bat文件的功能副本（对于Windows系统）。由于Win32命令行缺少某些功能，因此此处包含一些其他文件。")]),t._v(" "),v("p",[t._v("比如说：windows下启动tomcat用的是startup.bat，另外Linux环境中使用的是startup.sh。对应 还有相应的shutdown关闭脚本。")]),t._v(" "),v("h3",{attrs:{id:"conf"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#conf"}},[t._v("#")]),t._v(" conf")]),t._v(" "),v("p",[t._v("tomcat的配置文件和相关的DTD。这里最重要的文件是server.xml。它是容器的主要配置文件。")]),t._v(" "),v("p",[t._v("：tomcat：安全策略文件，控制JVM相关权限，具体可以参考")]),t._v(" "),v("p",[t._v("java.security.Permission。")]),t._v(" "),v("p",[t._v("动加载 。")]),t._v(" "),v("blockquote",[v("p",[t._v("：tomcat Catalina 行为控制配置文件，比如：Common ClassLoader。")]),t._v(" "),v("p",[t._v("：tomcat日志配置文件。里面的日志采用的是JDK Logging。")])]),t._v(" "),v("p",[t._v("：tomcat server配置文件(对于我开发人员来说是非常重要)。")]),t._v(" "),v("blockquote",[v("p",[t._v("：全局context配置文件，监视并加载资源文件，当监视的文件发生发生变化时，自")]),t._v(" "),v("p",[t._v("：tomcat角色配置文件。")]),t._v(" "),v("p",[t._v("：Servlet标准的web.xml部署文件，tomcat默认实现部分配置 入内：")]),t._v(" "),v("p",[t._v("org.apache.catalina.servlets.DefaultServlet。org.apache.jasper.servlet.JspServlet")])]),t._v(" "),v("h3",{attrs:{id:"logs"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[t._v("#")]),t._v(" logs")]),t._v(" "),v("p",[t._v("日志文件默认位于此处。")]),t._v(" "),v("blockquote",[v("p",[t._v("有用，当你们的tomcat启动不了的时候，多看这个文件。比如：")]),t._v(" "),v("p",[t._v("NoClassDefFoundError ClassNotFoundException")])]),t._v(" "),v("p",[t._v("最没用。")]),t._v(" "),v("h3",{attrs:{id:"webapps"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webapps"}},[t._v("#")]),t._v(" webapps")]),t._v(" "),v("p",[t._v("主要是控制台输出，全部日志都在这里面。")]),t._v(" "),v("p",[t._v("这是您的webapp所在的位置。其实这里面这几个都是一个项目。")]),t._v(" "),v("p",[t._v("简化web部署的方式。在线上环境中我们的应用是不会放在这里的。最好的办法就是外置。")]),t._v(" "),v("p",[v("strong",[t._v("lib")]),t._v("：tomcat存放共用的类库。比如：")]),t._v(" "),v("blockquote",[v("p",[t._v("ecj-4.17.jar: eclipse Java编译器jasper.jar：JSP编译器。")])]),t._v(" "),v("h3",{attrs:{id:"work"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#work"}},[t._v("#")]),t._v(" work")]),t._v(" "),v("p",[t._v("存放tomcat运行时编译后的文件，比如JSP编译后的文件 。")]),t._v(" "),v("h3",{attrs:{id:"temp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#temp"}},[t._v("#")]),t._v(" temp")]),t._v(" "),v("p",[t._v("存放运行时产生的临时文件。")])])}),[],!1,null,null,null);e.default=_.exports}}]);