(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{577:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"语言元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语言元素"}},[t._v("#")]),t._v(" 语言元素")]),t._v(" "),a("h2",{attrs:{id:"指令和程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令和程序"}},[t._v("#")]),t._v(" 指令和程序")]),t._v(" "),a("p",[t._v("计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("“冯·诺依曼结构”"),a("outboundlink")],1),t._v("的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科"),a("outboundlink")],1),t._v("或者"),a("a",{attrs:{href:"https://baike.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度百科"),a("outboundlink")],1),t._v("科普一下。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明")]),t._v("：近期关于"),a("strong",[t._v("量子计算机")]),t._v("的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。")])]),t._v(" "),a("h2",{attrs:{id:"变量和类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和类型"}},[t._v("#")]),t._v(" 变量和类型")]),t._v(" "),a("p",[t._v("在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。")]),t._v(" "),a("ul",[a("li",[t._v("整型：Python中可以处理任意大小的整数（Python 2.x中有"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("long")]),t._v("两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如"),a("code",[t._v("0b100")]),t._v("，换算成十进制是4）、八进制（如"),a("code",[t._v("0o100")]),t._v("，换算成十进制是64）、十进制（"),a("code",[t._v("100")]),t._v("）和十六进制（"),a("code",[t._v("0x100")]),t._v("，换算成十进制是256）的表示法。")]),t._v(" "),a("li",[t._v("浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如"),a("code",[t._v("123.456")]),t._v("）之外还支持科学计数法（如"),a("code",[t._v("1.23456e2")]),t._v("）。")]),t._v(" "),a("li",[t._v("字符串型：字符串是以单引号或双引号括起来的任意文本，比如"),a("code",[t._v("'hello'")]),t._v("和"),a("code",[t._v('"hello"')]),t._v(",字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。")]),t._v(" "),a("li",[t._v("布尔型：布尔值只有"),a("code",[t._v("True")]),t._v("、"),a("code",[t._v("False")]),t._v("两种值，要么是"),a("code",[t._v("True")]),t._v("，要么是"),a("code",[t._v("False")]),t._v("，在Python中，可以直接用"),a("code",[t._v("True")]),t._v("、"),a("code",[t._v("False")]),t._v("表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如"),a("code",[t._v("3 < 5")]),t._v("会产生布尔值"),a("code",[t._v("True")]),t._v("，而"),a("code",[t._v("2 == 1")]),t._v("会产生布尔值"),a("code",[t._v("False")]),t._v("）。")]),t._v(" "),a("li",[t._v("复数型：形如"),a("code",[t._v("3+5j")]),t._v("，跟数学上的复数表示一样，唯一不同的是虚部的"),a("code",[t._v("i")]),t._v("换成了"),a("code",[t._v("j")]),t._v("。实际上，这个类型并不常用，大家了解一下就可以了。")])]),t._v(" "),a("h2",{attrs:{id:"变量命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量命名"}},[t._v("#")]),t._v(" 变量命名")]),t._v(" "),a("p",[t._v("对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。")]),t._v(" "),a("ul",[a("li",[t._v("硬性规则：\n"),a("ul",[a("li",[t._v("变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。")]),t._v(" "),a("li",[t._v("大小写敏感（大写的"),a("code",[t._v("a")]),t._v("和小写的"),a("code",[t._v("A")]),t._v("是两个不同的变量）。")]),t._v(" "),a("li",[t._v("不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。")])])]),t._v(" "),a("li",[t._v("PEP 8要求：\n"),a("ul",[a("li",[t._v("用小写字母拼写，多个单词用下划线连接。")]),t._v(" "),a("li",[t._v("受保护的实例属性用单个下划线开头（后面会讲到）。")]),t._v(" "),a("li",[t._v("私有的实例属性用两个下划线开头（后面会讲到）。")])])])]),t._v(" "),a("p",[t._v("当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。")]),t._v(" "),a("h2",{attrs:{id:"变量的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的使用"}},[t._v("#")]),t._v(" 变量的使用")]),t._v(" "),a("p",[t._v("下面通过几个例子来说明变量的类型和变量使用。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n使用变量保存数据并进行加减乘除运算\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("321")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 333")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 309")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3852")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 26.75")]),t._v("\n")])])]),a("p",[t._v("在Python中可以使用"),a("code",[t._v("type")]),t._v("函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n使用type()检查变量的类型\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5j")]),t._v("\nd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello, world'")]),t._v("\ne "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'int'>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'float'>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'complex'>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'str'>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# <class 'bool'>")]),t._v("\n")])])]),a("p",[t._v("可以使用Python中内置的函数对变量类型进行转换。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int()")]),t._v("：将一个数值或字符串转换成整数，可以指定进制。")]),t._v(" "),a("li",[a("code",[t._v("float()")]),t._v("：将一个字符串转换成浮点数。")]),t._v(" "),a("li",[a("code",[t._v("str()")]),t._v("：将指定的对象转换成字符串形式，可以指定编码。")]),t._v(" "),a("li",[a("code",[t._v("chr()")]),t._v("：将整数转换成该编码对应的字符串（一个字符）。")]),t._v(" "),a("li",[a("code",[t._v("ord()")]),t._v("：将字符串（一个字符）转换成对应的编码（整数）。")])]),t._v(" "),a("p",[t._v("下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n使用input()函数获取键盘输入(字符串)\n使用int()函数将输入的字符串转换成整数\n使用print()函数输出带占位符的字符串\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a = '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b = '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d + %d = %d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d - %d = %d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d * %d = %d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d / %d = %f'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d // %d = %d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d %% %d = %d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%d ** %d = %d'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明")]),t._v("：上面的print函数中输出的字符串使用了占位符语法，其中"),a("code",[t._v("%d")]),t._v("是整数的占位符，"),a("code",[t._v("%f")]),t._v("是小数的占位符，"),a("code",[t._v("%%")]),t._v("表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成"),a("code",[t._v("%%")]),t._v("），字符串之后的"),a("code",[t._v("%")]),t._v("后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。")])]),t._v(" "),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("p",[t._v("Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[]")]),t._v(" "),a("code",[t._v("[:]")])]),t._v(" "),a("td",[t._v("下标，切片")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("**")])]),t._v(" "),a("td",[t._v("指数")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("~")]),t._v(" "),a("code",[t._v("+")]),t._v(" "),a("code",[t._v("-")])]),t._v(" "),a("td",[t._v("按位取反, 正负号")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*")]),t._v(" "),a("code",[t._v("/")]),t._v(" "),a("code",[t._v("%")]),t._v(" "),a("code",[t._v("//")])]),t._v(" "),a("td",[t._v("乘，除，模，整除")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("+")]),t._v(" "),a("code",[t._v("-")])]),t._v(" "),a("td",[t._v("加，减")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">>")]),t._v(" "),a("code",[t._v("<<")])]),t._v(" "),a("td",[t._v("右移，左移")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("&")])]),t._v(" "),a("td",[t._v("按位与")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("^")]),t._v(" "),a("code",[t._v("\\|")])]),t._v(" "),a("td",[t._v("按位异或，按位或")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<=")]),t._v(" "),a("code",[t._v("<")]),t._v(" "),a("code",[t._v(">")]),t._v(" "),a("code",[t._v(">=")])]),t._v(" "),a("td",[t._v("小于等于，小于，大于，大于等于")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("==")]),t._v(" "),a("code",[t._v("!=")])]),t._v(" "),a("td",[t._v("等于，不等于")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("is")]),t._v(" "),a("code",[t._v("is not")])]),t._v(" "),a("td",[t._v("身份运算符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("in")]),t._v(" "),a("code",[t._v("not in")])]),t._v(" "),a("td",[t._v("成员运算符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("not")]),t._v(" "),a("code",[t._v("or")]),t._v(" "),a("code",[t._v("and")])]),t._v(" "),a("td",[t._v("逻辑运算符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("=")]),t._v(" "),a("code",[t._v("+=")]),t._v(" "),a("code",[t._v("-=")]),t._v(" "),a("code",[t._v("*=")]),t._v(" "),a("code",[t._v("/=")]),t._v(" "),a("code",[t._v("%=")]),t._v(" "),a("code",[t._v("//=")]),t._v(" "),a("code",[t._v("**=")]),t._v(" "),a("code",[t._v("&=")]),t._v(" "),a("code",[t._v("|=")]),t._v(" "),a("code",[t._v("^=")]),t._v(" "),a("code",[t._v(">>=")]),t._v(" "),a("code",[t._v("<<=")])]),t._v(" "),a("td",[t._v("（复合）赋值运算符")])])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明：")]),t._v(" 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。")])]),t._v(" "),a("h3",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),a("p",[t._v("赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n赋值运算符和复合赋值运算符\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相当于：a = a + b")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 相当于：a = a * (a + 2)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 算一下这里会输出什么")]),t._v("\n")])])]),a("h3",{attrs:{id:"比较运算符和逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符和逻辑运算符"}},[t._v("#")]),t._v(" 比较运算符和逻辑运算符")]),t._v(" "),a("p",[t._v("比较运算符有的地方也称为关系运算符，包括"),a("code",[t._v("==")]),t._v("、"),a("code",[t._v("!=")]),t._v("、"),a("code",[t._v("<")]),t._v("、"),a("code",[t._v(">")]),t._v("、"),a("code",[t._v("<=")]),t._v("、"),a("code",[t._v(">=")]),t._v("，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是"),a("code",[t._v("==")]),t._v("，请注意这个地方是两个等号，因为"),a("code",[t._v("=")]),t._v("是赋值运算符，我们在上面刚刚讲到过，"),a("code",[t._v("==")]),t._v("才是比较相等的比较运算符。比较运算符会产生布尔值，要么是"),a("code",[t._v("True")]),t._v("要么是"),a("code",[t._v("False")]),t._v("。")]),t._v(" "),a("p",[t._v("逻辑运算符有三个，分别是"),a("code",[t._v("and")]),t._v("、"),a("code",[t._v("or")]),t._v("和"),a("code",[t._v("not")]),t._v("。"),a("code",[t._v("and")]),t._v("字面意思是“而且”，所以"),a("code",[t._v("and")]),t._v("运算符会连接两个布尔值，如果两个布尔值都是"),a("code",[t._v("True")]),t._v("，那么运算的结果就是"),a("code",[t._v("True")]),t._v("；左右两边的布尔值有一个是"),a("code",[t._v("False")]),t._v("，最终的运算结果就是"),a("code",[t._v("False")]),t._v("。相信大家已经想到了，如果"),a("code",[t._v("and")]),t._v("左边的布尔值是"),a("code",[t._v("False")]),t._v("，不管右边的布尔值是什么，最终的结果都是"),a("code",[t._v("False")]),t._v("，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在"),a("code",[t._v("and")]),t._v("运算符左边为"),a("code",[t._v("False")]),t._v("的情况下，右边的表达式根本不会执行。"),a("code",[t._v("or")]),t._v("字面意思是“或者”，所以"),a("code",[t._v("or")]),t._v("运算符也会连接两个布尔值，如果两个布尔值有任意一个是"),a("code",[t._v("True")]),t._v("，那么最终的结果就是"),a("code",[t._v("True")]),t._v("。当然，"),a("code",[t._v("or")]),t._v("运算符也是有短路功能的，在它左边的布尔值为"),a("code",[t._v("True")]),t._v("的情况下，右边的表达式根本不会执行。"),a("code",[t._v("not")]),t._v("运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是"),a("code",[t._v("True")]),t._v("运算结果就是"),a("code",[t._v("False")]),t._v("，而后面的布尔值如果是"),a("code",[t._v("False")]),t._v("则运算结果就是"),a("code",[t._v("True")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n比较运算符和逻辑运算符的使用\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\nflag0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nflag1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nflag2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nflag3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flag1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" flag2\nflag4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flag1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" flag2\nflag5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag0 ='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag0 = True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag1 ='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag1 = True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag2 ='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag2 = False")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag3 ='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag3 = False")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag4 ='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag4 = True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flag5 ='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flag5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# flag5 = False")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明")]),t._v("：比较运算符的优先级高于赋值运算符，所以"),a("code",[t._v("flag0 = 1 == 1")]),t._v("先做"),a("code",[t._v("1 == 1")]),t._v("产生布尔值"),a("code",[t._v("True")]),t._v("，再将这个值赋值给变量"),a("code",[t._v("flag0")]),t._v("。"),a("code",[t._v("print")]),t._v("函数可以输出多个值，多个值之间可以用"),a("code",[t._v(",")]),t._v("进行分隔，输出的内容之间默认以空格分开。")])]),t._v(" "),a("h2",{attrs:{id:"练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),a("h3",{attrs:{id:"练习1-华氏温度转换为摄氏温度。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习1-华氏温度转换为摄氏温度。"}},[t._v("#")]),t._v(" 练习1：华氏温度转换为摄氏温度。")]),t._v(" "),a("blockquote",[a("p",[t._v("提示：华氏温度到摄氏温度的转换公式为："),a("mjx-container",{staticClass:"MathJax",staticStyle:{direction:"ltr"},attrs:{jax:"SVG"}},[a("svg",{staticStyle:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"18.877ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 8343.4 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D436",d:"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1037.8,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2093.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2482.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D439",d:"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3453.8,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(4454,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"}}),a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",transform:"translate(500,0)"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5454,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6065.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"F7",d:"M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(7065.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}}),a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"2E",d:"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z",transform:"translate(500,0)"}}),a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"38",d:"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z",transform:"translate(778,0)"}})])])])])]),t._v("。")],1)]),t._v(" "),a("p",[t._v("参考答案：")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n将华氏温度转换为摄氏温度\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入华氏温度: '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%.1f华氏度 = %.1f摄氏度'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明")]),t._v("：在使用"),a("code",[t._v("print")]),t._v("函数输出时，也可以对字符串内容进行格式化处理，上面"),a("code",[t._v("print")]),t._v("函数中的字符串"),a("code",[t._v("%1.f")]),t._v("是一个占位符，稍后会由一个"),a("code",[t._v("float")]),t._v("类型的变量值替换掉它。同理，如果字符串中有"),a("code",[t._v("%d")]),t._v("，后面可以用一个"),a("code",[t._v("int")]),t._v("类型的变量值替换掉它，而"),a("code",[t._v("%s")]),t._v("会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中"),a("code",[t._v("{f:.1f}")]),t._v("和"),a("code",[t._v("{c:.1f}")]),t._v("可以先看成是"),a("code",[t._v("{f}")]),t._v("和"),a("code",[t._v("{c}")]),t._v("，表示输出时会用变量"),a("code",[t._v("f")]),t._v("和变量"),a("code",[t._v("c")]),t._v("的值替换掉这两个占位符，后面的"),a("code",[t._v(":.1f")]),t._v("表示这是一个浮点数，小数点后保留1位有效数字。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token format-spec"}},[t._v(".1f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("华氏度 = ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token format-spec"}},[t._v(".1f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("摄氏度'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("h3",{attrs:{id:"练习2-输入圆的半径计算计算周长和面积。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习2-输入圆的半径计算计算周长和面积。"}},[t._v("#")]),t._v(" 练习2：输入圆的半径计算计算周长和面积。")]),t._v(" "),a("p",[t._v("参考答案：")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n输入半径计算圆的周长和面积\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\nradius "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入圆的半径: '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nperimeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1416")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius\narea "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1416")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'周长: %.2f'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" perimeter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'面积: %.2f'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" area"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"练习3-输入年份判断是不是闰年。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习3-输入年份判断是不是闰年。"}},[t._v("#")]),t._v(" 练习3：输入年份判断是不是闰年。")]),t._v(" "),a("p",[t._v("参考答案：")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n输入年份 如果是闰年输出True 否则输出False\n\nVersion: 0.1\nAuthor: 骆昊\n"""')]),t._v("\nyear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入年份: '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果代码太长写成一行不便于阅读 可以使用\\对代码进行折行")]),t._v("\nis_leap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" year "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" year "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" \\\n          year "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("is_leap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明")]),t._v("：比较运算符会产生布尔值，而逻辑运算符"),a("code",[t._v("and")]),t._v("和"),a("code",[t._v("or")]),t._v("会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出"),a("code",[t._v("True")]),t._v("，平年输出"),a("code",[t._v("False")]),t._v("。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);