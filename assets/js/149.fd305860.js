(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{586:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"使用正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式"}},[t._v("#")]),t._v(" 使用正则表达式")]),t._v(" "),a("h2",{attrs:{id:"正则表达式相关知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式相关知识"}},[t._v("#")]),t._v(" 正则表达式相关知识")]),t._v(" "),a("p",[t._v("在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。")]),t._v(" "),a("p",[t._v("我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。")]),t._v(" "),a("p",[t._v("关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫"),a("a",{attrs:{href:"https://deerchao.net/tutorials/regex/regex.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("《正则表达式30分钟入门教程》"),a("OutboundLink")],1),t._v("，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("解释")]),t._v(" "),a("th",[t._v("示例")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v(".")]),t._v(" "),a("td",[t._v("匹配任意字符")]),t._v(" "),a("td",[t._v("b.t")]),t._v(" "),a("td",[t._v("可以匹配bat / but / b#t / b1t等")])]),t._v(" "),a("tr",[a("td",[t._v("\\w")]),t._v(" "),a("td",[t._v("匹配字母/数字/下划线")]),t._v(" "),a("td",[t._v("b\\wt")]),t._v(" "),a("td",[t._v("可以匹配bat / b1t / b_t等"),a("br"),t._v("但不能匹配b#t")])]),t._v(" "),a("tr",[a("td",[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配空白字符（包括\\r、\\n、\\t等）")]),t._v(" "),a("td",[t._v("love\\syou")]),t._v(" "),a("td",[t._v("可以匹配love you")])]),t._v(" "),a("tr",[a("td",[t._v("\\d")]),t._v(" "),a("td",[t._v("匹配数字")]),t._v(" "),a("td",[t._v("\\d\\d")]),t._v(" "),a("td",[t._v("可以匹配01 / 23 / 99等")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v("匹配单词的边界")]),t._v(" "),a("td",[t._v("\\bThe\\b")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("匹配字符串的开始")]),t._v(" "),a("td",[t._v("^The")]),t._v(" "),a("td",[t._v("可以匹配The开头的字符串")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("匹配字符串的结束")]),t._v(" "),a("td",[t._v(".exe$")]),t._v(" "),a("td",[t._v("可以匹配.exe结尾的字符串")])]),t._v(" "),a("tr",[a("td",[t._v("\\W")]),t._v(" "),a("td",[t._v("匹配非字母/数字/下划线")]),t._v(" "),a("td",[t._v("b\\Wt")]),t._v(" "),a("td",[t._v("可以匹配b#t / b@t等"),a("br"),t._v("但不能匹配but / b1t / b_t等")])]),t._v(" "),a("tr",[a("td",[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配非空白字符")]),t._v(" "),a("td",[t._v("love\\Syou")]),t._v(" "),a("td",[t._v("可以匹配love#you等"),a("br"),t._v("但不能匹配love you")])]),t._v(" "),a("tr",[a("td",[t._v("\\D")]),t._v(" "),a("td",[t._v("匹配非数字")]),t._v(" "),a("td",[t._v("\\d\\D")]),t._v(" "),a("td",[t._v("可以匹配9a / 3# / 0F等")])]),t._v(" "),a("tr",[a("td",[t._v("\\B")]),t._v(" "),a("td",[t._v("匹配非单词边界")]),t._v(" "),a("td",[t._v("\\Bio\\B")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("[]")]),t._v(" "),a("td",[t._v("匹配来自字符集的任意单一字符")]),t._v(" "),a("td",[t._v("[aeiou]")]),t._v(" "),a("td",[t._v("可以匹配任一元音字母字符")])]),t._v(" "),a("tr",[a("td",[t._v("[^]")]),t._v(" "),a("td",[t._v("匹配不在字符集中的任意单一字符")]),t._v(" "),a("td",[t._v("[^aeiou]")]),t._v(" "),a("td",[t._v("可以匹配任一非元音字母字符")])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("匹配0次或多次")]),t._v(" "),a("td",[t._v("\\w*")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v("匹配1次或多次")]),t._v(" "),a("td",[t._v("\\w+")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v("匹配0次或1次")]),t._v(" "),a("td",[t._v("\\w?")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("{N}")]),t._v(" "),a("td",[t._v("匹配N次")]),t._v(" "),a("td",[t._v("\\w{3}")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("{M,}")]),t._v(" "),a("td",[t._v("匹配至少M次")]),t._v(" "),a("td",[t._v("\\w{3,}")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("{M,N}")]),t._v(" "),a("td",[t._v("匹配至少M次至多N次")]),t._v(" "),a("td",[t._v("\\w{3,6}")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("|")]),t._v(" "),a("td",[t._v("分支")]),t._v(" "),a("td",[t._v("foo|bar")]),t._v(" "),a("td",[t._v("可以匹配foo或者bar")])]),t._v(" "),a("tr",[a("td",[t._v("(?#)")]),t._v(" "),a("td",[t._v("注释")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("(exp)")]),t._v(" "),a("td",[t._v("匹配exp并捕获到自动命名的组中")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("(?<name>exp)")]),t._v(" "),a("td",[t._v("匹配exp并捕获到名为name的组中")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("(?:exp)")]),t._v(" "),a("td",[t._v("匹配exp但是不捕获匹配的文本")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("(?=exp)")]),t._v(" "),a("td",[t._v("匹配exp前面的位置")]),t._v(" "),a("td",[t._v("\\b\\w+(?=ing)")]),t._v(" "),a("td",[t._v("可以匹配I'm dancing中的danc")])]),t._v(" "),a("tr",[a("td",[t._v("(?<=exp)")]),t._v(" "),a("td",[t._v("匹配exp后面的位置")]),t._v(" "),a("td",[t._v("(?<=\\bdanc)\\w+\\b")]),t._v(" "),a("td",[t._v("可以匹配I love dancing and reading中的第一个ing")])]),t._v(" "),a("tr",[a("td",[t._v("(?!exp)")]),t._v(" "),a("td",[t._v("匹配后面不是exp的位置")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("(?<!exp)")]),t._v(" "),a("td",[t._v("匹配前面不是exp的位置")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("*?")]),t._v(" "),a("td",[t._v("重复任意次，但尽可能少重复")]),t._v(" "),a("td",[t._v("a.*b"),a("br"),t._v("a.*?b")]),t._v(" "),a("td",[t._v("将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串")])]),t._v(" "),a("tr",[a("td",[t._v("+?")]),t._v(" "),a("td",[t._v("重复1次或多次，但尽可能少重复")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("??")]),t._v(" "),a("td",[t._v("重复0次或1次，但尽可能少重复")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("{M,N}?")]),t._v(" "),a("td",[t._v("重复M到N次，但尽可能少重复")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("{M,}?")]),t._v(" "),a("td",[t._v("重复M次以上，但尽可能少重复")]),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明：")]),t._v(" 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\\进行转义处理，例如想匹配小数点可以写成\\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\\(和\\)，否则圆括号被视为正则表达式中的分组。")])]),t._v(" "),a("h2",{attrs:{id:"python对正则表达式的支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python对正则表达式的支持"}},[t._v("#")]),t._v(" Python对正则表达式的支持")]),t._v(" "),a("p",[t._v("Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("compile(pattern, flags=0)")]),t._v(" "),a("td",[t._v("编译正则表达式返回正则表达式对象")])]),t._v(" "),a("tr",[a("td",[t._v("match(pattern, string, flags=0)")]),t._v(" "),a("td",[t._v("用正则表达式匹配字符串 成功返回匹配对象 否则返回None")])]),t._v(" "),a("tr",[a("td",[t._v("search(pattern, string, flags=0)")]),t._v(" "),a("td",[t._v("搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None")])]),t._v(" "),a("tr",[a("td",[t._v("split(pattern, string, maxsplit=0, flags=0)")]),t._v(" "),a("td",[t._v("用正则表达式指定的模式分隔符拆分字符串 返回列表")])]),t._v(" "),a("tr",[a("td",[t._v("sub(pattern, repl, string, count=0, flags=0)")]),t._v(" "),a("td",[t._v("用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数")])]),t._v(" "),a("tr",[a("td",[t._v("fullmatch(pattern, string, flags=0)")]),t._v(" "),a("td",[t._v("match函数的完全匹配（从字符串开头到结尾）版本")])]),t._v(" "),a("tr",[a("td",[t._v("findall(pattern, string, flags=0)")]),t._v(" "),a("td",[t._v("查找字符串所有与正则表达式匹配的模式 返回字符串的列表")])]),t._v(" "),a("tr",[a("td",[t._v("finditer(pattern, string, flags=0)")]),t._v(" "),a("td",[t._v("查找字符串所有与正则表达式匹配的模式 返回一个迭代器")])]),t._v(" "),a("tr",[a("td",[t._v("purge()")]),t._v(" "),a("td",[t._v("清除隐式编译的正则表达式的缓存")])]),t._v(" "),a("tr",[a("td",[t._v("re.I / re.IGNORECASE")]),t._v(" "),a("td",[t._v("忽略大小写匹配标记")])]),t._v(" "),a("tr",[a("td",[t._v("re.M / re.MULTILINE")]),t._v(" "),a("td",[t._v("多行匹配标记")])])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("说明：")]),t._v(" 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。")])]),t._v(" "),a("p",[t._v("下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。")]),t._v(" "),a("h3",{attrs:{id:"例子1-验证输入用户名和qq号是否有效并给出对应的提示信息。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子1-验证输入用户名和qq号是否有效并给出对应的提示信息。"}},[t._v("#")]),t._v(" 例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n验证输入用户名和QQ号是否有效并给出对应的提示信息\n\n要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0\n"""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    username "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入用户名: '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    qq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入QQ号: '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# match函数的第一个参数是正则表达式字符串或正则表达式对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二个参数是要跟正则表达式做匹配的字符串对象")]),t._v("\n    m1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'^[0-9a-zA-Z_]{6,20}$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" m1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入有效的用户名.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    m2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'^[1-9]\\d{4,11}$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" m2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入有效的QQ号.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" m1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" m2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你输入的信息是有效的!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("提示：")]),t._v(" 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\\\，例如表示数字的\\d得书写成\\\\d，这样不仅写起来不方便，阅读的时候也会很吃力。")])]),t._v(" "),a("h3",{attrs:{id:"例子2-从一段文字中提取出国内手机号码。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子2-从一段文字中提取出国内手机号码。"}},[t._v("#")]),t._v(" 例子2：从一段文字中提取出国内手机号码。")]),t._v(" "),a("p",[t._v("下面这张图是截止到2017年底，国内三家运营商推出的手机号段。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/tel-start-number.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字")]),t._v("\n    pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'(?<=\\D)1[34578]\\d{9}(?=\\D)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    sentence "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，\n    不是15600998765，也是110或119，王大锤的手机号才是15600998765。\n    '''")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查找所有匹配并保存到一个列表中")]),t._v("\n    mylist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mylist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--------华丽的分隔线--------'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过迭代器取出匹配对象并获得匹配的内容")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("finditer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--------华丽的分隔线--------'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过search函数指定搜索位置找出所有匹配")]),t._v("\n    m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明：")]),t._v(" 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是："),a("code",[t._v("(?<=\\D)(1[38]\\d{9}|14[57]\\d{8}|15[0-35-9]\\d{8}|17[678]\\d{8})(?=\\D)")]),t._v("，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。")])]),t._v(" "),a("h3",{attrs:{id:"例子3-替换字符串中的不良内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子3-替换字符串中的不良内容"}},[t._v("#")]),t._v(" 例子3：替换字符串中的不良内容")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    sentence "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你丫是傻叉吗? 我操你大爷的. Fuck you.'")]),t._v("\n    purified "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sentence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IGNORECASE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("purified"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 你丫是*吗? 我*你大爷的. * you.")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("说明：")]),t._v(" re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用"),a("a",{attrs:{href:"http://www.runoob.com/python/python-operators.html#ysf5",target:"_blank",rel:"noopener noreferrer"}},[t._v("按位或运算符"),a("OutboundLink")],1),t._v("进行叠加，如"),a("code",[t._v("flags=re.I | re.M")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"例子4-拆分长字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子4-拆分长字符串"}},[t._v("#")]),t._v(" 例子4：拆分长字符串")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    poem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'")]),t._v("\n    sentence_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'[，。, .]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" poem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" sentence_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        sentence_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sentence_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"后话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后话"}},[t._v("#")]),t._v(" 后话")]),t._v(" "),a("p",[t._v("如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择"),a("a",{attrs:{href:"https://www.crummy.com/software/BeautifulSoup/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Beautiful Soup"),a("OutboundLink")],1),t._v("或"),a("a",{attrs:{href:"http://lxml.de/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lxml"),a("OutboundLink")],1),t._v("来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦，这些内容我们会在后期的爬虫专题中为大家介绍。")])])}),[],!1,null,null,null);s.default=r.exports}}]);