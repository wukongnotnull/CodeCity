(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{602:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"restful架构和drf进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restful架构和drf进阶"}},[t._v("#")]),t._v(" RESTful架构和DRF进阶")]),t._v(" "),a("p",[t._v("除了上一节讲到的方法，使用DRF创建REST风格的数据接口也可以通过CBV（基于类的视图）的方式。使用CBV创建数据接口的特点是代码简单，开发效率高，但是没有FBV（基于函数的视图）灵活，因为使用FBV的方式，数据接口对应的视图函数执行什么样的代码以及返回什么的数据是高度可定制的。下面我们以定制学科的数据接口为例，讲解通过CBV方式定制数据接口的具体做法。")]),t._v(" "),a("h2",{attrs:{id:"使用cbv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用cbv"}},[t._v("#")]),t._v(" 使用CBV")]),t._v(" "),a("h3",{attrs:{id:"继承apiview的子类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承apiview的子类"}},[t._v("#")]),t._v(" 继承APIView的子类")]),t._v(" "),a("p",[t._v("修改之前项目中的"),a("code",[t._v("polls/views.py")]),t._v("，去掉"),a("code",[t._v("show_subjects")]),t._v("视图函数，添加一个名为"),a("code",[t._v("SubjectView")]),t._v("的类，该类继承自"),a("code",[t._v("ListAPIView")]),t._v("，"),a("code",[t._v("ListAPIView")]),t._v("能接收GET请求，它封装了获取数据列表并返回JSON数据的"),a("code",[t._v("get")]),t._v("方法。"),a("code",[t._v("ListAPIView")]),t._v("是"),a("code",[t._v("APIView")]),t._v(" 的子类，"),a("code",[t._v("APIView")]),t._v("还有很多的子类，例如"),a("code",[t._v("CreateAPIView")]),t._v("可以支持POST请求，"),a("code",[t._v("UpdateAPIView")]),t._v("可以支持PUT和PATCH请求，"),a("code",[t._v("DestoryAPIView")]),t._v("可以支持DELETE请求。"),a("code",[t._v("SubjectView")]),t._v(" 的代码如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" rest_framework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("generics "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ListAPIView\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubjectView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListAPIView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过queryset指定如何获取学科数据")]),t._v("\n    queryset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过serializer_class指定如何序列化学科数据")]),t._v("\n    serializer_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SubjectSerializer\n")])])]),a("p",[t._v("刚才说过，由于"),a("code",[t._v("SubjectView")]),t._v("的父类"),a("code",[t._v("ListAPIView")]),t._v("已经实现了"),a("code",[t._v("get")]),t._v("方法来处理获取学科列表的GET请求，所以我们只需要声明如何获取学科数据以及如何序列化学科数据，前者用"),a("code",[t._v("queryset")]),t._v("属性指定，后者用"),a("code",[t._v("serializer_class")]),t._v("属性指定。要使用上面的"),a("code",[t._v("SubjectView")]),t._v("，需要修改"),a("code",[t._v("urls.py")]),t._v("文件，如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("urlpatterns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'api/subjects/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SubjectView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("as_view"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("很显然，上面的做法较之之前讲到的FBV要简单很多。")]),t._v(" "),a("h3",{attrs:{id:"继承modelviewset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承modelviewset"}},[t._v("#")]),t._v(" 继承ModelViewSet")]),t._v(" "),a("p",[t._v("如果学科对应的数据接口需要支持GET、POST、PUT、PATCH、DELETE请求来支持对学科资源的获取、新增、更新、删除操作，更为简单的做法是继承"),a("code",[t._v("ModelViewSet")]),t._v("来编写学科视图类。再次修改"),a("code",[t._v("polls/views.py")]),t._v("文件，去掉"),a("code",[t._v("SubjectView")]),t._v("类，添加一个名为"),a("code",[t._v("SubjectViewSet")]),t._v("的类，代码如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" rest_framework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("viewsets "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ModelViewSet\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubjectViewSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ModelViewSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    queryset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    serializer_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SubjectSerializer\n")])])]),a("p",[t._v("通过查看"),a("code",[t._v("ModelViewSet")]),t._v("类的源代码可以发现，该类共有6个父类，其中前5个父类分别实现对POST（新增学科）、GET（获取指定学科）、PUT/PATCH（更新学科）、DELETE（删除学科）和GET（获取学科列表）操作的支持，对应的方法分别是"),a("code",[t._v("create")]),t._v("、"),a("code",[t._v("retrieve")]),t._v("、"),a("code",[t._v("update")]),t._v("、"),a("code",[t._v("destroy")]),t._v("和"),a("code",[t._v("list")]),t._v("。由于"),a("code",[t._v("ModelViewSet")]),t._v("的父类中已经实现了这些方法，所以我们几乎没有编写任何代码就完成了学科数据全套接口的开发，我们要做的仅仅是指出如何获取到数据（通过"),a("code",[t._v("queryset")]),t._v("属性指定）以及如何序列化数据（通过"),a("code",[t._v("serializer_class")]),t._v("属性指定），这一点跟上面继承"),a("code",[t._v("APIView")]),t._v("的子类做法是一致的。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelViewSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mixins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CreateModelMixin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   mixins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RetrieveModelMixin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   mixins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UpdateModelMixin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   mixins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DestroyModelMixin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   mixins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ListModelMixin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   GenericViewSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n    A viewset that provides default `create()`, `retrieve()`, `update()`,\n    `partial_update()`, `destroy()` and `list()` actions.\n    """')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])]),a("p",[t._v("要使用上面的"),a("code",[t._v("SubjectViewSet")]),t._v("，需要在"),a("code",[t._v("urls.py")]),t._v("文件中进行URL映射。由于"),a("code",[t._v("ModelViewSet")]),t._v("相当于是多个视图函数的汇总，所以不同于之前映射URL的方式，我们需要先创建一个路由器并通过它注册"),a("code",[t._v("SubjectViewSet")]),t._v("，然后将注册成功后生成的URL一并添加到"),a("code",[t._v("urlspattern")]),t._v("列表中，代码如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" rest_framework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("routers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" DefaultRouter\n\nrouter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DefaultRouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("register"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'api/subjects'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SubjectViewSet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nurlpatterns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("urls\n")])])]),a("p",[t._v("除了"),a("code",[t._v("ModelViewSet")]),t._v("类外，DRF还提供了一个名为"),a("code",[t._v("ReadOnlyModelViewSet")]),t._v(" 的类，从名字上就可以看出，该类是只读视图的集合，也就意味着，继承该类定制的数据接口只能支持GET请求，也就是获取单个资源和资源列表的请求。")]),t._v(" "),a("h2",{attrs:{id:"数据分页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据分页"}},[t._v("#")]),t._v(" 数据分页")]),t._v(" "),a("p",[t._v("在使用GET请求获取资源列表时，我们通常不会一次性的加载所有的数据，除非数据量真的很小。大多数获取资源列表的操作都支持数据分页展示，也就说我们可以通过指定页码（或类似于页码的标识）和页面大小（一次加载多少条数据）来获取不同的数据。我们可以通过对"),a("code",[t._v("QuerySet")]),t._v("对象的切片操作来实现分页，也可以利用Django框架封装的"),a("code",[t._v("Paginator")]),t._v("和"),a("code",[t._v("Page")]),t._v("对象来实现分页。使用DRF时，可以在Django配置文件中修改"),a("code",[t._v("REST_FRAMEWORK")]),t._v("并配置默认的分页类和页面大小来实现分页，如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("REST_FRAMEWORK "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PAGE_SIZE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DEFAULT_PAGINATION_CLASS'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rest_framework.pagination.PageNumberPagination'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("除了上面配置的"),a("code",[t._v("PageNumberPagination")]),t._v("分页器之外，DRF还提供了"),a("code",[t._v("LimitOffsetPagination")]),t._v("和"),a("code",[t._v("CursorPagination")]),t._v("分页器，值得一提的是"),a("code",[t._v("CursorPagination")]),t._v("，它可以避免使用页码分页时暴露网站的数据体量，有兴趣的读者可以自行了解。如果不希望使用配置文件中默认的分页设定，可以在视图类中添加一个"),a("code",[t._v("pagination_class")]),t._v("属性来重新指定分页器，通常可以将该属性指定为自定义的分页器，如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" rest_framework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pagination "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PageNumberPagination\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomizedPagination")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PageNumberPagination"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认页面大小")]),t._v("\n    page_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 页面大小对应的查询参数")]),t._v("\n    page_size_query_param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'size'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 页面大小的最大值")]),t._v("\n    max_page_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\n")])])]),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubjectView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListAPIView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定如何获取数据")]),t._v("\n    queryset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定如何序列化数据")]),t._v("\n    serializer_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SubjectSerializer\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定如何分页")]),t._v("\n    pagination_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CustomizedPagination\n")])])]),a("p",[t._v("如果不希望数据分页，可以将"),a("code",[t._v("pagination_class")]),t._v("属性设置为"),a("code",[t._v("None")]),t._v("来取消默认的分页器。")]),t._v(" "),a("h2",{attrs:{id:"数据筛选"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据筛选"}},[t._v("#")]),t._v(" 数据筛选")]),t._v(" "),a("p",[t._v("如果希望使用CBV定制获取老师信息的数据接口，也可以通过继承"),a("code",[t._v("ListAPIView")]),t._v("来实现。但是因为要通过指定的学科来获取对应的老师信息，因此需要对老师数据进行筛选而不是直接获取所有老师的数据。如果想从请求中获取学科编号并通过学科编号对老师进行筛选，可以通过重写"),a("code",[t._v("get_queryset")]),t._v("方法来做到，代码如下所示。")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeacherView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListAPIView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    serializer_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TeacherSerializer\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_queryset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        queryset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Teacher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'subject'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            sno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sno'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            queryset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queryset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subject__no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" queryset\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" ValueError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" Http404"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'No teachers found.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("除了上述方式之外，还可以使用三方库"),a("code",[t._v("django-filter")]),t._v("来配合DRF实现对数据的筛选，使用"),a("code",[t._v("django-filter")]),t._v("后，可以通过为视图类配置"),a("code",[t._v("filter-backends")]),t._v("属性并指定使用"),a("code",[t._v("DjangoFilterBackend")]),t._v("来支持数据筛选。在完成上述配置后，可以使用"),a("code",[t._v("filter_fields")]),t._v(" 属性或"),a("code",[t._v("filterset_class")]),t._v("属性来指定如何筛选数据，有兴趣的读者可以自行研究。")])])}),[],!1,null,null,null);s.default=n.exports}}]);