(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{622:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"pandas的应用-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pandas的应用-3"}},[t._v("#")]),t._v(" Pandas的应用-3")]),t._v(" "),s("h2",{attrs:{id:"dataframe的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dataframe的应用"}},[t._v("#")]),t._v(" DataFrame的应用")]),t._v(" "),s("h3",{attrs:{id:"数据清洗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据清洗"}},[t._v("#")]),t._v(" 数据清洗")]),t._v(" "),s("p",[t._v("通常，我们从 Excel、CSV 或数据库中获取到的数据并不是非常完美的，里面可能因为系统或人为的原因混入了重复值或异常值，也可能在某些字段上存在缺失值；再者，"),s("code",[t._v("DataFrame")]),t._v("中的数据也可能存在格式不统一、量纲不统一等各种问题。因此，在开始数据分析之前，对数据进行清洗就显得特别重要。")]),t._v(" "),s("h4",{attrs:{id:"缺失值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺失值"}},[t._v("#")]),t._v(" 缺失值")]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("DataFrame")]),t._v("对象的"),s("code",[t._v("isnull")]),t._v("或"),s("code",[t._v("isna")]),t._v("方法来找出数据表中的缺失值，如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isnull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isna"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        ename   job\t    mgr     sal     comm    dno\neno\t\t\t\t\t\t\n1359\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\n2056\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\n3088\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\n3211\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n3233\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n3244\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n3251\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n3344\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\n3577\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n3588\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n4466\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n5234\tFalse\tFalse\tFalse\tFalse\tTrue\tFalse\n5566\tFalse\tFalse\tFalse\tFalse\tFalse\tFalse\n7800\tFalse\tFalse\tTrue\tFalse\tFalse\tFalse\n")])])]),s("p",[t._v("相对应的，"),s("code",[t._v("notnull")]),t._v("和"),s("code",[t._v("notna")]),t._v("方法可以将非空的值标记为"),s("code",[t._v("True")]),t._v("。如果想删除这些缺失值，可以使用"),s("code",[t._v("DataFrame")]),t._v("对象的"),s("code",[t._v("dropna")]),t._v("方法，该方法的"),s("code",[t._v("axis")]),t._v("参数可以指定沿着0轴还是1轴删除，也就是说当遇到空值时，是删除整行还是删除整列，默认是沿0轴进行删除的，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dropna"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        ename   job      mgr\t sal    comm     dno\neno\t\t\t\t\t\t\n1359\t胡一刀  销售员\t3344.0\t1800   200.0\t30\n2056\t乔峰    架构师\t 7800.0\t 5000\t1500.0\t 20\n3088\t李莫愁  设计师\t2056.0\t3500   800.0\t20\n3344\t黄蓉    销售主管\t7800.0\t3000   800.0\t30\n5566\t宋远桥  会计师\t7800.0\t4000   1000.0\t10\n")])])]),s("p",[t._v("如果要沿着1轴进行删除，可以使用下面的代码。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dropna"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("axis"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        ename    job      sal    dno\neno\t\t\t\t\n1359\t胡一刀   销售员    1800\t30\n2056\t乔峰     架构师\t  5000\t 20\n3088\t李莫愁   设计师    3500\t20\n3211\t张无忌   程序员    3200\t20\n3233\t丘处机   程序员    3400\t20\n3244\t欧阳锋   程序员    3200\t20\n3251\t张翠山   程序员    4000\t20\n3344\t黄蓉     销售主管  3000\t30\n3577\t杨过     会计\t   2200\t  10\n3588\t朱九真   会计\t  2500\t 10\n4466\t苗人凤   销售员\t 2500   30\n5234\t郭靖     出纳      2000   10\n5566\t宋远桥   会计师    4000   10\n7800\t张三丰   总裁      9000   20\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("注意")]),t._v("："),s("code",[t._v("DataFrame")]),t._v("对象的很多方法都有一个名为"),s("code",[t._v("inplace")]),t._v("的参数，该参数的默认值为"),s("code",[t._v("False")]),t._v("，表示我们的操作不会修改原来的"),s("code",[t._v("DataFrame")]),t._v("对象，而是将处理后的结果通过一个新的"),s("code",[t._v("DataFrame")]),t._v("对象返回。如果将该参数的值设置为"),s("code",[t._v("True")]),t._v("，那么我们的操作就会在原来的"),s("code",[t._v("DataFrame")]),t._v("上面直接修改，方法的返回值为"),s("code",[t._v("None")]),t._v("。简单的说，上面的操作并没有修改"),s("code",[t._v("emp_df")]),t._v("，而是返回了一个新的"),s("code",[t._v("DataFrame")]),t._v("对象。")])]),t._v(" "),s("p",[t._v("在某些特定的场景下，我们可以对空值进行填充，对应的方法是"),s("code",[t._v("fillna")]),t._v("，填充空值时可以使用指定的值（通过"),s("code",[t._v("value")]),t._v("参数进行指定），也可以用表格中前一个单元格（通过设置参数"),s("code",[t._v("method=ffill")]),t._v("）或后一个单元格（通过设置参数"),s("code",[t._v("method=bfill")]),t._v("）的值进行填充，当代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fillna"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("注意")]),t._v("：填充的值如何选择也是一个值得探讨的话题，实际工作中，可能会使用某种统计量（如：均值、众数等）进行填充，或者使用某种插值法（如：随机插值法、拉格朗日插值法等）进行填充，甚至有可能通过回归模型、贝叶斯模型等对缺失数据进行填充。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        ename    job        mgr      sal     comm    dno\neno\n1359\t胡一刀    销售员\t   3344.0\t1800\t200.0\t30\n2056\t乔峰\t    分析师\t    7800.0\t 5000\t 1500.0\t 20\n3088\t李莫愁\t   设计师\t   2056.0\t3500\t800.0\t20\n3211\t张无忌\t   程序员\t   2056.0\t3200\t0.0     20\n3233\t丘处机\t   程序员\t   2056.0\t3400\t0.0\t    20\n3244\t欧阳锋\t   程序员\t   3088.0\t3200\t0.0     20\n3251\t张翠山\t   程序员\t   2056.0\t4000\t0.0\t    20\n3344\t黄蓉\t    销售主管   7800.0\t3000\t800.0\t30\n3577\t杨过\t    会计\t     5566.0\t  2200\t  0.0\t  10\n3588\t朱九真\t   会计\t    5566.0\t 2500\t 0.0\t 10\n4466\t苗人凤\t   销售员\t   3344.0\t2500\t0.0\t    30\n5234\t郭靖\t    出纳\t     5566.0\t  2000\t  0.0\t  10\n5566\t宋远桥\t   会计师\t   7800.0\t4000\t1000.0\t10\n7800\t张三丰\t   总裁\t    0.0      9000\t 1200.0\t 20\n")])])]),s("h4",{attrs:{id:"重复值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复值"}},[t._v("#")]),t._v(" 重复值")]),t._v(" "),s("p",[t._v("接下来，我们先给之前的部门表添加两行数据，让部门表中名为“研发部”和“销售部”的部门各有两个。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("dept_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dname'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'研发部'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dloc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'上海'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ndept_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dname'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售部'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dloc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'长沙'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ndept_df\n")])])]),s("p",[t._v("输出:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    dname  dloc\ndno\t\t\n10\t会计部\t北京\n20\t研发部\t成都\n30\t销售部\t重庆\n40\t运维部\t天津\n50\t研发部\t上海\n60\t销售部\t长沙\n")])])]),s("p",[t._v("现在，我们的数据表中有重复数据了，我们可以通过"),s("code",[t._v("DataFrame")]),t._v("对象的"),s("code",[t._v("duplicated")]),t._v("方法判断是否存在重复值，该方法在不指定参数时默认判断行索引是否重复，我们也可以指定根据部门名称"),s("code",[t._v("dname")]),t._v("判断部门是否重复，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("dept_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("duplicated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dname'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dno\n10    False\n20    False\n30    False\n40    False\n50     True\n60     True\ndtype: bool\n")])])]),s("p",[t._v("从上面的输出可以看到，"),s("code",[t._v("50")]),t._v("和"),s("code",[t._v("60")]),t._v("两个部门从部门名称上来看是重复的，如果要删除重复值，可以使用"),s("code",[t._v("drop_duplicates")]),t._v("方法，该方法的"),s("code",[t._v("keep")]),t._v("参数可以控制在遇到重复值时，保留第一项还是保留最后一项，或者多个重复项一个都不用保留，全部删除掉。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("dept_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drop_duplicates"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dname'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\tdname\tdloc\ndno\t\t\n10\t会计部\t北京\n20\t研发部\t成都\n30\t销售部\t重庆\n40\t运维部\t天津\n")])])]),s("p",[t._v("将"),s("code",[t._v("keep")]),t._v("参数的值修改为"),s("code",[t._v("last")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("dept_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drop_duplicates"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dname'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keep"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'last'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\tdname\tdloc\ndno\t\t\n10\t会计部\t北京\n40\t运维部\t天津\n50\t研发部\t上海\n60\t销售部\t长沙\n")])])]),s("h4",{attrs:{id:"异常值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常值"}},[t._v("#")]),t._v(" 异常值")]),t._v(" "),s("p",[t._v("异常值在统计学上的全称是疑似异常值，也称作离群点（outlier），异常值的分析也称作离群点分析。异常值是指样本中出现的“极端值”，数据值看起来异常大或异常小，其分布明显偏离其余的观测值。实际工作中，有些异常值可能是由系统或人为原因造成的，但有些异常值却不是，它们能够重复且稳定的出现，属于正常的极端值，例如很多游戏产品中头部玩家的数据往往都是离群的极端值。所以，我们既不能忽视异常值的存在，也不能简单地把异常值从数据分析中剔除。重视异常值的出现，分析其产生的原因，常常成为发现问题进而改进决策的契机。")]),t._v(" "),s("p",[t._v("异常值的检测有Z-score 方法、IQR 方法、DBScan 聚类、孤立森林等，这里我们对前两种方法做一个简单的介绍。")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/wuKongNotNull/images-hosting/wukong-website/20211004192858.png"}}),t._v(" "),s("p",[t._v("如果数据服从正态分布，依据3σ法则，异常值被定义与平均值的偏差超过三倍标准差的值。在正态分布下，距离平均值3σ之外的值出现的概率为$ P(|x-\\mu|>3\\sigma)<0.003 $，属于小概率事件。如果数据不服从正态分布，那么可以用远离平均值的多少倍的标准差来描述，这里的倍数就是Z-score。Z-score以标准差为单位去度量某一原始分数偏离平均值的距离，公式如下所示。")]),t._v(" "),s("mjx-container",{staticClass:"MathJax",staticStyle:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0"},attrs:{jax:"SVG",display:"true"}},[s("svg",{staticStyle:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-1.577ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"11.122ex",height:"4.652ex",role:"img",focusable:"false",viewBox:"0 -1359 4916 2056"}},[s("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"}},[s("g",{attrs:{"data-mml-node":"math"}},[s("g",{attrs:{"data-mml-node":"mi"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D467",d:"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"}})]),s("g",{attrs:{"data-mml-node":"mo",transform:"translate(742.8,0)"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),s("g",{attrs:{"data-mml-node":"mfrac",transform:"translate(1798.6,0)"}},[s("g",{attrs:{"data-mml-node":"mrow",transform:"translate(220,676)"}},[s("g",{attrs:{"data-mml-node":"mi"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D44B",d:"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"}})]),s("g",{attrs:{"data-mml-node":"mo",transform:"translate(1074.2,0)"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),s("g",{attrs:{"data-mml-node":"mi",transform:"translate(2074.4,0)"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D707",d:"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"}})])]),s("g",{attrs:{"data-mml-node":"mi",transform:"translate(1273.2,-686)"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D70E",d:"M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"}})]),s("rect",{attrs:{width:"2877.4",height:"60",x:"120",y:"220"}})])])])])]),s("p",[t._v("Z-score需要根据经验和实际情况来决定，通常把远离标准差"),s("code",[t._v("3")]),t._v("倍距离以上的数据点视为离群点，下面的代给出了如何通过Z-score方法检测异常值。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("detect_outliers_zscore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" threshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    avg_value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    std_value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    z_score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" avg_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" std_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("z_score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("IQR 方法中的IQR（Inter-Quartile Range）代表四分位距离，即上四分位数（Q3）和下四分位数（Q1）的差值。通常情况下，可以认为小于 $ Q1 - 1.5 \\times IQR $ 或大于 $ Q3 + 1.5 \\times IQR $ 的就是异常值，而这种检测异常值的方法也是箱线图（后面会讲到）默认使用的方法。下面的代给出了如何通过 IQR 方法检测异常值。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("detect_outliers_iqr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" whis"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    q1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quantile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.75")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    iqr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" q1\n    lower"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" upper "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" whis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" iqr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" whis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" iqr\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lower"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" upper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("如果要删除异常值，可以使用"),s("code",[t._v("DataFrame")]),t._v("对象的"),s("code",[t._v("drop")]),t._v("方法，该方法可以根据行索引或列索引删除指定的行或列。例如我们认为月薪低于"),s("code",[t._v("2000")]),t._v("或高于"),s("code",[t._v("8000")]),t._v("的是员工表中的异常值，可以用下面的代码删除对应的记录。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果要替换掉异常值，可以通过给单元格赋值的方式来实现，也可以使用"),s("code",[t._v("replace")]),t._v("方法将指定的值替换掉。例如我们要将月薪为"),s("code",[t._v("1800")]),t._v("和"),s("code",[t._v("9000")]),t._v("的替换为月薪的平均值，补贴为"),s("code",[t._v("800")]),t._v("的替换为"),s("code",[t._v("1000")]),t._v("，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("avg_sal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("astype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nemp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("replace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sal'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'comm'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sal'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" avg_sal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'comm'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"预处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预处理"}},[t._v("#")]),t._v(" 预处理")]),t._v(" "),s("p",[t._v("对数据进行预处理也是一个很大的话题，它包含了对数据的拆解、变换、归约、离散化等操作。我们先来看看数据的拆解。如果数据表中的数据是一个时间日期，我们通常都需要从年、季度、月、日、星期、小时、分钟等维度对其进行拆解，如果时间日期是用字符串表示的，可以先通过"),s("code",[t._v("pandas")]),t._v("的"),s("code",[t._v("to_datetime")]),t._v("函数将其处理成时间日期。")]),t._v(" "),s("p",[t._v("在下面的例子中，我们先读取 Excel 文件，获取到一组销售数据，其中第一列就是销售日期，我们将其拆解为“月份”、“季度”和“星期”，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("sales_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_excel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2020年销售数据.xlsx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    usecols"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售日期'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售区域'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售渠道'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'品牌'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售额'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码：e7b4。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1945 entries, 0 to 1944\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   销售日期    1945 non-null   datetime64[ns]\n 1   销售区域    1945 non-null   object        \n 2   销售渠道    1945 non-null   object        \n 3   品牌        1945 non-null   object        \n 4   销售额      1945 non-null   int64         \ndtypes: datetime64[ns](1), int64(1), object(3)\nmemory usage: 76.1+ KB\n")])])]),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("sales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'月份'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售日期'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("month\nsales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'季度'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售日期'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("quarter\nsales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'星期'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sales_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'销售日期'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weekday\nsales_df\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\t    销售日期\t 销售区域\t销售渠道\t品牌\t  销售额\t月份\t季度\t星期\n0\t    2020-01-01\t上海\t     拼多多\t 八匹马   8217\t    1\t 1\t   2\n1\t    2020-01-01\t上海\t     抖音\t      八匹马\t6351\t 1\t  1\t    2\n2\t    2020-01-01\t上海\t     天猫\t      八匹马\t14365\t 1\t  1\t    2\n3\t    2020-01-01\t上海\t     天猫       八匹马\t2366\t 1\t  1     2\n4\t    2020-01-01\t上海\t     天猫 \t  皮皮虾\t15189\t 1\t  1     2\n...     ...         ...        ...       ...      ...     ...  ...   ...\n1940    2020-12-30\t北京\t     京东\t      花花姑娘 6994     12\t 4\t   2\n1941    2020-12-30\t福建\t     实体\t      八匹马\t7663\t 12\t  4\t    2\n1942    2020-12-31\t福建\t     实体\t      花花姑娘 14795    12\t 4\t   3\n1943    2020-12-31\t福建\t     抖音\t      八匹马\t3481\t 12\t  4\t    3\n1944    2020-12-31\t福建\t     天猫\t      八匹马\t2673\t 12\t  4\t    3\n")])])]),s("p",[t._v("在上面的代码中，通过日期时间类型的"),s("code",[t._v("Series")]),t._v("对象的"),s("code",[t._v("dt")]),t._v(" 属性，获得一个访问日期时间的对象，通过该对象的"),s("code",[t._v("year")]),t._v("、"),s("code",[t._v("month")]),t._v("、"),s("code",[t._v("quarter")]),t._v("、"),s("code",[t._v("hour")]),t._v("等属性，就可以获取到年、月、季度、小时等时间信息，获取到的仍然是一个"),s("code",[t._v("Series")]),t._v("对象，它包含了一组时间信息，所以我们通常也将这个"),s("code",[t._v("dt")]),t._v("属性称为“日期时间向量”。")]),t._v(" "),s("p",[t._v("我们再来说一说字符串类型的数据的处理，我们先从指定的 Excel 文件中读取某招聘网站的招聘数据。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("jobs_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_csv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'某招聘网站招聘数据.csv'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    usecols"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'city'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'companyFullName'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'positionName'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salary'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码：e7b4。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3140 entries, 0 to 3139\nData columns (total 4 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   city             3140 non-null   object\n 1   companyFullName  3140 non-null   object\n 2   positionName     3140 non-null   object\n 3   salary           3140 non-null   object\ndtypes: object(4)\nmemory usage: 98.2+ KB\n")])])]),s("p",[t._v("查看前"),s("code",[t._v("5")]),t._v("条数据。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("jobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    city    companyFullName              positionName    salary\n0   北京\t  达疆网络科技（上海）有限公司    数据分析岗       15k-30k\n1   北京\t  北京音娱时光科技有限公司        数据分析        10k-18k\n2   北京\t  北京千喜鹤餐饮管理有限公司\t     数据分析        20k-30k\n3   北京\t  吉林省海生电子商务有限公司\t     数据分析        33k-50k\n4   北京\t  韦博网讯科技（北京）有限公司\t数据分析        10k-15k\n")])])]),s("p",[t._v("上面的数据表一共有"),s("code",[t._v("3140")]),t._v("条数据，但并非所有的职位都是“数据分析”的岗位，如果要筛选出数据分析的岗位，可以通过检查"),s("code",[t._v("positionName")]),t._v("字段是否包含“数据分析”这个关键词，这里需要模糊匹配，应该如何实现呢？我们可以先获取"),s("code",[t._v("positionName")]),t._v("列，因为这个"),s("code",[t._v("Series")]),t._v("对象的"),s("code",[t._v("dtype")]),t._v("是字符串，所以可以通过"),s("code",[t._v("str")]),t._v("属性获取对应的字符串向量，然后就可以利用我们熟悉的字符串的方法来对其进行操作，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("jobs_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("jobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("positionName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contains"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'数据分析'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\njobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shape\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(1515, 4)\n")])])]),s("p",[t._v("可以看出，筛选后的数据还有"),s("code",[t._v("1515")]),t._v("条。接下来，我们还需要对"),s("code",[t._v("salary")]),t._v("字段进行处理，如果我们希望统计所有岗位的平均工资或每个城市的平均工资，首先需要将用范围表示的工资处理成其中间值，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("jobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("extract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'(\\d+)[kK]?-(\\d+)[kK]?'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("：上面的代码通过正则表达式捕获组从字符串中抽取出两组数字，分别对应工资的下限和上限，对正则表达式不熟悉的读者，可以阅读我的知乎专栏“从零开始学Python”中的"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/158929767",target:"_blank",rel:"noopener noreferrer"}},[t._v("《正则表达式的应用》"),s("outboundlink")],1),t._v("一文。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("        0     1\n0\t    15    30\n1\t    10\t  18\n2       20    30\n3       33    50\n4       10    15\n...     ...   ...\n3065    8     10\n3069    6     10\n3070    2     4\n3071    6     12\n3088    8     12\n")])])]),s("p",[t._v("需要提醒大家的是，抽取出来的两列数据都是字符串类型的值，我们需要将其转换成"),s("code",[t._v("int")]),t._v("类型，才能计算平均值，对应的方法是"),s("code",[t._v("DataFrame")]),t._v("对象的"),s("code",[t._v("applymap")]),t._v("方法，该方法的参数是一个函数，而该函数会作用于"),s("code",[t._v("DataFrame")]),t._v("中的每个元素。完成这一步之后，我们就可以使用"),s("code",[t._v("apply")]),t._v("方法将上面的"),s("code",[t._v("DataFrame")]),t._v("处理成中间值，"),s("code",[t._v("apply")]),t._v("方法的参数也是一个函数，可以通过指定"),s("code",[t._v("axis")]),t._v("参数使其作用于"),s("code",[t._v("DataFrame")]),t._v(" 对象的行或列，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("temp_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("extract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'(\\d+)[kK]?-(\\d+)[kK]?'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("applymap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntemp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" axis"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0       22.5\n1       14.0\n2       25.0\n3       41.5\n4       12.5\n        ... \n3065    9.0\n3069    8.0\n3070    3.0\n3071    9.0\n3088    10.0\nLength: 1515, dtype: float64\n")])])]),s("p",[t._v("接下来，我们可以用上面的结果替换掉原来的"),s("code",[t._v("salary")]),t._v("列或者增加一个新的列来表示职位对应的工资，完整的代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("temp_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("extract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'(\\d+)[kK]?-(\\d+)[kK]?'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("applymap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'salary'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" axis"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\njobs_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    city    companyFullName              positionName    salary\n0   北京\t  达疆网络科技（上海）有限公司    数据分析岗       22.5\n1   北京\t  北京音娱时光科技有限公司        数据分析        14.0\n2   北京\t  北京千喜鹤餐饮管理有限公司\t     数据分析        25.0\n3   北京\t  吉林省海生电子商务有限公司\t     数据分析        41.5\n4   北京\t  韦博网讯科技（北京）有限公司\t数据分析        12.5\n")])])]),s("p",[s("code",[t._v("applymap")]),t._v("和"),s("code",[t._v("apply")]),t._v("两个方法在数据预处理的时候经常用到，"),s("code",[t._v("Series")]),t._v("对象也有"),s("code",[t._v("apply")]),t._v("方法，也是用于数据的预处理，但是"),s("code",[t._v("DataFrame")]),t._v("对象还有一个名为"),s("code",[t._v("transform")]),t._v(" 的方法，也是通过传入的函数对数据进行变换，类似"),s("code",[t._v("Series")]),t._v("对象的"),s("code",[t._v("map")]),t._v("方法。需要强调的是，"),s("code",[t._v("apply")]),t._v("方法具有归约效果的，简单的说就是能将较多的数据处理成较少的数据或一条数据；而"),s("code",[t._v("transform")]),t._v("方法没有归约效果，只能对数据进行变换，原来有多少条数据，处理后还是有多少条数据。")]),t._v(" "),s("p",[t._v("如果要对数据进行深度的分析和挖掘，字符串、日期时间这样的非数值类型都需要处理成数值，因为非数值类型没有办法计算相关性，也没有办法进行"),s("mjx-container",{staticClass:"MathJax",staticStyle:{direction:"ltr"},attrs:{jax:"SVG"}},[s("svg",{staticStyle:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.462ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.404ex",height:"2.348ex",role:"img",focusable:"false",viewBox:"0 -833.9 1062.6 1037.9"}},[s("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"}},[s("g",{attrs:{"data-mml-node":"math"}},[s("g",{attrs:{"data-mml-node":"msup"}},[s("g",{attrs:{"data-mml-node":"mi"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D712",d:"M576 -125Q576 -147 547 -175T487 -204H476Q394 -204 363 -157Q334 -114 293 26L284 59Q283 58 248 19T170 -66T92 -151T53 -191Q49 -194 43 -194Q36 -194 31 -189T25 -177T38 -154T151 -30L272 102L265 131Q189 405 135 405Q104 405 87 358Q86 351 68 351Q48 351 48 361Q48 369 56 386T89 423T148 442Q224 442 258 400Q276 375 297 320T330 222L341 180Q344 180 455 303T573 429Q579 431 582 431Q600 431 600 414Q600 407 587 392T477 270Q356 138 353 134L362 102Q392 -10 428 -89T490 -168Q504 -168 517 -156T536 -126Q539 -116 543 -115T557 -114T571 -115Q576 -118 576 -125Z"}})]),s("g",{attrs:{"data-mml-node":"mn",transform:"translate(659,363) scale(0.707)"}},[s("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})])])])])])]),t._v("检验等操作。对于字符串类型，通常可以其分为以下三类，再进行对应的处理。")],1),t._v(" "),s("ol",[s("li",[t._v("有序变量（Ordinal Variable）：字符串表示的数据有顺序关系，那么可以对字符串进行序号化处理。")]),t._v(" "),s("li",[t._v("分类变量（Categorical Variable）/ 名义变量（Nominal Variable）：字符串表示的数据没有大小关系和等级之分，那么就可以使用独热编码的方式处理成哑变量（虚拟变量）矩阵。")]),t._v(" "),s("li",[t._v("定距变量（Scale Variable）：字符串本质上对应到一个有大小高低之分的数据，而且可以进行加减运算，那么只需要将字符串处理成对应的数值即可。")])]),t._v(" "),s("p",[t._v("对于第1类和第3类，我们可以用上面提到的"),s("code",[t._v("apply")]),t._v("或"),s("code",[t._v("transform")]),t._v("方法来处理，也可以利用"),s("code",[t._v("scikit-learn")]),t._v("中的"),s("code",[t._v("OrdinalEncoder")]),t._v("处理第1类字符串，这个我们在后续的课程中会讲到。对于第2类字符串，可以使用"),s("code",[t._v("pandas")]),t._v("的"),s("code",[t._v("get_dummies()")]),t._v("函数来生成哑变量（虚拟变量）矩阵，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("persons_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'姓名'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'关羽'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张飞'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'赵云'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'马超'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'黄忠'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'职业'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'医生'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'医生'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'程序员'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'画家'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'教师'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'学历'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'研究生'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'大专'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'研究生'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'高中'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'本科'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npersons_df\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\t姓名\t职业\t学历\n0\t关羽\t医生\t研究生\n1\t张飞\t医生\t大专\n2\t赵云\t程序员\t研究生\n3\t马超\t画家\t高中\n4\t黄忠\t教师\t本科\n")])])]),s("p",[t._v("将职业处理成哑变量矩阵。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_dummies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("persons_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'职业'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    医生 教师  画家  程序员\n0\t1    0    0    0\n1\t1    0    0    0\n2\t0    0    0    1\n3\t0    0    1    0\n4\t0    1    0    0\n")])])]),s("p",[t._v("将学历处理成大小不同的值。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle_education")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    edu_dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'高中'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'大专'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'本科'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'研究生'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" edu_dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\npersons_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'学历'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle_education"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0    10\n1     3\n2    10\n3     1\n4     5\nName: 学历, dtype: int64\n")])])]),s("p",[t._v("我们再来说说数据离散化。离散化也叫分箱，如果变量的取值是连续值，那么它的取值有无数种可能，在进行数据分组的时候就会非常的不方便，这个时候将连续变量离散化就显得非常重要。之所以把离散化叫做分箱，是因为我们可以预先设置一些箱子，每个箱子代表了数据取值的范围，这样就可以将连续的值分配到不同的箱子中，从而实现离散化。下面的例子读取了2018年北京积分落户数据，我们可以根据落户积分对数据进行分组，具体的做法如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("luohu_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_csv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data/2018年北京积分落户数据.csv'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index_col"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nluohu_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("describe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("count    6019.000000\nmean       95.654552\nstd         4.354445\nmin        90.750000\n25%        92.330000\n50%        94.460000\n75%        97.750000\nmax       122.590000\nName: score, dtype: float64\n")])])]),s("p",[t._v("可以看出，落户积分的最大值是"),s("code",[t._v("122.59")]),t._v("，最小值是"),s("code",[t._v("90.75")]),t._v("，那么我们可以构造一个从"),s("code",[t._v("90")]),t._v("分到"),s("code",[t._v("125")]),t._v("分，每"),s("code",[t._v("5")]),t._v("分一组的"),s("code",[t._v("7")]),t._v("个箱子，"),s("code",[t._v("pandas")]),t._v("的"),s("code",[t._v("cut")]),t._v("函数可以帮助我们首先数据分箱，代码如下所示。")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("bins "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arange"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("126")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("luohu_df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("说明")]),t._v("："),s("code",[t._v("cut")]),t._v("函数的"),s("code",[t._v("right")]),t._v("参数默认值为"),s("code",[t._v("True")]),t._v("，表示箱子左开右闭；修改为"),s("code",[t._v("False")]),t._v("可以让箱子的右边界为开区间，左边界为闭区间，大家看看下面的输出就明白了。")])]),t._v(" "),s("p",[t._v("输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("id\n1       [120, 125)\n2       [120, 125)\n3       [115, 120)\n4       [115, 120)\n5       [115, 120)\n           ...    \n6015      [90, 95)\n6016      [90, 95)\n6017      [90, 95)\n6018      [90, 95)\n6019      [90, 95)\nName: score, Length: 6019, dtype: category\nCategories (7, interval[int64, left]): [[90, 95) < [95, 100) < [100, 105) < [105, 110) < [110, 115) < [115, 120) < [120, 125)]\n")])])]),s("p",[t._v("我们可以根据分箱的结果对数据进行分组，然后使用聚合函数对每个组进行统计，这是数据分析中经常用到的操作，下一个章节会为大家介绍。除此之外，"),s("code",[t._v("pandas")]),t._v("还提供了一个名为"),s("code",[t._v("qcut")]),t._v("的函数，可以指定分位数对数据进行分箱，有兴趣的读者可以自行研究。")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);