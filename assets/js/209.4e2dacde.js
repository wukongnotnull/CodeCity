(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{647:function(a,v,e){"use strict";e.r(v);var t=e(25),r=Object(t.a)({},(function(){var a=this,v=a.$createElement,e=a._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"入门篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#入门篇"}},[a._v("#")]),a._v(" 入门篇")]),a._v(" "),e("h2",{attrs:{id:"导论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导论"}},[a._v("#")]),a._v(" 导论")]),a._v(" "),e("h3",{attrs:{id:"什么是-javascript-语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-javascript-语言"}},[a._v("#")]),a._v(" 什么是 JavaScript 语言？")]),a._v(" "),e("p",[a._v("JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。")]),a._v(" "),e("p",[a._v("JavaScript 也是一种嵌入式（embedded）语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。")]),a._v(" "),e("p",[a._v("目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。")]),a._v(" "),e("p",[a._v("从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式（比如函数式编程）。这导致几乎任何一个问题，JavaScript 都有多种解决方法。阅读本书的过程中，你会诧异于 JavaScript 语法的灵活性。")]),a._v(" "),e("p",[a._v("JavaScript 的核心语法部分相当精简，只包括两个部分：基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如"),e("code",[a._v("Array")]),a._v("、"),e("code",[a._v("Date")]),a._v("、"),e("code",[a._v("Math")]),a._v("等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。")]),a._v(" "),e("ul",[e("li",[a._v("浏览器控制类：操作浏览器")]),a._v(" "),e("li",[a._v("DOM 类：操作网页的各种元素")]),a._v(" "),e("li",[a._v("Web 类：实现互联网的各种功能")])]),a._v(" "),e("p",[a._v("如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API等等。这些你都可以在 Node 环境中找到。")]),a._v(" "),e("p",[a._v("本书主要介绍 JavaScript 核心语法和浏览器网页开发的基本知识，不涉及 Node。全书可以分成以下四大部分。")]),a._v(" "),e("ul",[e("li",[a._v("基本语法")]),a._v(" "),e("li",[a._v("标准库")]),a._v(" "),e("li",[a._v("浏览器 API")]),a._v(" "),e("li",[a._v("DOM")])]),a._v(" "),e("p",[a._v("JavaScript 语言有多个版本。本书的内容主要基于 ECMAScript 5.1 版本，这是学习 JavaScript 语法的基础。ES6 和更新的语法请参考我写的"),e("a",{attrs:{href:"https://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("《ECMAScript 6入门》"),e("OutboundLink")],1),a._v("。")]),a._v(" "),e("h3",{attrs:{id:"为什么学习-javascript"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么学习-javascript"}},[a._v("#")]),a._v(" 为什么学习 JavaScript？")]),a._v(" "),e("p",[a._v("JavaScript 语言有一些显著特点，使得它非常值得学习。它既适合作为学习编程的入门语言，也适合当作日常开发的工作语言。它是目前最有希望、前途最光明的计算机语言之一。")]),a._v(" "),e("h4",{attrs:{id:"操控浏览器的能力"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操控浏览器的能力"}},[a._v("#")]),a._v(" 操控浏览器的能力")]),a._v(" "),e("p",[a._v("JavaScript 的发明目的，就是作为浏览器的内置脚本语言，为网页开发者提供操控浏览器的能力。它是目前唯一一种通用的浏览器脚本语言，所有浏览器都支持。它可以让网页呈现各种特殊效果，为用户提供良好的互动体验。")]),a._v(" "),e("p",[a._v("目前，全世界几乎所有网页都使用 JavaScript。如果不用，网站的易用性和使用效率将大打折扣，无法成为操作便利、对用户友好的网站。")]),a._v(" "),e("p",[a._v("对于一个互联网开发者来说，如果你想提供漂亮的网页、令用户满意的上网体验、各种基于浏览器的便捷功能、前后端之间紧密高效的联系，JavaScript 是必不可少的工具。")]),a._v(" "),e("h4",{attrs:{id:"广泛的使用领域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#广泛的使用领域"}},[a._v("#")]),a._v(" 广泛的使用领域")]),a._v(" "),e("p",[a._v("近年来，JavaScript 的使用范围，慢慢超越了浏览器，正在向通用的系统语言发展。")]),a._v(" "),e("p",[e("strong",[a._v("（1）浏览器的平台化")])]),a._v(" "),e("p",[a._v("随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等。这使得 JavaScript 可以完成许多以前无法想象的事情。")]),a._v(" "),e("p",[e("strong",[a._v("（2）Node")])]),a._v(" "),e("p",[a._v("Node 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台（Raspberry Pi）能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。")]),a._v(" "),e("p",[e("strong",[a._v("（3）数据库操作")])]),a._v(" "),e("p",[a._v("JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON（JavaScript Object Notation）格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。")]),a._v(" "),e("p",[e("strong",[a._v("（4）移动平台开发")])]),a._v(" "),e("p",[a._v("JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。")]),a._v(" "),e("p",[a._v("PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能。")]),a._v(" "),e("p",[a._v("Mozilla 基金会的手机操作系统 Firefox OS，更是直接将 JavaScript 作为操作系统的平台语言，但是很可惜这个项目没有成功。")]),a._v(" "),e("p",[e("strong",[a._v("（5）内嵌脚本语言")])]),a._v(" "),e("p",[a._v("越来越多的应用程序，将 JavaScript 作为内嵌的脚本语言，比如 Adobe 公司的著名 PDF 阅读器 Acrobat、Linux 桌面环境 GNOME 3。")]),a._v(" "),e("p",[e("strong",[a._v("（6）跨平台的桌面应用程序")])]),a._v(" "),e("p",[a._v("Chromium OS、Windows 8 等操作系统直接支持 JavaScript 编写应用程序。Mozilla 的 Open Web Apps 项目、Google 的 "),e("a",{attrs:{href:"https://developer.chrome.com/apps/about_apps",target:"_blank",rel:"noopener noreferrer"}},[a._v("Chrome App 项目"),e("OutboundLink")],1),a._v("、GitHub 的 "),e("a",{attrs:{href:"https://electron.atom.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Electron 项目"),e("OutboundLink")],1),a._v("、以及 "),e("a",{attrs:{href:"http://tidesdk.multipart.net/docs/user-dev/generated/",target:"_blank",rel:"noopener noreferrer"}},[a._v("TideSDK 项目"),e("OutboundLink")],1),a._v("，都可以用来编写运行于 Windows、Mac OS 和 Android 等多个桌面平台的程序，不依赖浏览器。")]),a._v(" "),e("p",[e("strong",[a._v("（7）小结")])]),a._v(" "),e("p",[a._v("可以预期，JavaScript 最终将能让你只用一种语言，就开发出适应不同平台（包括桌面端、服务器端、手机端）的程序。早在2013年9月的"),e("a",{attrs:{href:"http://adambard.com/blog/top-github-languages-for-2013-so-far/",target:"_blank",rel:"noopener noreferrer"}},[a._v("统计"),e("OutboundLink")],1),a._v("之中，JavaScript 就是当年 GitHub 上使用量排名第一的语言。")]),a._v(" "),e("p",[a._v("著名程序员 Jeff Atwood 甚至提出了一条 "),e("a",{attrs:{href:"http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("“Atwood 定律”"),e("OutboundLink")],1),a._v("：")]),a._v(" "),e("blockquote",[e("p",[a._v("“所有可以用 JavaScript 编写的程序，最终都会出现 JavaScript 的版本。”(Any application that can be written in JavaScript will eventually be written in JavaScript.)")])]),a._v(" "),e("h4",{attrs:{id:"易学性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#易学性"}},[a._v("#")]),a._v(" 易学性")]),a._v(" "),e("p",[a._v("相比学习其他语言，学习 JavaScript 有一些有利条件。")]),a._v(" "),e("p",[e("strong",[a._v("（1）学习环境无处不在")])]),a._v(" "),e("p",[a._v("只要有浏览器，就能运行 JavaScript 程序；只要有文本编辑器，就能编写 JavaScript 程序。这意味着，几乎所有电脑都原生提供 JavaScript 学习环境，不用另行安装复杂的 IDE（集成开发环境）和编译器。")]),a._v(" "),e("p",[e("strong",[a._v("（2）简单性")])]),a._v(" "),e("p",[a._v("相比其他脚本语言（比如 Python 或 Ruby），JavaScript 的语法相对简单一些，本身的语法特性并不是特别多。而且，那些语法中的复杂部分，也不是必需要学会。你完全可以只用简单命令，完成大部分的操作。")]),a._v(" "),e("p",[e("strong",[a._v("（3）与主流语言的相似性")])]),a._v(" "),e("p",[a._v("JavaScript 的语法很类似 C/C++ 和 Java，如果学过这些语言（事实上大多数学校都教），JavaScript 的入门会非常容易。")]),a._v(" "),e("p",[a._v("必须说明的是，虽然核心语法不难，但是 JavaScript 的复杂性体现在另外两个方面。")]),a._v(" "),e("p",[a._v("首先，它涉及大量的外部 API。JavaScript 要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。")]),a._v(" "),e("p",[a._v("其次，JavaScript 语言有一些设计缺陷。某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习 JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。Douglas Crockford 写过一本有名的书，名字就叫"),e("a",{attrs:{href:"http://javascript.crockford.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("《JavaScript: The Good Parts》"),e("OutboundLink")],1),a._v("，言下之意就是这门语言不好的地方很多，必须写一本书才能讲清楚。另外一些程序员则感到，为了更合理地编写 JavaScript 程序，就不能用 JavaScript 来写，而必须发明新的语言，比如 CoffeeScript、TypeScript、Dart 这些新语言的发明目的，多多少少都有这个因素。")]),a._v(" "),e("p",[a._v("尽管如此，目前看来，JavaScript 的地位还是无法动摇。加之，语言标准的快速进化，使得 JavaScript 功能日益增强，而语法缺陷和怪异之处得到了弥补。所以，JavaScript 还是值得学习，况且它的入门真的不难。")]),a._v(" "),e("h4",{attrs:{id:"强大的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强大的性能"}},[a._v("#")]),a._v(" 强大的性能")]),a._v(" "),e("p",[a._v("JavaScript 的性能优势体现在以下方面。")]),a._v(" "),e("p",[e("strong",[a._v("（1）灵活的语法，表达力强。")])]),a._v(" "),e("p",[a._v("JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。")]),a._v(" "),e("p",[a._v("JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。")]),a._v(" "),e("p",[a._v("JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性。")]),a._v(" "),e("p",[e("strong",[a._v("（2）支持编译运行。")])]),a._v(" "),e("p",[a._v("JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。")]),a._v(" "),e("p",[a._v("此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言（主要是 C 和 C++）通过编译成 WebAssembly，就可以在浏览器里面运行。")]),a._v(" "),e("p",[e("strong",[a._v("（3）事件驱动和非阻塞式设计。")])]),a._v(" "),e("p",[a._v("JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。")]),a._v(" "),e("h4",{attrs:{id:"开放性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开放性"}},[a._v("#")]),a._v(" 开放性")]),a._v(" "),e("p",[a._v("JavaScript 是一种开放的语言。它的标准 ECMA-262 是 ISO 国际标准，写得非常详尽明确；该标准的主要实现（比如 V8 和 SpiderMonkey 引擎）都是开放的，而且质量很高。这保证了这门语言不属于任何公司或个人，不存在版权和专利的问题。")]),a._v(" "),e("p",[a._v("语言标准由 TC39 委员会负责制定，该委员会的运作是透明的，所有讨论都是开放的，会议记录都会对外公布。")]),a._v(" "),e("p",[a._v("不同公司的 JavaScript 运行环境，兼容性很好，程序不做调整或只做很小的调整，就能在所有浏览器上运行。")]),a._v(" "),e("h4",{attrs:{id:"社区支持和就业机会"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#社区支持和就业机会"}},[a._v("#")]),a._v(" 社区支持和就业机会")]),a._v(" "),e("p",[a._v("全世界程序员都在使用 JavaScript，它有着极大的社区、广泛的文献和图书、丰富的代码资源。绝大部分你需要用到的功能，都有多个开源函数库可供选用。")]),a._v(" "),e("p",[a._v("作为项目负责人，你不难招聘到数量众多的 JavaScript 程序员；作为开发者，你也不难找到一份 JavaScript 的工作。")]),a._v(" "),e("h3",{attrs:{id:"实验环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实验环境"}},[a._v("#")]),a._v(" 实验环境")]),a._v(" "),e("p",[a._v("本教程包含大量的示例代码，只要电脑安装了浏览器，就可以用来实验了。读者可以一边读一边运行示例，加深理解。")]),a._v(" "),e("p",[a._v("推荐安装 Chrome 浏览器，它的“开发者工具”（Developer Tools）里面的“控制台”（console），就是运行 JavaScript 代码的理想环境。")]),a._v(" "),e("p",[a._v("进入 Chrome 浏览器的“控制台”，有两种方法。")]),a._v(" "),e("ul",[e("li",[a._v("直接进入：按下"),e("code",[a._v("Option + Command + J")]),a._v("（Mac）或者"),e("code",[a._v("Ctrl + Shift + J")]),a._v("（Windows / Linux）")]),a._v(" "),e("li",[a._v("开发者工具进入：开发者工具的快捷键是 F12，或者"),e("code",[a._v("Option + Command + I")]),a._v("（Mac）以及"),e("code",[a._v("Ctrl + Shift + I")]),a._v("（Windows / Linux），然后选择 Console 面板")])]),a._v(" "),e("p",[a._v("进入控制台以后，就可以在提示符后输入代码，然后按"),e("code",[a._v("Enter")]),a._v("键，代码就会执行。如果按"),e("code",[a._v("Shift + Enter")]),a._v("键，就是代码换行，不会触发执行。建议阅读本教程时，将代码复制到控制台进行实验。")]),a._v(" "),e("p",[a._v("作为尝试，你可以将下面的程序复制到“控制台”，按下回车后，就可以看到运行结果。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function greetMe(yourName) {\n  console.log('Hello ' + yourName);\n}\n\ngreetMe('World')\n// Hello World\n")])])]),e("h2",{attrs:{id:"历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史"}},[a._v("#")]),a._v(" 历史")]),a._v(" "),e("h3",{attrs:{id:"诞生"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#诞生"}},[a._v("#")]),a._v(" 诞生")]),a._v(" "),e("p",[a._v("JavaScript 因为互联网而生，紧跟着浏览器的出现而问世。回顾它的历史，就要从浏览器的历史讲起。")]),a._v(" "),e("p",[a._v("1990年底，欧洲核能研究组织（CERN）科学家 Tim Berners-Lee，在全世界最大的电脑网络——互联网的基础上，发明了万维网（World Wide Web），从此可以在网上浏览网页文件。最早的网页只能在操作系统的终端里浏览，也就是说只能使用命令行操作，网页都是在字符窗口中显示，这当然非常不方便。")]),a._v(" "),e("p",[a._v("1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。")]),a._v(" "),e("p",[a._v("1994年10月，NCSA 的一个主要程序员 Marc Andreessen 联合风险投资家 Jim Clark，成立了 Mosaic 通信公司（Mosaic Communications），不久后改名为 Netscape。这家公司的方向，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。")]),a._v(" "),e("p",[a._v("1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。")]),a._v(" "),e("p",[a._v("Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。")]),a._v(" "),e("p",[a._v("管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习和部署。那一年，正逢 Sun 公司的 Java 语言问世，市场推广活动非常成功。Netscape 公司决定与 Sun 公司合作，浏览器支持嵌入 Java 小程序（后来称为 Java applet）。但是，浏览器脚本语言是否就选用 Java，则存在争论。后来，还是决定不使用 Java，因为网页小程序不需要 Java 这么“重”的语法。但是，同时也决定脚本语言的语法要接近 Java，并且可以支持 Java 程序。这些设想直接排除了使用现存语言，比如 Perl、Python 和 TCL。")]),a._v(" "),e("p",[a._v("1995年，Netscape 公司雇佣了程序员 Brendan Eich 开发这种网页脚本语言。Brendan Eich 有很强的函数式编程背景，希望以 Scheme 语言（函数式语言鼻祖 LISP 语言的一种方言）为蓝本，实现这种新语言。")]),a._v(" "),e("p",[a._v("1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。")]),a._v(" "),e("ul",[e("li",[a._v("基本语法：借鉴 C 语言和 Java 语言。")]),a._v(" "),e("li",[a._v("数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。")]),a._v(" "),e("li",[a._v("函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。")]),a._v(" "),e("li",[a._v("原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。")]),a._v(" "),e("li",[a._v("正则表达式：借鉴 Perl 语言。")]),a._v(" "),e("li",[a._v("字符串和数组处理：借鉴 Python 语言。")])]),a._v(" "),e("p",[a._v("为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。这种功能的不足，直接导致了后来 JavaScript 的一个显著特点：对于其他语言，你需要学习语言的各种功能，而对于 JavaScript，你常常需要学习各种解决问题的模式。而且由于来源多样，从一开始就注定，JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。")]),a._v(" "),e("p",[a._v("Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为 LiveScript。12月，Netscape 公司与 Sun 公司（Java 语言的发明者和所有者）达成协议，后者允许将这种语言叫做 JavaScript。这样一来，Netscape 公司可以借助 Java 语言的声势，而 Sun 公司则将自己的影响力扩展到了浏览器。")]),a._v(" "),e("p",[a._v("之所以起这个名字，并不是因为 JavaScript 本身与 Java 语言有多么深的关系（事实上，两者关系并不深，详见下节），而是因为 Netscape 公司已经决定，使用 Java 语言开发网络应用程序，JavaScript 可以像胶水一样，将各个部分连接起来。当然，后来的历史是 Java 语言的浏览器插件失败了，JavaScript 反而发扬光大。")]),a._v(" "),e("p",[a._v("1995年12月4日，Netscape 公司与 Sun 公司联合发布了 JavaScript 语言，对外宣传 JavaScript 是 Java 的补充，属于轻量级的 Java，专门用来操作网页。")]),a._v(" "),e("p",[a._v("1996年3月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言。")]),a._v(" "),e("h3",{attrs:{id:"javascript-与-java-的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-与-java-的关系"}},[a._v("#")]),a._v(" JavaScript 与 Java 的关系")]),a._v(" "),e("p",[a._v("这里专门说一下 JavaScript 和 Java 的关系。它们是两种不一样的语言，但是彼此存在联系。")]),a._v(" "),e("p",[a._v("JavaScript 的基本语法和对象体系，是模仿 Java 而设计的。但是，JavaScript 没有采用 Java 的静态类型。正是因为 JavaScript 与 Java 有很大的相似性，所以这门语言才从一开始的 LiveScript 改名为 JavaScript。基本上，JavaScript 这个名字的原意是“很像Java的脚本语言”。")]),a._v(" "),e("p",[a._v("JavaScript 语言的函数是一种独立的数据类型，以及采用基于原型对象（prototype）的继承链。这是它与 Java 语法最大的两点区别。JavaScript 语法要比 Java 自由得多。")]),a._v(" "),e("p",[a._v("另外，Java 语言需要编译，而 JavaScript 语言则是运行时由解释器直接执行。")]),a._v(" "),e("p",[a._v("总之，JavaScript 的原始设计目标是一种小型的、简单的动态语言，与 Java 有足够的相似性，使得使用者（尤其是 Java 程序员）可以快速上手。")]),a._v(" "),e("h3",{attrs:{id:"javascript-与-ecmascript-的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-与-ecmascript-的关系"}},[a._v("#")]),a._v(" JavaScript 与 ECMAScript 的关系")]),a._v(" "),e("p",[a._v("1996年8月，微软模仿 JavaScript 开发了一种相近的语言，取名为JScript（JavaScript 是 Netscape 的注册商标，微软不能用），首先内置于IE 3.0。Netscape 公司面临丧失浏览器脚本语言的主导权的局面。")]),a._v(" "),e("p",[a._v("1996年11月，Netscape 公司决定将 JavaScript 提交给国际标准化组织 ECMA（European Computer Manufacturers Association），希望 JavaScript 能够成为国际标准，以此抵抗微软。ECMA 的39号技术委员会（Technical Committee 39）负责制定和审核这个标准，成员由业内的大公司派出的工程师组成，目前共25个人。该委员会定期开会，所有的邮件讨论和会议记录，都是公开的。")]),a._v(" "),e("p",[a._v("1997年7月，ECMA 组织发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。这个版本就是 ECMAScript 1.0 版。之所以不叫 JavaScript，一方面是由于商标的关系，Java 是 Sun 公司的商标，根据一份授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 已经被 Netscape 公司注册为商标，另一方面也是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。")]),a._v(" "),e("p",[a._v("ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C组织（World Wide Web Consortium）制定的。")]),a._v(" "),e("p",[a._v("ECMA-262 标准后来也被另一个国际标准化组织 ISO（International Organization for Standardization）批准，标准号是 ISO-16262。")]),a._v(" "),e("h3",{attrs:{id:"javascript-的版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的版本"}},[a._v("#")]),a._v(" JavaScript 的版本")]),a._v(" "),e("p",[a._v("1997年7月，ECMAScript 1.0发布。")]),a._v(" "),e("p",[a._v("1998年6月，ECMAScript 2.0版发布。")]),a._v(" "),e("p",[a._v("1999年12月，ECMAScript 3.0版发布，成为 JavaScript 的通行标准，得到了广泛支持。")]),a._v(" "),e("p",[a._v("2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。")]),a._v(" "),e("p",[a._v("2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA 开会决定，中止 ECMAScript 4.0 的开发（即废除了这个版本），将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。")]),a._v(" "),e("p",[a._v("2009年12月，ECMAScript 5.0版 正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 的总体考虑是，ECMAScript 5 与 ECMAScript 3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是ECMAScript 6。第六版发布以后，将指 ECMAScript 7。TC39 预计，ECMAScript 5 会在2013年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。")]),a._v(" "),e("p",[a._v("2011年6月，ECMAScript 5.1版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了2012年底，所有主要浏览器都支持 ECMAScript 5.1版的全部功能。")]),a._v(" "),e("p",[a._v("2013年3月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。")]),a._v(" "),e("p",[a._v("2013年12月，ECMAScript 6 草案发布。然后是12个月的讨论期，听取各方反馈。")]),a._v(" "),e("p",[a._v("2015年6月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在2016年发布，称为“ECMAScript 2016”，2017年发布“ECMAScript 2017”，以此类推。")]),a._v(" "),e("h3",{attrs:{id:"周边大事记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#周边大事记"}},[a._v("#")]),a._v(" 周边大事记")]),a._v(" "),e("p",[a._v("JavaScript 伴随着互联网的发展一起发展。互联网周边技术的快速发展，刺激和推动了 JavaScript 语言的发展。下面，回顾一下 JavaScript 的周边应用发展。")]),a._v(" "),e("p",[a._v("1996年，样式表标准 CSS 第一版发布。")]),a._v(" "),e("p",[a._v("1997年，DHTML（Dynamic HTML，动态 HTML）发布，允许动态改变网页内容。这标志着 DOM 模式（Document Object Model，文档对象模型）正式应用。")]),a._v(" "),e("p",[a._v("1998年，Netscape 公司开源了浏览器，这导致了 Mozilla 项目的诞生。几个月后，美国在线（AOL）宣布并购 Netscape。")]),a._v(" "),e("p",[a._v("1999年，IE 5部署了 XMLHttpRequest 接口，允许 JavaScript 发出 HTTP 请求，为后来大行其道的 Ajax 应用创造了条件。")]),a._v(" "),e("p",[a._v("2000年，KDE 项目重写了浏览器引擎 KHTML，为后来的 WebKit 和 Blink 引擎打下基础。这一年的10月23日，KDE 2.0发布，第一次将 KHTML 浏览器包括其中。")]),a._v(" "),e("p",[a._v("2001年，微软公司时隔5年之后，发布了 IE 浏览器的下一个版本 Internet Explorer 6。这是当时最先进的浏览器，它后来统治了浏览器市场多年。")]),a._v(" "),e("p",[a._v("2001年，Douglas Crockford 提出了 JSON 格式，用于取代 XML 格式，进行服务器和网页之间的数据交换。JavaScript 可以原生支持这种格式，不需要额外部署代码。")]),a._v(" "),e("p",[a._v("2002年，Mozilla 项目发布了它的浏览器的第一版，后来起名为 Firefox。")]),a._v(" "),e("p",[a._v("2003年，苹果公司发布了 Safari 浏览器的第一版。")]),a._v(" "),e("p",[a._v("2004年，Google 公司发布了 Gmail，促成了互联网应用程序（Web Application）这个概念的诞生。由于 Gmail 是在4月1日发布的，很多人起初以为这只是一个玩笑。")]),a._v(" "),e("p",[a._v("2004年，Dojo 框架诞生，为不同浏览器提供了同一接口，并为主要功能提供了便利的调用方法。这标志着 JavaScript 编程框架的时代开始来临。")]),a._v(" "),e("p",[a._v("2004年，WHATWG 组织成立，致力于加速 HTML 语言的标准化进程。")]),a._v(" "),e("p",[a._v("2005年，苹果公司在 KHTML 引擎基础上，建立了 WebKit 引擎。")]),a._v(" "),e("p",[a._v("2005年，Ajax 方法（Asynchronous JavaScript and XML）正式诞生，Jesse James Garrett 发明了这个词汇。它开始流行的标志是，2月份发布的 Google Maps 项目大量采用该方法。它几乎成了新一代网站的标准做法，促成了 Web 2.0时代的来临。")]),a._v(" "),e("p",[a._v("2005年，Apache 基金会发布了 CouchDB 数据库。这是一个基于 JSON 格式的数据库，可以用 JavaScript 函数定义视图和索引。它在本质上有别于传统的关系型数据库，标识着 NoSQL 类型的数据库诞生。")]),a._v(" "),e("p",[a._v("2006年，jQuery 函数库诞生，作者为John Resig。jQuery 为操作网页 DOM 结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让 JavaScript 语言的应用难度大大降低，推动了这种语言的流行。")]),a._v(" "),e("p",[a._v("2006年，微软公司发布 IE 7，标志重新开始启动浏览器的开发。")]),a._v(" "),e("p",[a._v("2006年，Google推出 Google Web Toolkit 项目（缩写为 GWT），提供 Java 编译成 JavaScript 的功能，开创了将其他语言转为 JavaScript 的先河。")]),a._v(" "),e("p",[a._v("2007年，Webkit 引擎在 iPhone 手机中得到部署。它最初基于 KDE 项目，2003年苹果公司首先采用，2005年开源。这标志着 JavaScript 语言开始能在手机中使用了，意味着有可能写出在桌面电脑和手机中都能使用的程序。")]),a._v(" "),e("p",[a._v("2007年，Douglas Crockford 发表了名为《JavaScript: The good parts》的演讲，次年由 O'Reilly 出版社出版。这标志着软件行业开始严肃对待 JavaScript 语言，对它的语法开始重新认识。")]),a._v(" "),e("p",[a._v("2008年，V8 编译器诞生。这是 Google 公司为 Chrome 浏览器而开发的，它的特点是让 JavaScript 的运行变得非常快。它提高了 JavaScript 的性能，推动了语法的改进和标准化，改变外界对 JavaScript 的不佳印象。同时，V8 是开源的，任何人想要一种快速的嵌入式脚本语言，都可以采用 V8，这拓展了 JavaScript 的应用领域。")]),a._v(" "),e("p",[a._v("2009年，Node.js 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。")]),a._v(" "),e("p",[a._v("2009年，Jeremy Ashkenas 发布了 CoffeeScript 的最初版本。CoffeeScript 可以被转换为 JavaScript 运行，但是语法要比 JavaScript 简洁。这开启了其他语言转为 JavaScript 的风潮。")]),a._v(" "),e("p",[a._v("2009年，PhoneGap 项目诞生，它将 HTML5 和 JavaScript 引入移动设备的应用程序开发，主要针对 iOS 和 Android 平台，使得 JavaScript 可以用于跨平台的应用程序开发。")]),a._v(" "),e("p",[a._v("2009，Google 发布 Chrome OS，号称是以浏览器为基础发展成的操作系统，允许直接使用 JavaScript 编写应用程序。类似的项目还有 Mozilla 的 Firefox OS。")]),a._v(" "),e("p",[a._v("2010年，三个重要的项目诞生，分别是 NPM、BackboneJS 和 RequireJS，标志着 JavaScript 进入模块化开发的时代。")]),a._v(" "),e("p",[a._v("2011年，微软公司发布 Windows 8操作系统，将 JavaScript 作为应用程序的开发语言之一，直接提供系统支持。")]),a._v(" "),e("p",[a._v("2011年，Google 发布了 Dart 语言，目的是为了结束 JavaScript 语言在浏览器中的垄断，提供更合理、更强大的语法和功能。Chromium浏览器有内置的 Dart 虚拟机，可以运行 Dart 程序，但 Dart 程序也可以被编译成 JavaScript 程序运行。")]),a._v(" "),e("p",[a._v("2011年，微软工程师"),e("a",{attrs:{href:"https://www.hanselman.com/blog/JavaScriptIsAssemblyLanguageForTheWebSematicMarkupIsDeadCleanVsMachinecodedHTML.aspx",target:"_blank",rel:"noopener noreferrer"}},[a._v("Scott Hanselman"),e("OutboundLink")],1),a._v("提出，JavaScript 将是互联网的汇编语言。因为它无所不在，而且正在变得越来越快。其他语言的程序可以被转成 JavaScript 语言，然后在浏览器中运行。")]),a._v(" "),e("p",[a._v("2012年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 项目和 Ember 项目都发布了1.0版本。")]),a._v(" "),e("p",[a._v("2012年，微软发布 TypeScript 语言。该语言被设计成 JavaScript 的超集，这意味着所有 JavaScript 程序，都可以不经修改地在 TypeScript 中运行。同时，TypeScript 添加了很多新的语法特性，主要目的是为了开发大型程序，然后还可以被编译成 JavaScript 运行。")]),a._v(" "),e("p",[a._v("2012年，Mozilla 基金会提出 "),e("a",{attrs:{href:"http://asmjs.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("asm.js"),e("OutboundLink")],1),a._v(" 规格。asm.js 是 JavaScript 的一个子集，所有符合 asm.js 的程序都可以在浏览器中运行，它的特殊之处在于语法有严格限定，可以被快速编译成性能良好的机器码。这样做的目的，是为了给其他语言提供一个编译规范，使其可以被编译成高效的 JavaScript 代码。同时，Mozilla 基金会还发起了 "),e("a",{attrs:{href:"https://github.com/kripken/emscripten/wiki",target:"_blank",rel:"noopener noreferrer"}},[a._v("Emscripten"),e("OutboundLink")],1),a._v(" 项目，目标就是提供一个跨语言的编译器，能够将 LLVM 的位代码（bitcode）转为 JavaScript 代码，在浏览器中运行。因为大部分 LLVM 位代码都是从 C / C++ 语言生成的，这意味着 C / C++ 将可以在浏览器中运行。此外，Mozilla 旗下还有 "),e("a",{attrs:{href:"https://mbebenita.github.io/LLJS/",target:"_blank",rel:"noopener noreferrer"}},[a._v("LLJS"),e("OutboundLink")],1),a._v(" （将 JavaScript 转为 C 代码）项目和 "),e("a",{attrs:{href:"https://github.com/RiverTrail/RiverTrail/wiki",target:"_blank",rel:"noopener noreferrer"}},[a._v("River Trail"),e("OutboundLink")],1),a._v(" （一个用于多核心处理器的 ECMAScript 扩展）项目。目前，可以被编译成 JavaScript 的"),e("a",{attrs:{href:"https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS",target:"_blank",rel:"noopener noreferrer"}},[a._v("语言列表"),e("OutboundLink")],1),a._v("，共有将近40种语言。")]),a._v(" "),e("p",[a._v("2013年，Mozilla 基金会发布手机操作系统 Firefox OS，该操作系统的整个用户界面都使用 JavaScript。")]),a._v(" "),e("p",[a._v("2013年，ECMA 正式推出 JSON 的"),e("a",{attrs:{href:"https://www.ecma-international.org/publications/standards/Ecma-404.htm",target:"_blank",rel:"noopener noreferrer"}},[a._v("国际标准"),e("OutboundLink")],1),a._v("，这意味着 JSON 格式已经变得与 XML 格式一样重要和正式了。")]),a._v(" "),e("p",[a._v("2013年5月，Facebook 发布 UI 框架库 React，引入了新的 JSX 语法，使得 UI 层可以用组件开发，同时引入了网页应用是状态机的概念。")]),a._v(" "),e("p",[a._v("2014年，微软推出 JavaScript 的 Windows 库 WinJS，标志微软公司全面支持 JavaScript 与 Windows 操作系统的融合。")]),a._v(" "),e("p",[a._v("2014年11月，由于对 Joyent 公司垄断 Node 项目、以及该项目进展缓慢的不满，一部分核心开发者离开了 Node.js，创造了 io.js 项目，这是一个更开放、更新更频繁的 Node.js 版本，很短时间内就发布到了2.0版。三个月后，Joyent 公司宣布放弃对 Node 项目的控制，将其转交给新成立的开放性质的 Node 基金会。随后，io.js 项目宣布回归 Node，两个版本将合并。")]),a._v(" "),e("p",[a._v("2015年3月，Facebook 公司发布了 React Native 项目，将 React 框架移植到了手机端，可以用来开发手机 App。它会将 JavaScript 代码转为 iOS 平台的 Objective-C 代码，或者 Android 平台的 Java 代码，从而为 JavaScript 语言开发高性能的原生 App 打开了一条道路。")]),a._v(" "),e("p",[a._v("2015年4月，Angular 框架宣布，2.0 版将基于微软公司的TypeScript语言开发，这等于为 JavaScript 语言引入了强类型。")]),a._v(" "),e("p",[a._v("2015年5月，Node 模块管理器 NPM 超越 CPAN，标志着 JavaScript 成为世界上软件模块最多的语言。")]),a._v(" "),e("p",[a._v("2015年5月，Google 公司的 Polymer 框架发布1.0版。该项目的目标是生产环境可以使用 WebComponent 组件，如果能够达到目标，Web 开发将进入一个全新的以组件为开发基础的阶段。")]),a._v(" "),e("p",[a._v("2015年6月，ECMA 标准化组织正式批准了 ECMAScript 6 语言标准，定名为《ECMAScript 2015 标准》。JavaScript 语言正式进入了下一个阶段，成为一种企业级的、开发大规模应用的语言。这个标准从提出到批准，历时10年，而 JavaScript 语言从诞生至今也已经20年了。")]),a._v(" "),e("p",[a._v("2015年6月，Mozilla 在 asm.js 的基础上发布 WebAssembly 项目。这是一种 JavaScript 引擎的中间码格式，全部都是二进制，类似于 Java 的字节码，有利于移动设备加载 JavaScript 脚本，执行速度提高了 20+ 倍。这意味着将来的软件，会发布 JavaScript 二进制包。")]),a._v(" "),e("p",[a._v("2016年6月，《ECMAScript 2016 标准》发布。与前一年发布的版本相比，它只增加了两个较小的特性。")]),a._v(" "),e("p",[a._v("2017年6月，《ECMAScript 2017 标准》发布，正式引入了 async 函数，使得异步操作的写法出现了根本的变化。")]),a._v(" "),e("p",[a._v("2017年11月，所有主流浏览器全部支持 WebAssembly，这意味着任何语言都可以编译成 JavaScript，在浏览器运行。")]),a._v(" "),e("h3",{attrs:{id:"参考链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[a._v("#")]),a._v(" 参考链接")]),a._v(" "),e("ul",[e("li",[a._v("Axel Rauschmayer, "),e("a",{attrs:{href:"https://oreilly.com/javascript/radarreports/past-present-future-javascript.csp",target:"_blank",rel:"noopener noreferrer"}},[a._v("The Past, Present, and Future of JavaScript"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("John Dalziel, "),e("a",{attrs:{href:"http://creativejs.com/2013/06/the-race-for-speed-part-4-the-future-for-javascript/",target:"_blank",rel:"noopener noreferrer"}},[a._v("The race for speed part 4: The future for JavaScript"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("Axel Rauschmayer, "),e("a",{attrs:{href:"http://www.2ality.com/2013/06/basic-javascript.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Basic JavaScript for the impatient programmer"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("resin.io, "),e("a",{attrs:{href:"https://resin.io/happy-18th-birthday-javascript/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Happy 18th Birthday JavaScript! A look at an unlikely past and bright future"),e("OutboundLink")],1)])]),a._v(" "),e("h2",{attrs:{id:"基本语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),e("h3",{attrs:{id:"语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[a._v("#")]),a._v(" 语句")]),a._v(" "),e("p",[a._v("JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。")]),a._v(" "),e("p",[a._v("语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a = 1 + 3;\n")])])]),e("p",[a._v("这条语句先用"),e("code",[a._v("var")]),a._v("命令，声明了变量"),e("code",[a._v("a")]),a._v("，然后将"),e("code",[a._v("1 + 3")]),a._v("的运算结果赋值给变量"),e("code",[a._v("a")]),a._v("。")]),a._v(" "),e("p",[e("code",[a._v("1 + 3")]),a._v("叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。")]),a._v(" "),e("p",[a._v("语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a = 1 + 3 ; var b = 'abc';\n")])])]),e("p",[a._v("分号前面可以没有任何内容，JavaScript 引擎将其视为空语句。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(";;;\n")])])]),e("p",[a._v("上面的代码就表示3个空语句。")]),a._v(" "),e("p",[a._v("表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1 + 3;\n'abc';\n")])])]),e("p",[a._v("上面两行语句只是单纯地产生一个值，并没有任何实际的意义。")]),a._v(" "),e("h3",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),e("h4",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),e("p",[a._v("变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a = 1;\n")])])]),e("p",[a._v("上面的代码先声明变量"),e("code",[a._v("a")]),a._v("，然后在变量"),e("code",[a._v("a")]),a._v("与数值1之间建立引用关系，称为将数值1“赋值”给变量"),e("code",[a._v("a")]),a._v("。以后，引用变量名"),e("code",[a._v("a")]),a._v("就会得到数值1。最前面的"),e("code",[a._v("var")]),a._v("，是变量声明命令。它表示通知解释引擎，要创建一个变量"),e("code",[a._v("a")]),a._v("。")]),a._v(" "),e("p",[a._v("注意，JavaScript 的变量名区分大小写，"),e("code",[a._v("A")]),a._v("和"),e("code",[a._v("a")]),a._v("是两个不同的变量。")]),a._v(" "),e("p",[a._v("变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a;\na = 1;\n")])])]),e("p",[a._v("如果只是声明变量而没有赋值，则该变量的值是"),e("code",[a._v("undefined")]),a._v("。"),e("code",[a._v("undefined")]),a._v("是一个特殊的值，表示“无定义”。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a;\na // undefined\n")])])]),e("p",[a._v("如果变量赋值的时候，忘了写"),e("code",[a._v("var")]),a._v("命令，这条语句也是有效的。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a = 1;\n// 基本等同\na = 1;\n")])])]),e("p",[a._v("但是，不写"),e("code",[a._v("var")]),a._v("的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使用"),e("code",[a._v("var")]),a._v("命令声明变量。")]),a._v(" "),e("p",[a._v("如果一个变量没有声明就直接使用，JavaScript 会报错，告诉你变量未定义。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("x\n// ReferenceError: x is not defined\n")])])]),e("p",[a._v("上面代码直接使用变量"),e("code",[a._v("x")]),a._v("，系统就报错，告诉你变量"),e("code",[a._v("x")]),a._v("没有声明。")]),a._v(" "),e("p",[a._v("可以在同一条"),e("code",[a._v("var")]),a._v("命令中声明多个变量。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a, b;\n")])])]),e("p",[a._v("JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a = 1;\na = 'hello';\n")])])]),e("p",[a._v("上面代码中，变量"),e("code",[a._v("a")]),a._v("起先被赋值为一个数值，后来又被重新赋值为一个字符串。第二次赋值的时候，因为变量"),e("code",[a._v("a")]),a._v("已经存在，所以不需要使用"),e("code",[a._v("var")]),a._v("命令。")]),a._v(" "),e("p",[a._v("如果使用"),e("code",[a._v("var")]),a._v("重新声明一个已经存在的变量，是无效的。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 1;\nvar x;\nx // 1\n")])])]),e("p",[a._v("上面代码中，变量"),e("code",[a._v("x")]),a._v("声明了两次，第二次声明是无效的。")]),a._v(" "),e("p",[a._v("但是，如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 1;\nvar x = 2;\n\n// 等同于\n\nvar x = 1;\nvar x;\nx = 2;\n")])])]),e("h4",{attrs:{id:"变量提升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[a._v("#")]),a._v(" 变量提升")]),a._v(" "),e("p",[a._v("JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("console.log(a);\nvar a = 1;\n")])])]),e("p",[a._v("上面代码首先使用"),e("code",[a._v("console.log")]),a._v("方法，在控制台（console）显示变量"),e("code",[a._v("a")]),a._v("的值。这时变量"),e("code",[a._v("a")]),a._v("还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var a;\nconsole.log(a);\na = 1;\n")])])]),e("p",[a._v("最后的结果是显示"),e("code",[a._v("undefined")]),a._v("，表示变量"),e("code",[a._v("a")]),a._v("已声明，但还未赋值。")]),a._v(" "),e("h3",{attrs:{id:"标识符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[a._v("#")]),a._v(" 标识符")]),a._v(" "),e("p",[a._v("标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以"),e("code",[a._v("a")]),a._v("和"),e("code",[a._v("A")]),a._v("是两个不同的标识符。")]),a._v(" "),e("p",[a._v("标识符有一套命名规则，不符合规则的就是非法标识符。JavaScript 引擎遇到非法标识符，就会报错。")]),a._v(" "),e("p",[a._v("简单说，标识符命名规则如下。")]),a._v(" "),e("ul",[e("li",[a._v("第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（"),e("code",[a._v("$")]),a._v("）和下划线（"),e("code",[a._v("_")]),a._v("）。")]),a._v(" "),e("li",[a._v("第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字"),e("code",[a._v("0-9")]),a._v("。")])]),a._v(" "),e("p",[a._v("下面这些都是合法的标识符。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("arg0\n_tmp\n$elem\nπ\n")])])]),e("p",[a._v("下面这些则是不合法的标识符。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1a  // 第一个字符不能是数字\n23  // 同上\n***  // 标识符不能包含星号\na+b  // 标识符不能包含加号\n-d  // 标识符不能包含减号或连词线\n")])])]),e("p",[a._v("中文是合法的标识符，可以用作变量名。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var 临时变量 = 1;\n")])])]),e("blockquote",[e("p",[a._v("JavaScript 有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。")])]),a._v(" "),e("h3",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),e("p",[a._v("源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。JavaScript 提供两种注释的写法：一种是单行注释，用"),e("code",[a._v("//")]),a._v("起头；另一种是多行注释，放在"),e("code",[a._v("/*")]),a._v("和"),e("code",[a._v("*/")]),a._v("之间。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 这是单行注释\n\n/*\n 这是\n 多行\n 注释\n*/\n")])])]),e("p",[a._v("此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以"),e("code",[a._v("\x3c!--")]),a._v("和"),e("code",[a._v("--\x3e")]),a._v("也被视为合法的单行注释。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("x = 1; \x3c!-- x = 2;\n--\x3e x = 3;\n")])])]),e("p",[a._v("上面代码中，只有"),e("code",[a._v("x = 1")]),a._v("会执行，其他的部分都被注释掉了。")]),a._v(" "),e("p",[a._v("需要注意的是，"),e("code",[a._v("--\x3e")]),a._v("只有在行首，才会被当成单行注释，否则会当作正常的运算。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function countdown(n) {\n  while (n --\x3e 0) console.log(n);\n}\ncountdown(3)\n// 2\n// 1\n// 0\n")])])]),e("p",[a._v("上面代码中，"),e("code",[a._v("n --\x3e 0")]),a._v("实际上会当作"),e("code",[a._v("n-- > 0")]),a._v("，因此输出2、1、0。")]),a._v(" "),e("h3",{attrs:{id:"区块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区块"}},[a._v("#")]),a._v(" 区块")]),a._v(" "),e("p",[a._v("JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。")]),a._v(" "),e("p",[a._v("对于"),e("code",[a._v("var")]),a._v("命令来说，JavaScript 的区块不构成单独的作用域（scope）。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n  var a = 1;\n}\n\na // 1\n")])])]),e("p",[a._v("上面代码在区块内部，使用"),e("code",[a._v("var")]),a._v("命令声明并赋值了变量"),e("code",[a._v("a")]),a._v("，然后在区块外部，变量"),e("code",[a._v("a")]),a._v("依然有效，区块对于"),e("code",[a._v("var")]),a._v("命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如"),e("code",[a._v("for")]),a._v("、"),e("code",[a._v("if")]),a._v("、"),e("code",[a._v("while")]),a._v("、"),e("code",[a._v("function")]),a._v("等。")]),a._v(" "),e("h3",{attrs:{id:"条件语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[a._v("#")]),a._v(" 条件语句")]),a._v(" "),e("p",[a._v("JavaScript 提供"),e("code",[a._v("if")]),a._v("结构和"),e("code",[a._v("switch")]),a._v("结构，完成条件判断，即只有满足预设的条件，才会执行相应的语句。")]),a._v(" "),e("h4",{attrs:{id:"if-结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-结构"}},[a._v("#")]),a._v(" if 结构")]),a._v(" "),e("p",[e("code",[a._v("if")]),a._v("结构先判断一个表达式的布尔值，然后根据布尔值的真伪，执行不同的语句。所谓布尔值，指的是 JavaScript 的两个特殊值，"),e("code",[a._v("true")]),a._v("表示“真”，"),e("code",[a._v("false")]),a._v("表示“伪”。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (布尔值)\n  语句;\n\n// 或者\nif (布尔值) 语句;\n")])])]),e("p",[a._v("上面是"),e("code",[a._v("if")]),a._v("结构的基本形式。需要注意的是，“布尔值”往往由一个条件表达式产生的，必须放在圆括号中，表示对表达式求值。如果表达式的求值结果为"),e("code",[a._v("true")]),a._v("，就执行紧跟在后面的语句；如果结果为"),e("code",[a._v("false")]),a._v("，则跳过紧跟在后面的语句。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (m === 3)\n  m = m + 1;\n")])])]),e("p",[a._v("上面代码表示，只有在"),e("code",[a._v("m")]),a._v("等于3时，才会将其值加上1。")]),a._v(" "),e("p",[a._v("这种写法要求条件表达式后面只能有一个语句。如果想执行多个语句，必须在"),e("code",[a._v("if")]),a._v("的条件判断之后，加上大括号，表示代码块（多个语句合并成一个语句）。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (m === 3) {\n  m += 1;\n}\n")])])]),e("p",[a._v("建议总是在"),e("code",[a._v("if")]),a._v("语句中使用大括号，因为这样方便插入语句。")]),a._v(" "),e("p",[a._v("注意，"),e("code",[a._v("if")]),a._v("后面的表达式之中，不要混淆赋值表达式（"),e("code",[a._v("=")]),a._v("）、严格相等运算符（"),e("code",[a._v("===")]),a._v("）和相等运算符（"),e("code",[a._v("==")]),a._v("）。尤其是赋值表达式不具有比较作用。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var x = 1;\nvar y = 2;\nif (x = y) {\n  console.log(x);\n}\n// "2"\n')])])]),e("p",[a._v("上面代码的原意是，当"),e("code",[a._v("x")]),a._v("等于"),e("code",[a._v("y")]),a._v("的时候，才执行相关语句。但是，不小心将严格相等运算符写成赋值表达式，结果变成了将"),e("code",[a._v("y")]),a._v("赋值给变量"),e("code",[a._v("x")]),a._v("，再判断变量"),e("code",[a._v("x")]),a._v("的值（等于2）的布尔值（结果为"),e("code",[a._v("true")]),a._v("）。")]),a._v(" "),e("p",[a._v("这种错误可以正常生成一个布尔值，因而不会报错。为了避免这种情况，有些开发者习惯将常量写在运算符的左边，这样的话，一旦不小心将相等运算符写成赋值运算符，就会报错，因为常量不能被赋值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (x = 2) { // 不报错\nif (2 = x) { // 报错\n")])])]),e("p",[a._v("至于为什么优先采用“严格相等运算符”（"),e("code",[a._v("===")]),a._v("），而不是“相等运算符”（"),e("code",[a._v("==")]),a._v("），请参考《运算符》章节。")]),a._v(" "),e("h4",{attrs:{id:"if-else-结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-else-结构"}},[a._v("#")]),a._v(" if...else 结构")]),a._v(" "),e("p",[e("code",[a._v("if")]),a._v("代码块后面，还可以跟一个"),e("code",[a._v("else")]),a._v("代码块，表示不满足条件时，所要执行的代码。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (m === 3) {\n  // 满足条件时，执行的语句\n} else {\n  // 不满足条件时，执行的语句\n}\n")])])]),e("p",[a._v("上面代码判断变量"),e("code",[a._v("m")]),a._v("是否等于3，如果等于就执行"),e("code",[a._v("if")]),a._v("代码块，否则执行"),e("code",[a._v("else")]),a._v("代码块。")]),a._v(" "),e("p",[a._v("对同一个变量进行多次判断时，多个"),e("code",[a._v("if...else")]),a._v("语句可以连写在一起。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (m === 0) {\n  // ...\n} else if (m === 1) {\n  // ...\n} else if (m === 2) {\n  // ...\n} else {\n  // ...\n}\n")])])]),e("p",[e("code",[a._v("else")]),a._v("代码块总是与离自己最近的那个"),e("code",[a._v("if")]),a._v("语句配对。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var m = 1;\nvar n = 2;\n\nif (m !== 1)\nif (n === 2) console.log('hello');\nelse console.log('world');\n")])])]),e("p",[a._v("上面代码不会有任何输出，"),e("code",[a._v("else")]),a._v("代码块不会得到执行，因为它跟着的是最近的那个"),e("code",[a._v("if")]),a._v("语句，相当于下面这样。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (m !== 1) {\n  if (n === 2) {\n    console.log('hello');\n  } else {\n    console.log('world');\n  }\n}\n")])])]),e("p",[a._v("如果想让"),e("code",[a._v("else")]),a._v("代码块跟随最上面的那个"),e("code",[a._v("if")]),a._v("语句，就要改变大括号的位置。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (m !== 1) {\n  if (n === 2) {\n    console.log('hello');\n  }\n} else {\n  console.log('world');\n}\n// world\n")])])]),e("h4",{attrs:{id:"switch-结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#switch-结构"}},[a._v("#")]),a._v(" switch 结构")]),a._v(" "),e("p",[a._v("多个"),e("code",[a._v("if...else")]),a._v("连在一起使用的时候，可以转为使用更方便的"),e("code",[a._v("switch")]),a._v("结构。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('switch (fruit) {\n  case "banana":\n    // ...\n    break;\n  case "apple":\n    // ...\n    break;\n  default:\n    // ...\n}\n')])])]),e("p",[a._v("上面代码根据变量"),e("code",[a._v("fruit")]),a._v("的值，选择执行相应的"),e("code",[a._v("case")]),a._v("。如果所有"),e("code",[a._v("case")]),a._v("都不符合，则执行最后的"),e("code",[a._v("default")]),a._v("部分。需要注意的是，每个"),e("code",[a._v("case")]),a._v("代码块内部的"),e("code",[a._v("break")]),a._v("语句不能少，否则会接下去执行下一个"),e("code",[a._v("case")]),a._v("代码块，而不是跳出"),e("code",[a._v("switch")]),a._v("结构。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 1;\n\nswitch (x) {\n  case 1:\n    console.log('x 等于1');\n  case 2:\n    console.log('x 等于2');\n  default:\n    console.log('x 等于其他值');\n}\n// x等于1\n// x等于2\n// x等于其他值\n")])])]),e("p",[a._v("上面代码中，"),e("code",[a._v("case")]),a._v("代码块之中没有"),e("code",[a._v("break")]),a._v("语句，导致不会跳出"),e("code",[a._v("switch")]),a._v("结构，而会一直执行下去。正确的写法是像下面这样。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("switch (x) {\n  case 1:\n    console.log('x 等于1');\n    break;\n  case 2:\n    console.log('x 等于2');\n    break;\n  default:\n    console.log('x 等于其他值');\n}\n")])])]),e("p",[e("code",[a._v("switch")]),a._v("语句部分和"),e("code",[a._v("case")]),a._v("语句部分，都可以使用表达式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("switch (1 + 3) {\n  case 2 + 2:\n    f();\n    break;\n  default:\n    neverHappens();\n}\n")])])]),e("p",[a._v("上面代码的"),e("code",[a._v("default")]),a._v("部分，是永远不会执行到的。")]),a._v(" "),e("p",[a._v("需要注意的是，"),e("code",[a._v("switch")]),a._v("语句后面的表达式，与"),e("code",[a._v("case")]),a._v("语句后面的表示式比较运行结果时，采用的是严格相等运算符（"),e("code",[a._v("===")]),a._v("），而不是相等运算符（"),e("code",[a._v("==")]),a._v("），这意味着比较时不会发生类型转换。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 1;\n\nswitch (x) {\n  case true:\n    console.log('x 发生类型转换');\n    break;\n  default:\n    console.log('x 没有发生类型转换');\n}\n// x 没有发生类型转换\n")])])]),e("p",[a._v("上面代码中，由于变量"),e("code",[a._v("x")]),a._v("没有发生类型转换，所以不会执行"),e("code",[a._v("case true")]),a._v("的情况。这表明，"),e("code",[a._v("switch")]),a._v("语句内部采用的是“严格相等运算符”，详细解释请参考《运算符》一节。")]),a._v(" "),e("h4",{attrs:{id:"三元运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符"}},[a._v("#")]),a._v(" 三元运算符 ?:")]),a._v(" "),e("p",[a._v("JavaScript 还有一个三元运算符（即该运算符需要三个运算子）"),e("code",[a._v("?:")]),a._v("，也可以用于逻辑判断。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("(条件) ? 表达式1 : 表达式2\n")])])]),e("p",[a._v("上面代码中，如果“条件”为"),e("code",[a._v("true")]),a._v("，则返回“表达式1”的值，否则返回“表达式2”的值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var even = (n % 2 === 0) ? true : false;\n")])])]),e("p",[a._v("上面代码中，如果"),e("code",[a._v("n")]),a._v("可以被2整除，则"),e("code",[a._v("even")]),a._v("等于"),e("code",[a._v("true")]),a._v("，否则等于"),e("code",[a._v("false")]),a._v("。它等同于下面的形式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var even;\nif (n % 2 === 0) {\n  even = true;\n} else {\n  even = false;\n}\n")])])]),e("p",[a._v("这个三元运算符可以被视为"),e("code",[a._v("if...else...")]),a._v("的简写形式，因此可以用于多种场合。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var myVar;\nconsole.log(\n  myVar ?\n  'myVar has a value' :\n  'myVar does not have a value'\n)\n// myVar does not have a value\n")])])]),e("p",[a._v("上面代码利用三元运算符，输出相应的提示。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var msg = '数字' + n + '是' + (n % 2 === 0 ? '偶数' : '奇数');\n")])])]),e("p",[a._v("上面代码利用三元运算符，在字符串之中插入不同的值。")]),a._v(" "),e("h3",{attrs:{id:"循环语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[a._v("#")]),a._v(" 循环语句")]),a._v(" "),e("p",[a._v("循环语句用于重复执行某个操作，它有多种形式。")]),a._v(" "),e("h4",{attrs:{id:"while-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[a._v("#")]),a._v(" while 循环")]),a._v(" "),e("p",[e("code",[a._v("While")]),a._v("语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("while (条件)\n  语句;\n\n// 或者\nwhile (条件) 语句;\n")])])]),e("p",[e("code",[a._v("while")]),a._v("语句的循环条件是一个表达式，必须放在圆括号中。代码块部分，如果只有一条语句，可以省略大括号，否则就必须加上大括号。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("while (条件) {\n  语句;\n}\n")])])]),e("p",[a._v("下面是"),e("code",[a._v("while")]),a._v("语句的一个例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var i = 0;\n\nwhile (i < 100) {\n  console.log('i 当前为：' + i);\n  i = i + 1;\n}\n")])])]),e("p",[a._v("上面的代码将循环100次，直到"),e("code",[a._v("i")]),a._v("等于100为止。")]),a._v(" "),e("p",[a._v("下面的例子是一个无限循环，因为循环条件总是为真。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("while (true) {\n  console.log('Hello, world');\n}\n")])])]),e("h4",{attrs:{id:"for-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[a._v("#")]),a._v(" for 循环")]),a._v(" "),e("p",[e("code",[a._v("for")]),a._v("语句是循环命令的另一种形式，可以指定循环的起点、终点和终止条件。它的格式如下。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (初始化表达式; 条件; 递增表达式)\n  语句\n\n// 或者\n\nfor (初始化表达式; 条件; 递增表达式) {\n  语句\n}\n")])])]),e("p",[e("code",[a._v("for")]),a._v("语句后面的括号里面，有三个表达式。")]),a._v(" "),e("ul",[e("li",[a._v("初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。")]),a._v(" "),e("li",[a._v("条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。")]),a._v(" "),e("li",[a._v("递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。")])]),a._v(" "),e("p",[a._v("下面是一个例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 3;\nfor (var i = 0; i < x; i++) {\n  console.log(i);\n}\n// 0\n// 1\n// 2\n")])])]),e("p",[a._v("上面代码中，初始化表达式是"),e("code",[a._v("var i = 0")]),a._v("，即初始化一个变量"),e("code",[a._v("i")]),a._v("；测试表达式是"),e("code",[a._v("i < x")]),a._v("，即只要"),e("code",[a._v("i")]),a._v("小于"),e("code",[a._v("x")]),a._v("，就会执行循环；递增表达式是"),e("code",[a._v("i++")]),a._v("，即每次循环结束后，"),e("code",[a._v("i")]),a._v("增大1。")]),a._v(" "),e("p",[a._v("所有"),e("code",[a._v("for")]),a._v("循环，都可以改写成"),e("code",[a._v("while")]),a._v("循环。上面的例子改为"),e("code",[a._v("while")]),a._v("循环，代码如下。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 3;\nvar i = 0;\n\nwhile (i < x) {\n  console.log(i);\n  i++;\n}\n")])])]),e("p",[e("code",[a._v("for")]),a._v("语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for ( ; ; ){\n  console.log('Hello World');\n}\n")])])]),e("p",[a._v("上面代码省略了"),e("code",[a._v("for")]),a._v("语句表达式的三个部分，结果就导致了一个无限循环。")]),a._v(" "),e("h4",{attrs:{id:"do-while-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#do-while-循环"}},[a._v("#")]),a._v(" do...while 循环")]),a._v(" "),e("p",[e("code",[a._v("do...while")]),a._v("循环与"),e("code",[a._v("while")]),a._v("循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("do\n  语句\nwhile (条件);\n\n// 或者\ndo {\n  语句\n} while (条件);\n")])])]),e("p",[a._v("不管条件是否为真，"),e("code",[a._v("do...while")]),a._v("循环至少运行一次，这是这种结构最大的特点。另外，"),e("code",[a._v("while")]),a._v("语句后面的分号注意不要省略。")]),a._v(" "),e("p",[a._v("下面是一个例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = 3;\nvar i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while(i < x);\n")])])]),e("h4",{attrs:{id:"break-语句和-continue-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#break-语句和-continue-语句"}},[a._v("#")]),a._v(" break 语句和 continue 语句")]),a._v(" "),e("p",[e("code",[a._v("break")]),a._v("语句和"),e("code",[a._v("continue")]),a._v("语句都具有跳转作用，可以让代码不按既有的顺序执行。")]),a._v(" "),e("p",[e("code",[a._v("break")]),a._v("语句用于跳出代码块或循环。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var i = 0;\n\nwhile(i < 100) {\n  console.log('i 当前为：' + i);\n  i++;\n  if (i === 10) break;\n}\n")])])]),e("p",[a._v("上面代码只会执行10次循环，一旦"),e("code",[a._v("i")]),a._v("等于10，就会跳出循环。")]),a._v(" "),e("p",[e("code",[a._v("for")]),a._v("循环也可以使用"),e("code",[a._v("break")]),a._v("语句跳出循环。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (var i = 0; i < 5; i++) {\n  console.log(i);\n  if (i === 3)\n    break;\n}\n// 0\n// 1\n// 2\n// 3\n")])])]),e("p",[a._v("上面代码执行到"),e("code",[a._v("i")]),a._v("等于3，就会跳出循环。")]),a._v(" "),e("p",[e("code",[a._v("continue")]),a._v("语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var i = 0;\n\nwhile (i < 100){\n  i++;\n  if (i % 2 === 0) continue;\n  console.log('i 当前为：' + i);\n}\n")])])]),e("p",[a._v("上面代码只有在"),e("code",[a._v("i")]),a._v("为奇数时，才会输出"),e("code",[a._v("i")]),a._v("的值。如果"),e("code",[a._v("i")]),a._v("为偶数，则直接进入下一轮循环。")]),a._v(" "),e("p",[a._v("如果存在多重循环，不带参数的"),e("code",[a._v("break")]),a._v("语句和"),e("code",[a._v("continue")]),a._v("语句都只针对最内层循环。")]),a._v(" "),e("h4",{attrs:{id:"标签-label"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签-label"}},[a._v("#")]),a._v(" 标签（label）")]),a._v(" "),e("p",[a._v("JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("label:\n  语句\n")])])]),e("p",[a._v("标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。")]),a._v(" "),e("p",[a._v("标签通常与"),e("code",[a._v("break")]),a._v("语句和"),e("code",[a._v("continue")]),a._v("语句配合使用，跳出特定的循环。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("top:\n  for (var i = 0; i < 3; i++){\n    for (var j = 0; j < 3; j++){\n      if (i === 1 && j === 1) break top;\n      console.log('i=' + i + ', j=' + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n")])])]),e("p",[a._v("上面代码为一个双重循环区块，"),e("code",[a._v("break")]),a._v("命令后面加上了"),e("code",[a._v("top")]),a._v("标签（注意，"),e("code",[a._v("top")]),a._v("不用加引号），满足条件时，直接跳出双层循环。如果"),e("code",[a._v("break")]),a._v("语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。")]),a._v(" "),e("p",[a._v("标签也可以用于跳出代码块。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("foo: {\n  console.log(1);\n  break foo;\n  console.log('本行不会输出');\n}\nconsole.log(2);\n// 1\n// 2\n")])])]),e("p",[a._v("上面代码执行到"),e("code",[a._v("break foo")]),a._v("，就会跳出区块。")]),a._v(" "),e("p",[e("code",[a._v("continue")]),a._v("语句也可以与标签配合使用。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("top:\n  for (var i = 0; i < 3; i++){\n    for (var j = 0; j < 3; j++){\n      if (i === 1 && j === 1) continue top;\n      console.log('i=' + i + ', j=' + j);\n    }\n  }\n// i=0, j=0\n// i=0, j=1\n// i=0, j=2\n// i=1, j=0\n// i=2, j=0\n// i=2, j=1\n// i=2, j=2\n")])])]),e("p",[a._v("上面代码中，"),e("code",[a._v("continue")]),a._v("命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果"),e("code",[a._v("continue")]),a._v("语句后面不使用标签，则只能进入下一轮的内层循环。")]),a._v(" "),e("h3",{attrs:{id:"参考链接-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-2"}},[a._v("#")]),a._v(" 参考链接")]),a._v(" "),e("ul",[e("li",[a._v("Axel Rauschmayer, "),e("a",{attrs:{href:"http://www.2ality.com/2011/10/javascript-overview.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("A quick overview of JavaScript"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);