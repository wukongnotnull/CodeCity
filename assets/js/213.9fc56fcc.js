(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{653:function(e,a,t){"use strict";t.r(a);var v=t(25),_=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"标准库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准库"}},[e._v("#")]),e._v(" 标准库")]),e._v(" "),t("h2",{attrs:{id:"object-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-对象"}},[e._v("#")]),e._v(" Object 对象")]),e._v(" "),t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("JavaScript 原生提供"),t("code",[e._v("Object")]),e._v("对象（注意起首的"),t("code",[e._v("O")]),e._v("是大写），本章介绍该对象原生的各种方法。")]),e._v(" "),t("p",[e._v("JavaScript 的所有其他对象都继承自"),t("code",[e._v("Object")]),e._v("对象，即那些对象都是"),t("code",[e._v("Object")]),e._v("的实例。")]),e._v(" "),t("p",[t("code",[e._v("Object")]),e._v("对象的原生方法分成两类："),t("code",[e._v("Object")]),e._v("本身的方法与"),t("code",[e._v("Object")]),e._v("的实例方法。")]),e._v(" "),t("p",[t("strong",[e._v("（1）"),t("code",[e._v("Object")]),e._v("对象本身的方法")])]),e._v(" "),t("p",[e._v("所谓“本身的方法”就是直接定义在"),t("code",[e._v("Object")]),e._v("对象的方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.print = function (o) { console.log(o) };\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("print")]),e._v("方法就是直接定义在"),t("code",[e._v("Object")]),e._v("对象上。")]),e._v(" "),t("p",[t("strong",[e._v("（2）"),t("code",[e._v("Object")]),e._v("的实例方法")])]),e._v(" "),t("p",[e._v("所谓实例方法就是定义在"),t("code",[e._v("Object")]),e._v("原型对象"),t("code",[e._v("Object.prototype")]),e._v("上的方法。它可以被"),t("code",[e._v("Object")]),e._v("实例直接使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.print = function () {\n  console.log(this);\n};\n\nvar obj = new Object();\nobj.print() // Object\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Object.prototype")]),e._v("定义了一个"),t("code",[e._v("print")]),e._v("方法，然后生成一个"),t("code",[e._v("Object")]),e._v("的实例"),t("code",[e._v("obj")]),e._v("。"),t("code",[e._v("obj")]),e._v("直接继承了"),t("code",[e._v("Object.prototype")]),e._v("的属性和方法，可以直接使用"),t("code",[e._v("obj.print")]),e._v("调用"),t("code",[e._v("print")]),e._v("方法。也就是说，"),t("code",[e._v("obj")]),e._v("对象的"),t("code",[e._v("print")]),e._v("方法实质上就是调用"),t("code",[e._v("Object.prototype.print")]),e._v("方法。")]),e._v(" "),t("p",[e._v("关于原型对象"),t("code",[e._v("object.prototype")]),e._v("的详细解释，参见《面向对象编程》章节。这里只要知道，凡是定义在"),t("code",[e._v("Object.prototype")]),e._v("对象上面的属性和方法，将被所有实例对象共享就可以了。")]),e._v(" "),t("p",[e._v("以下先介绍"),t("code",[e._v("Object")]),e._v("作为函数的用法，然后再介绍"),t("code",[e._v("Object")]),e._v("对象的原生方法，分成对象自身的方法（又称为“静态方法”）和实例方法两部分。")]),e._v(" "),t("h3",{attrs:{id:"object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[e._v("#")]),e._v(" Object()")]),e._v(" "),t("p",[t("code",[e._v("Object")]),e._v("本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。")]),e._v(" "),t("p",[e._v("如果参数为空（或者为"),t("code",[e._v("undefined")]),e._v("和"),t("code",[e._v("null")]),e._v("），"),t("code",[e._v("Object()")]),e._v("返回一个空对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object();\n// 等同于\nvar obj = Object(undefined);\nvar obj = Object(null);\n\nobj instanceof Object // true\n")])])]),t("p",[e._v("上面代码的含义，是将"),t("code",[e._v("undefined")]),e._v("和"),t("code",[e._v("null")]),e._v("转为对象，结果得到了一个空对象"),t("code",[e._v("obj")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("instanceof")]),e._v("运算符用来验证，一个对象是否为指定的构造函数的实例。"),t("code",[e._v("obj instanceof Object")]),e._v("返回"),t("code",[e._v("true")]),e._v("，就表示"),t("code",[e._v("obj")]),e._v("对象是"),t("code",[e._v("Object")]),e._v("的实例。")]),e._v(" "),t("p",[e._v("如果参数是原始类型的值，"),t("code",[e._v("Object")]),e._v("方法将其转为对应的包装对象的实例（参见《原始类型的包装对象》一章）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object(1);\nobj instanceof Object // true\nobj instanceof Number // true\n\nvar obj = Object('foo');\nobj instanceof Object // true\nobj instanceof String // true\n\nvar obj = Object(true);\nobj instanceof Object // true\nobj instanceof Boolean // true\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Object")]),e._v("函数的参数是各种原始类型的值，转换成对象就是原始类型值对应的包装对象。")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("Object")]),e._v("方法的参数是一个对象，它总是返回该对象，即不用转换。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [];\nvar obj = Object(arr); // 返回原数组\nobj === arr // true\n\nvar value = {};\nvar obj = Object(value) // 返回原对象\nobj === value // true\n\nvar fn = function () {};\nvar obj = Object(fn); // 返回原函数\nobj === fn // true\n")])])]),t("p",[e._v("利用这一点，可以写一个判断变量是否为对象的函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function isObject(value) {\n  return value === Object(value);\n}\n\nisObject([]) // true\nisObject(true) // false\n")])])]),t("h3",{attrs:{id:"object-构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-构造函数"}},[e._v("#")]),e._v(" Object 构造函数")]),e._v(" "),t("p",[t("code",[e._v("Object")]),e._v("不仅可以当作工具函数使用，还可以当作构造函数使用，即前面可以使用"),t("code",[e._v("new")]),e._v("命令。")]),e._v(" "),t("p",[t("code",[e._v("Object")]),e._v("构造函数的首要用途，是直接通过它来生成新对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\n")])])]),t("blockquote",[t("p",[e._v("注意，通过"),t("code",[e._v("var obj = new Object()")]),e._v("的写法生成新对象，与字面量的写法"),t("code",[e._v("var obj = {}")]),e._v("是等价的。或者说，后者只是前者的一种简便写法。")])]),e._v(" "),t("p",[t("code",[e._v("Object")]),e._v("构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象（详见《包装对象》一章）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var o1 = {a: 1};\nvar o2 = new Object(o1);\no1 === o2 // true\n\nvar obj = new Object(123);\nobj instanceof Number // true\n")])])]),t("p",[e._v("虽然用法相似，但是"),t("code",[e._v("Object(value)")]),e._v("与"),t("code",[e._v("new Object(value)")]),e._v("两者的语义是不同的，"),t("code",[e._v("Object(value)")]),e._v("表示将"),t("code",[e._v("value")]),e._v("转成一个对象，"),t("code",[e._v("new Object(value)")]),e._v("则表示新生成一个对象，它的值是"),t("code",[e._v("value")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"object-的静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-的静态方法"}},[e._v("#")]),e._v(" Object 的静态方法")]),e._v(" "),t("p",[e._v("所谓“静态方法”，是指部署在"),t("code",[e._v("Object")]),e._v("对象自身的方法。")]),e._v(" "),t("h4",{attrs:{id:"object-keys-object-getownpropertynames"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-object-getownpropertynames"}},[e._v("#")]),e._v(" Object.keys()，Object.getOwnPropertyNames()")]),e._v(" "),t("p",[t("code",[e._v("Object.keys")]),e._v("方法和"),t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法都用来遍历对象的属性。")]),e._v(" "),t("p",[t("code",[e._v("Object.keys")]),e._v("方法的参数是一个对象，返回一个数组。该数组的成员都是该对象自身的（而不是继承的）所有属性名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj) // ["p1", "p2"]\n')])])]),t("p",[t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法与"),t("code",[e._v("Object.keys")]),e._v("类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.getOwnPropertyNames(obj) // ["p1", "p2"]\n')])])]),t("p",[e._v("对于一般的对象来说，"),t("code",[e._v("Object.keys()")]),e._v("和"),t("code",[e._v("Object.getOwnPropertyNames()")]),e._v("返回的结果是一样的。只有涉及不可枚举属性时，才会有不一样的结果。"),t("code",[e._v("Object.keys")]),e._v("方法只返回可枚举的属性（详见《对象属性的描述对象》一章），"),t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法还返回不可枚举的属性名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var a = [\'Hello\', \'World\'];\n\nObject.keys(a) // ["0", "1"]\nObject.getOwnPropertyNames(a) // ["0", "1", "length"]\n')])])]),t("p",[e._v("上面代码中，数组的"),t("code",[e._v("length")]),e._v("属性是不可枚举的属性，所以只出现在"),t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法的返回结果中。")]),e._v(" "),t("p",[e._v("由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p1: 123,\n  p2: 456\n};\n\nObject.keys(obj).length // 2\nObject.getOwnPropertyNames(obj).length // 2\n")])])]),t("p",[e._v("一般情况下，几乎总是使用"),t("code",[e._v("Object.keys")]),e._v("方法，遍历对象的属性。")]),e._v(" "),t("h4",{attrs:{id:"其他方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他方法"}},[e._v("#")]),e._v(" 其他方法")]),e._v(" "),t("p",[e._v("除了上面提到的两个方法，"),t("code",[e._v("Object")]),e._v("还有不少其他静态方法，将在后文逐一详细介绍。")]),e._v(" "),t("p",[t("strong",[e._v("（1）对象属性模型的相关方法")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("：获取某个属性的描述对象。")]),e._v(" "),t("li",[t("code",[e._v("Object.defineProperty()")]),e._v("：通过描述对象，定义某个属性。")]),e._v(" "),t("li",[t("code",[e._v("Object.defineProperties()")]),e._v("：通过描述对象，定义多个属性。")])]),e._v(" "),t("p",[t("strong",[e._v("（2）控制对象状态的方法")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Object.preventExtensions()")]),e._v("：防止对象扩展。")]),e._v(" "),t("li",[t("code",[e._v("Object.isExtensible()")]),e._v("：判断对象是否可扩展。")]),e._v(" "),t("li",[t("code",[e._v("Object.seal()")]),e._v("：禁止对象配置。")]),e._v(" "),t("li",[t("code",[e._v("Object.isSealed()")]),e._v("：判断一个对象是否可配置。")]),e._v(" "),t("li",[t("code",[e._v("Object.freeze()")]),e._v("：冻结一个对象。")]),e._v(" "),t("li",[t("code",[e._v("Object.isFrozen()")]),e._v("：判断一个对象是否被冻结。")])]),e._v(" "),t("p",[t("strong",[e._v("（3）原型链相关方法")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Object.create()")]),e._v("：该方法可以指定原型对象和属性，返回一个新的对象。")]),e._v(" "),t("li",[t("code",[e._v("Object.getPrototypeOf()")]),e._v("：获取对象的"),t("code",[e._v("Prototype")]),e._v("对象。")])]),e._v(" "),t("h3",{attrs:{id:"object-的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-的实例方法"}},[e._v("#")]),e._v(" Object 的实例方法")]),e._v(" "),t("p",[e._v("除了静态方法，还有不少方法定义在"),t("code",[e._v("Object.prototype")]),e._v("对象。它们称为实例方法，所有"),t("code",[e._v("Object")]),e._v("的实例对象都继承了这些方法。")]),e._v(" "),t("p",[t("code",[e._v("Object")]),e._v("实例对象的方法，主要有以下六个。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Object.prototype.valueOf()")]),e._v("：返回当前对象对应的值。")]),e._v(" "),t("li",[t("code",[e._v("Object.prototype.toString()")]),e._v("：返回当前对象对应的字符串形式。")]),e._v(" "),t("li",[t("code",[e._v("Object.prototype.toLocaleString()")]),e._v("：返回当前对象对应的本地字符串形式。")]),e._v(" "),t("li",[t("code",[e._v("Object.prototype.hasOwnProperty()")]),e._v("：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。")]),e._v(" "),t("li",[t("code",[e._v("Object.prototype.isPrototypeOf()")]),e._v("：判断当前对象是否为另一个对象的原型。")]),e._v(" "),t("li",[t("code",[e._v("Object.prototype.propertyIsEnumerable()")]),e._v("：判断某个属性是否可枚举。")])]),e._v(" "),t("p",[e._v("本节介绍前四个方法，另外两个方法将在后文相关章节介绍。")]),e._v(" "),t("h4",{attrs:{id:"object-prototype-valueof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-valueof"}},[e._v("#")]),e._v(" Object.prototype.valueOf()")]),e._v(" "),t("p",[t("code",[e._v("valueOf")]),e._v("方法的作用是返回一个对象的“值”，默认情况下返回对象本身。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\nobj.valueOf() === obj // true\n")])])]),t("p",[e._v("上面代码比较"),t("code",[e._v("obj.valueOf()")]),e._v("与"),t("code",[e._v("obj")]),e._v("本身，两者是一样的。")]),e._v(" "),t("p",[t("code",[e._v("valueOf")]),e._v("方法的主要用途是，JavaScript 自动类型转换时会默认调用这个方法（详见《数据类型转换》一章）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = new Object();\n1 + obj // "1[object Object]"\n')])])]),t("p",[e._v("上面代码将对象"),t("code",[e._v("obj")]),e._v("与数字"),t("code",[e._v("1")]),e._v("相加，这时 JavaScript 就会默认调用"),t("code",[e._v("valueOf()")]),e._v("方法，求出"),t("code",[e._v("obj")]),e._v("的值再与"),t("code",[e._v("1")]),e._v("相加。所以，如果自定义"),t("code",[e._v("valueOf")]),e._v("方法，就可以得到想要的结果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\nobj.valueOf = function () {\n  return 2;\n};\n\n1 + obj // 3\n")])])]),t("p",[e._v("上面代码自定义了"),t("code",[e._v("obj")]),e._v("对象的"),t("code",[e._v("valueOf")]),e._v("方法，于是"),t("code",[e._v("1 + obj")]),e._v("就得到了"),t("code",[e._v("3")]),e._v("。这种方法就相当于用自定义的"),t("code",[e._v("obj.valueOf")]),e._v("，覆盖"),t("code",[e._v("Object.prototype.valueOf")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"object-prototype-tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring"}},[e._v("#")]),e._v(" Object.prototype.toString()")]),e._v(" "),t("p",[t("code",[e._v("toString")]),e._v("方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var o1 = new Object();\no1.toString() // "[object Object]"\n\nvar o2 = {a:1};\no2.toString() // "[object Object]"\n')])])]),t("p",[e._v("上面代码表示，对于一个对象调用"),t("code",[e._v("toString")]),e._v("方法，会返回字符串"),t("code",[e._v("[object Object]")]),e._v("，该字符串说明对象的类型。")]),e._v(" "),t("p",[e._v("字符串"),t("code",[e._v("[object Object]")]),e._v("本身没有太大的用处，但是通过自定义"),t("code",[e._v("toString")]),e._v("方法，可以让对象在自动类型转换时，得到想要的字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\n\nobj.toString = function () {\n  return 'hello';\n};\n\nobj + ' ' + 'world' // \"hello world\"\n")])])]),t("p",[e._v("上面代码表示，当对象用于字符串加法时，会自动调用"),t("code",[e._v("toString")]),e._v("方法。由于自定义了"),t("code",[e._v("toString")]),e._v("方法，所以返回字符串"),t("code",[e._v("hello world")]),e._v("。")]),e._v(" "),t("p",[e._v("数组、字符串、函数、Date 对象都分别部署了自定义的"),t("code",[e._v("toString")]),e._v("方法，覆盖了"),t("code",[e._v("Object.prototype.toString")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('[1, 2, 3].toString() // "1,2,3"\n\n\'123\'.toString() // "123"\n\n(function () {\n  return 123;\n}).toString()\n// "function () {\n//   return 123;\n// }"\n\n(new Date()).toString()\n// "Tue May 10 2016 09:11:31 GMT+0800 (CST)"\n')])])]),t("p",[e._v("上面代码中，数组、字符串、函数、Date 对象调用"),t("code",[e._v("toString")]),e._v("方法，并不会返回"),t("code",[e._v("[object Object]")]),e._v("，因为它们都自定义了"),t("code",[e._v("toString")]),e._v("方法，覆盖原始方法。")]),e._v(" "),t("h4",{attrs:{id:"tostring-的应用-判断数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tostring-的应用-判断数据类型"}},[e._v("#")]),e._v(" toString() 的应用：判断数据类型")]),e._v(" "),t("p",[t("code",[e._v("Object.prototype.toString")]),e._v("方法返回对象的类型字符串，因此可以用来判断一个值的类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {};\nobj.toString() // "[object Object]"\n')])])]),t("p",[e._v("上面代码调用空对象的"),t("code",[e._v("toString")]),e._v("方法，结果返回一个字符串"),t("code",[e._v("object Object")]),e._v("，其中第二个"),t("code",[e._v("Object")]),e._v("表示该值的构造函数。这是一个十分有用的判断数据类型的方法。")]),e._v(" "),t("p",[e._v("由于实例对象可能会自定义"),t("code",[e._v("toString")]),e._v("方法，覆盖掉"),t("code",[e._v("Object.prototype.toString")]),e._v("方法，所以为了得到类型字符串，最好直接使用"),t("code",[e._v("Object.prototype.toString")]),e._v("方法。通过函数的"),t("code",[e._v("call")]),e._v("方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.prototype.toString.call(value)\n")])])]),t("p",[e._v("上面代码表示对"),t("code",[e._v("value")]),e._v("这个值调用"),t("code",[e._v("Object.prototype.toString")]),e._v("方法。")]),e._v(" "),t("p",[e._v("不同数据类型的"),t("code",[e._v("Object.prototype.toString")]),e._v("方法返回值如下。")]),e._v(" "),t("ul",[t("li",[e._v("数值：返回"),t("code",[e._v("[object Number]")]),e._v("。")]),e._v(" "),t("li",[e._v("字符串：返回"),t("code",[e._v("[object String]")]),e._v("。")]),e._v(" "),t("li",[e._v("布尔值：返回"),t("code",[e._v("[object Boolean]")]),e._v("。")]),e._v(" "),t("li",[e._v("undefined：返回"),t("code",[e._v("[object Undefined]")]),e._v("。")]),e._v(" "),t("li",[e._v("null：返回"),t("code",[e._v("[object Null]")]),e._v("。")]),e._v(" "),t("li",[e._v("数组：返回"),t("code",[e._v("[object Array]")]),e._v("。")]),e._v(" "),t("li",[e._v("arguments 对象：返回"),t("code",[e._v("[object Arguments]")]),e._v("。")]),e._v(" "),t("li",[e._v("函数：返回"),t("code",[e._v("[object Function]")]),e._v("。")]),e._v(" "),t("li",[e._v("Error 对象：返回"),t("code",[e._v("[object Error]")]),e._v("。")]),e._v(" "),t("li",[e._v("Date 对象：返回"),t("code",[e._v("[object Date]")]),e._v("。")]),e._v(" "),t("li",[e._v("RegExp 对象：返回"),t("code",[e._v("[object RegExp]")]),e._v("。")]),e._v(" "),t("li",[e._v("其他对象：返回"),t("code",[e._v("[object Object]")]),e._v("。")])]),e._v(" "),t("p",[e._v("这就是说，"),t("code",[e._v("Object.prototype.toString")]),e._v("可以看出一个值到底是什么类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Object.prototype.toString.call(2) // "[object Number]"\nObject.prototype.toString.call(\'\') // "[object String]"\nObject.prototype.toString.call(true) // "[object Boolean]"\nObject.prototype.toString.call(undefined) // "[object Undefined]"\nObject.prototype.toString.call(null) // "[object Null]"\nObject.prototype.toString.call(Math) // "[object Math]"\nObject.prototype.toString.call({}) // "[object Object]"\nObject.prototype.toString.call([]) // "[object Array]"\n')])])]),t("p",[e._v("利用这个特性，可以写出一个比"),t("code",[e._v("typeof")]),e._v("运算符更准确的类型判断函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\ntype({}); // "object"\ntype([]); // "array"\ntype(5); // "number"\ntype(null); // "null"\ntype(); // "undefined"\ntype(/abcd/); // "regex"\ntype(new Date()); // "date"\n')])])]),t("p",[e._v("在上面这个"),t("code",[e._v("type")]),e._v("函数的基础上，还可以加上专门判断某种类型数据的方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var type = function (o){\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\n\n['Null',\n 'Undefined',\n 'Object',\n 'Array',\n 'String',\n 'Number',\n 'Boolean',\n 'Function',\n 'RegExp'\n].forEach(function (t) {\n  type['is' + t] = function (o) {\n    return type(o) === t.toLowerCase();\n  };\n});\n\ntype.isObject({}) // true\ntype.isNumber(NaN) // true\ntype.isRegExp(/abc/) // true\n")])])]),t("h4",{attrs:{id:"object-prototype-tolocalestring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tolocalestring"}},[e._v("#")]),e._v(" Object.prototype.toLocaleString()")]),e._v(" "),t("p",[t("code",[e._v("Object.prototype.toLocaleString")]),e._v("方法与"),t("code",[e._v("toString")]),e._v("的返回结果相同，也是返回一个值的字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {};\nobj.toString(obj) // "[object Object]"\nobj.toLocaleString(obj) // "[object Object]"\n')])])]),t("p",[e._v("这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的"),t("code",[e._v("toLocaleString")]),e._v("，用来返回针对某些地域的特定的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var person = {\n  toString: function () {\n    return 'Henry Norman Bethune';\n  },\n  toLocaleString: function () {\n    return '白求恩';\n  }\n};\n\nperson.toString() // Henry Norman Bethune\nperson.toLocaleString() // 白求恩\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("toString()")]),e._v("方法返回对象的一般字符串形式，"),t("code",[e._v("toLocaleString()")]),e._v("方法返回本地的字符串形式。")]),e._v(" "),t("p",[e._v("目前，主要有三个对象自定义了"),t("code",[e._v("toLocaleString")]),e._v("方法。")]),e._v(" "),t("ul",[t("li",[e._v("Array.prototype.toLocaleString()")]),e._v(" "),t("li",[e._v("Number.prototype.toLocaleString()")]),e._v(" "),t("li",[e._v("Date.prototype.toLocaleString()")])]),e._v(" "),t("p",[e._v("举例来说，日期的实例对象的"),t("code",[e._v("toString")]),e._v("和"),t("code",[e._v("toLocaleString")]),e._v("返回值就不一样，而且"),t("code",[e._v("toLocaleString")]),e._v("的返回值跟用户设定的所在地域相关。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var date = new Date();\ndate.toString() // "Tue Jan 01 2018 12:01:33 GMT+0800 (CST)"\ndate.toLocaleString() // "1/01/2018, 12:01:33 PM"\n')])])]),t("h4",{attrs:{id:"object-prototype-hasownproperty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-hasownproperty"}},[e._v("#")]),e._v(" Object.prototype.hasOwnProperty()")]),e._v(" "),t("p",[t("code",[e._v("Object.prototype.hasOwnProperty")]),e._v("方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p: 123\n};\n\nobj.hasOwnProperty('p') // true\nobj.hasOwnProperty('toString') // false\n")])])]),t("p",[e._v("上面代码中，对象"),t("code",[e._v("obj")]),e._v("自身具有"),t("code",[e._v("p")]),e._v("属性，所以返回"),t("code",[e._v("true")]),e._v("。"),t("code",[e._v("toString")]),e._v("属性是继承的，所以返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Axel Rauschmayer, "),t("a",{attrs:{href:"http://www.2ality.com/2013/08/protecting-objects.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Protecting objects in JavaScript"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("kangax, "),t("a",{attrs:{href:"http://perfectionkills.com/understanding-delete/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding delete"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Jon Bretman, "),t("a",{attrs:{href:"https://techblog.badoo.com/blog/2013/11/01/type-checking-in-javascript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Type Checking in JavaScript"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Cody Lindley, "),t("a",{attrs:{href:"http://tech.pro/tutorial/1671/thinking-about-ecmascript-5-parts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Thinking About ECMAScript 5 Parts"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Bjorn Tipling, "),t("a",{attrs:{href:"http://bjorn.tipling.com/advanced-objects-in-javascript",target:"_blank",rel:"noopener noreferrer"}},[e._v("Advanced objects in JavaScript"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Javier Márquez, "),t("a",{attrs:{href:"http://arqex.com/967/javascript-properties-enumerable-writable-configurable",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript properties are enumerable, writable and configurable"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Sella Rafaeli, "),t("a",{attrs:{href:"http://www.sellarafaeli.com/blog/native_javascript_data_binding",target:"_blank",rel:"noopener noreferrer"}},[e._v("Native JavaScript Data-Binding"),t("OutboundLink")],1),e._v(": 使用存取函数实现model与view的双向绑定")]),e._v(" "),t("li",[e._v("Lea Verou, "),t("a",{attrs:{href:"http://lea.verou.me/2015/08/copying-properties-the-robust-way/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Copying object properties, the robust way"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"属性描述对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性描述对象"}},[e._v("#")]),e._v(" 属性描述对象")]),e._v(" "),t("h3",{attrs:{id:"概述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。")]),e._v(" "),t("p",[e._v("下面是属性描述对象的一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false,\n  get: undefined,\n  set: undefined\n}\n")])])]),t("p",[e._v("属性描述对象提供6个元属性。")]),e._v(" "),t("p",[e._v("（1）"),t("code",[e._v("value")])]),e._v(" "),t("p",[t("code",[e._v("value")]),e._v("是该属性的属性值，默认为"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("p",[e._v("（2）"),t("code",[e._v("writable")])]),e._v(" "),t("p",[t("code",[e._v("writable")]),e._v("是一个布尔值，表示属性值（value）是否可改变（即是否可写），默认为"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("（3）"),t("code",[e._v("enumerable")])]),e._v(" "),t("p",[t("code",[e._v("enumerable")]),e._v("是一个布尔值，表示该属性是否可遍历，默认为"),t("code",[e._v("true")]),e._v("。如果设为"),t("code",[e._v("false")]),e._v("，会使得某些操作（比如"),t("code",[e._v("for...in")]),e._v("循环、"),t("code",[e._v("Object.keys()")]),e._v("）跳过该属性。")]),e._v(" "),t("p",[e._v("（4）"),t("code",[e._v("configurable")])]),e._v(" "),t("p",[t("code",[e._v("configurable")]),e._v("是一个布尔值，表示属性的可配置性，默认为"),t("code",[e._v("true")]),e._v("。如果设为"),t("code",[e._v("false")]),e._v("，将阻止某些操作改写属性描述对象，比如无法删除该属性，也不得改变各种元属性（"),t("code",[e._v("value")]),e._v("属性除外）。也就是说，"),t("code",[e._v("configurable")]),e._v("属性控制了属性描述对象的可写性。")]),e._v(" "),t("p",[e._v("（5）"),t("code",[e._v("get")])]),e._v(" "),t("p",[t("code",[e._v("get")]),e._v("是一个函数，表示该属性的取值函数（getter），默认为"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("p",[e._v("（6）"),t("code",[e._v("set")])]),e._v(" "),t("p",[t("code",[e._v("set")]),e._v("是一个函数，表示该属性的存值函数（setter），默认为"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"object-getownpropertydescriptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptor"}},[e._v("#")]),e._v(" Object.getOwnPropertyDescriptor()")]),e._v(" "),t("p",[t("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("方法可以获取属性描述对象。它的第一个参数是目标对象，第二个参数是一个字符串，对应目标对象的某个属性名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { p: 'a' };\n\nObject.getOwnPropertyDescriptor(obj, 'p')\n// Object { value: \"a\",\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("方法获取"),t("code",[e._v("obj.p")]),e._v("的属性描述对象。")]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("方法只能用于对象自身的属性，不能用于继承的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { p: 'a' };\n\nObject.getOwnPropertyDescriptor(obj, 'toString')\n// undefined\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("toString")]),e._v("是"),t("code",[e._v("obj")]),e._v("对象继承的属性，"),t("code",[e._v("Object.getOwnPropertyDescriptor()")]),e._v("无法获取。")]),e._v(" "),t("h3",{attrs:{id:"object-getownpropertynames"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[e._v("#")]),e._v(" Object.getOwnPropertyNames()")]),e._v(" "),t("p",[t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法返回一个数组，成员是参数对象自身的全部属性的属性名，不管该属性是否可遍历。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = Object.defineProperties({}, {\n  p1: { value: 1, enumerable: true },\n  p2: { value: 2, enumerable: false }\n});\n\nObject.getOwnPropertyNames(obj)\n// ["p1", "p2"]\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.p1")]),e._v("是可遍历的，"),t("code",[e._v("obj.p2")]),e._v("是不可遍历的。"),t("code",[e._v("Object.getOwnPropertyNames")]),e._v("会将它们都返回。")]),e._v(" "),t("p",[e._v("这跟"),t("code",[e._v("Object.keys")]),e._v("的行为不同，"),t("code",[e._v("Object.keys")]),e._v("只返回对象自身的可遍历属性的全部属性名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.keys([]) // []\nObject.getOwnPropertyNames([]) // [ 'length' ]\n\nObject.keys(Object.prototype) // []\nObject.getOwnPropertyNames(Object.prototype)\n// ['hasOwnProperty',\n//  'valueOf',\n//  'constructor',\n//  'toLocaleString',\n//  'isPrototypeOf',\n//  'propertyIsEnumerable',\n//  'toString']\n")])])]),t("p",[e._v("上面代码中，数组自身的"),t("code",[e._v("length")]),e._v("属性是不可遍历的，"),t("code",[e._v("Object.keys")]),e._v("不会返回该属性。第二个例子的"),t("code",[e._v("Object.prototype")]),e._v("也是一个对象，所有实例对象都会继承它，它自身的属性都是不可遍历的。")]),e._v(" "),t("h3",{attrs:{id:"object-defineproperty-object-defineproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-object-defineproperties"}},[e._v("#")]),e._v(" Object.defineProperty()，Object.defineProperties()")]),e._v(" "),t("p",[t("code",[e._v("Object.defineProperty()")]),e._v("方法允许通过属性描述对象，定义或修改一个属性，然后返回修改后的对象，它的用法如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.defineProperty(object, propertyName, attributesObject)\n")])])]),t("p",[t("code",[e._v("Object.defineProperty")]),e._v("方法接受三个参数，依次如下。")]),e._v(" "),t("ul",[t("li",[e._v("object：属性所在的对象")]),e._v(" "),t("li",[e._v("propertyName：字符串，表示属性名")]),e._v(" "),t("li",[e._v("attributesObject：属性描述对象")])]),e._v(" "),t("p",[e._v("举例来说，定义"),t("code",[e._v("obj.p")]),e._v("可以写成下面这样。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object.defineProperty({}, 'p', {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\n\nobj.p // 123\n\nobj.p = 246;\nobj.p // 123\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Object.defineProperty()")]),e._v("方法定义了"),t("code",[e._v("obj.p")]),e._v("属性。由于属性描述对象的"),t("code",[e._v("writable")]),e._v("属性为"),t("code",[e._v("false")]),e._v("，所以"),t("code",[e._v("obj.p")]),e._v("属性不可写。注意，这里的"),t("code",[e._v("Object.defineProperty")]),e._v("方法的第一个参数是"),t("code",[e._v("{}")]),e._v("（一个新建的空对象），"),t("code",[e._v("p")]),e._v("属性直接定义在这个空对象上面，然后返回这个对象，这是"),t("code",[e._v("Object.defineProperty()")]),e._v("的常见用法。")]),e._v(" "),t("p",[e._v("如果属性已经存在，"),t("code",[e._v("Object.defineProperty()")]),e._v("方法相当于更新该属性的属性描述对象。")]),e._v(" "),t("p",[e._v("如果一次性定义或修改多个属性，可以使用"),t("code",[e._v("Object.defineProperties()")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = Object.defineProperties({}, {\n  p1: { value: 123, enumerable: true },\n  p2: { value: \'abc\', enumerable: true },\n  p3: { get: function () { return this.p1 + this.p2 },\n    enumerable:true,\n    configurable:true\n  }\n});\n\nobj.p1 // 123\nobj.p2 // "abc"\nobj.p3 // "123abc"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Object.defineProperties()")]),e._v("同时定义了"),t("code",[e._v("obj")]),e._v("对象的三个属性。其中，"),t("code",[e._v("p3")]),e._v("属性定义了取值函数"),t("code",[e._v("get")]),e._v("，即每次读取该属性，都会调用这个取值函数。")]),e._v(" "),t("p",[e._v("注意，一旦定义了取值函数"),t("code",[e._v("get")]),e._v("（或存值函数"),t("code",[e._v("set")]),e._v("），就不能将"),t("code",[e._v("writable")]),e._v("属性设为"),t("code",[e._v("true")]),e._v("，或者同时定义"),t("code",[e._v("value")]),e._v("属性，否则会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\n\nObject.defineProperty(obj, 'p', {\n  value: 123,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property.\n// A property cannot both have accessors and be writable or have a value\n\nObject.defineProperty(obj, 'p', {\n  writable: true,\n  get: function() { return 456; }\n});\n// TypeError: Invalid property descriptor.\n// Cannot both specify accessors and a value or writable attribute\n")])])]),t("p",[e._v("上面代码中，同时定义了"),t("code",[e._v("get")]),e._v("属性和"),t("code",[e._v("value")]),e._v("属性，以及将"),t("code",[e._v("writable")]),e._v("属性设为"),t("code",[e._v("true")]),e._v("，就会报错。")]),e._v(" "),t("p",[t("code",[e._v("Object.defineProperty()")]),e._v("和"),t("code",[e._v("Object.defineProperties()")]),e._v("参数里面的属性描述对象，"),t("code",[e._v("writable")]),e._v("、"),t("code",[e._v("configurable")]),e._v("、"),t("code",[e._v("enumerable")]),e._v("这三个属性的默认值都为"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\nObject.defineProperty(obj, 'foo', {});\nObject.getOwnPropertyDescriptor(obj, 'foo')\n// {\n//   value: undefined,\n//   writable: false,\n//   enumerable: false,\n//   configurable: false\n// }\n")])])]),t("p",[e._v("上面代码中，定义"),t("code",[e._v("obj.foo")]),e._v("时用了一个空的属性描述对象，就可以看到各个元属性的默认值。")]),e._v(" "),t("h3",{attrs:{id:"object-prototype-propertyisenumerable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-propertyisenumerable"}},[e._v("#")]),e._v(" Object.prototype.propertyIsEnumerable()")]),e._v(" "),t("p",[e._v("实例对象的"),t("code",[e._v("propertyIsEnumerable()")]),e._v("方法返回一个布尔值，用来判断某个属性是否可遍历。注意，这个方法只能用于判断对象自身的属性，对于继承的属性一律返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\nobj.p = 123;\n\nobj.propertyIsEnumerable('p') // true\nobj.propertyIsEnumerable('toString') // false\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.p")]),e._v("是可遍历的，而"),t("code",[e._v("obj.toString")]),e._v("是继承的属性。")]),e._v(" "),t("h3",{attrs:{id:"元属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元属性"}},[e._v("#")]),e._v(" 元属性")]),e._v(" "),t("p",[e._v("属性描述对象的各个属性称为“元属性”，因为它们可以看作是控制属性的属性。")]),e._v(" "),t("h4",{attrs:{id:"value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[e._v("#")]),e._v(" value")]),e._v(" "),t("p",[t("code",[e._v("value")]),e._v("属性是目标属性的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\nobj.p = 123;\n\nObject.getOwnPropertyDescriptor(obj, 'p').value\n// 123\n\nObject.defineProperty(obj, 'p', { value: 246 });\nobj.p // 246\n")])])]),t("p",[e._v("上面代码是通过"),t("code",[e._v("value")]),e._v("属性，读取或改写"),t("code",[e._v("obj.p")]),e._v("的例子。")]),e._v(" "),t("h4",{attrs:{id:"writable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#writable"}},[e._v("#")]),e._v(" writable")]),e._v(" "),t("p",[t("code",[e._v("writable")]),e._v("属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\n\nObject.defineProperty(obj, 'a', {\n  value: 37,\n  writable: false\n});\n\nobj.a // 37\nobj.a = 25;\nobj.a // 37\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.a")]),e._v("的"),t("code",[e._v("writable")]),e._v("属性是"),t("code",[e._v("false")]),e._v("。然后，改变"),t("code",[e._v("obj.a")]),e._v("的值，不会有任何效果。")]),e._v(" "),t("p",[e._v("注意，正常模式下，对"),t("code",[e._v("writable")]),e._v("为"),t("code",[e._v("false")]),e._v("的属性赋值不会报错，只会默默失败。但是，严格模式下会报错，即使对"),t("code",[e._v("a")]),e._v("属性重新赋予一个同样的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'use strict';\nvar obj = {};\n\nObject.defineProperty(obj, 'a', {\n  value: 37,\n  writable: false\n});\n\nobj.a = 37;\n// Uncaught TypeError: Cannot assign to read only property 'a' of object\n")])])]),t("p",[e._v("上面代码是严格模式，对"),t("code",[e._v("obj.a")]),e._v("任何赋值行为都会报错。")]),e._v(" "),t("p",[e._v("如果原型对象的某个属性的"),t("code",[e._v("writable")]),e._v("为"),t("code",[e._v("false")]),e._v("，那么子对象将无法自定义这个属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var proto = Object.defineProperty({}, 'foo', {\n  value: 'a',\n  writable: false\n});\n\nvar obj = Object.create(proto);\n\nobj.foo = 'b';\nobj.foo // 'a'\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("proto")]),e._v("是原型对象，它的"),t("code",[e._v("foo")]),e._v("属性不可写。"),t("code",[e._v("obj")]),e._v("对象继承"),t("code",[e._v("proto")]),e._v("，也不可以再自定义这个属性了。如果是严格模式，这样做还会抛出一个错误。")]),e._v(" "),t("p",[e._v("但是，有一个规避方法，就是通过覆盖属性描述对象，绕过这个限制。原因是这种情况下，原型链会被完全忽视。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var proto = Object.defineProperty({}, 'foo', {\n  value: 'a',\n  writable: false\n});\n\nvar obj = Object.create(proto);\nObject.defineProperty(obj, 'foo', {\n  value: 'b'\n});\n\nobj.foo // \"b\"\n")])])]),t("h4",{attrs:{id:"enumerable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enumerable"}},[e._v("#")]),e._v(" enumerable")]),e._v(" "),t("p",[t("code",[e._v("enumerable")]),e._v("（可遍历性）返回一个布尔值，表示目标属性是否可遍历。")]),e._v(" "),t("p",[e._v("JavaScript 的早期版本，"),t("code",[e._v("for...in")]),e._v("循环是基于"),t("code",[e._v("in")]),e._v("运算符的。我们知道，"),t("code",[e._v("in")]),e._v("运算符不管某个属性是对象自身的还是继承的，都会返回"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\n'toString' in obj // true\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("toString")]),e._v("不是"),t("code",[e._v("obj")]),e._v("对象自身的属性，但是"),t("code",[e._v("in")]),e._v("运算符也返回"),t("code",[e._v("true")]),e._v("，这导致了"),t("code",[e._v("toString")]),e._v("属性也会被"),t("code",[e._v("for...in")]),e._v("循环遍历。")]),e._v(" "),t("p",[e._v("这显然不太合理，后来就引入了“可遍历性”这个概念。只有可遍历的属性，才会被"),t("code",[e._v("for...in")]),e._v("循环遍历，同时还规定"),t("code",[e._v("toString")]),e._v("这一类实例对象继承的原生属性，都是不可遍历的，这样就保证了"),t("code",[e._v("for...in")]),e._v("循环的可用性。")]),e._v(" "),t("p",[e._v("具体来说，如果一个属性的"),t("code",[e._v("enumerable")]),e._v("为"),t("code",[e._v("false")]),e._v("，下面三个操作不会取到该属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("for..in")]),e._v("循环")]),e._v(" "),t("li",[t("code",[e._v("Object.keys")]),e._v("方法")]),e._v(" "),t("li",[t("code",[e._v("JSON.stringify")]),e._v("方法")])]),e._v(" "),t("p",[e._v("因此，"),t("code",[e._v("enumerable")]),e._v("可以用来设置“秘密”属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\n\nObject.defineProperty(obj, 'x', {\n  value: 123,\n  enumerable: false\n});\n\nobj.x // 123\n\nfor (var key in obj) {\n  console.log(key);\n}\n// undefined\n\nObject.keys(obj)  // []\nJSON.stringify(obj) // \"{}\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.x")]),e._v("属性的"),t("code",[e._v("enumerable")]),e._v("为"),t("code",[e._v("false")]),e._v("，所以一般的遍历操作都无法获取该属性，使得它有点像“秘密”属性，但不是真正的私有属性，还是可以直接获取它的值。")]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("for...in")]),e._v("循环包括继承的属性，"),t("code",[e._v("Object.keys")]),e._v("方法不包括继承的属性。如果需要获取对象自身的所有属性，不管是否可遍历，可以使用"),t("code",[e._v("Object.getOwnPropertyNames")]),e._v("方法。")]),e._v(" "),t("p",[e._v("另外，"),t("code",[e._v("JSON.stringify")]),e._v("方法会排除"),t("code",[e._v("enumerable")]),e._v("为"),t("code",[e._v("false")]),e._v("的属性，有时可以利用这一点。如果对象的 JSON 格式输出要排除某些属性，就可以把这些属性的"),t("code",[e._v("enumerable")]),e._v("设为"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"configurable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configurable"}},[e._v("#")]),e._v(" configurable")]),e._v(" "),t("p",[t("code",[e._v("configurable")]),e._v("(可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。也就是说，"),t("code",[e._v("configurable")]),e._v("为"),t("code",[e._v("false")]),e._v("时，"),t("code",[e._v("writable")]),e._v("、"),t("code",[e._v("enumerable")]),e._v("和"),t("code",[e._v("configurable")]),e._v("都不能被修改了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object.defineProperty({}, 'p', {\n  value: 1,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nObject.defineProperty(obj, 'p', {writable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, 'p', {enumerable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, 'p', {configurable: true})\n// TypeError: Cannot redefine property: p\n\nObject.defineProperty(obj, 'p', {value: 2})\n// TypeError: Cannot redefine property: p\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.p")]),e._v("的"),t("code",[e._v("configurable")]),e._v("属性为"),t("code",[e._v("false")]),e._v("。然后，改动"),t("code",[e._v("writable")]),e._v("、"),t("code",[e._v("enumerable")]),e._v("、"),t("code",[e._v("configurable")]),e._v("，结果都报错。")]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("writable")]),e._v("属性只有在"),t("code",[e._v("false")]),e._v("改为"),t("code",[e._v("true")]),e._v("时会报错，"),t("code",[e._v("true")]),e._v("改为"),t("code",[e._v("false")]),e._v("是允许的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object.defineProperty({}, 'p', {\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(obj, 'p', {writable: false})\n// 修改成功\n")])])]),t("p",[t("code",[e._v("value")]),e._v("属性的情况比较特殊。只要"),t("code",[e._v("writable")]),e._v("和"),t("code",[e._v("configurable")]),e._v("有一个为"),t("code",[e._v("true")]),e._v("，就允许改动"),t("code",[e._v("value")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var o1 = Object.defineProperty({}, 'p', {\n  value: 1,\n  writable: true,\n  configurable: false\n});\n\nObject.defineProperty(o1, 'p', {value: 2})\n// 修改成功\n\nvar o2 = Object.defineProperty({}, 'p', {\n  value: 1,\n  writable: false,\n  configurable: true\n});\n\nObject.defineProperty(o2, 'p', {value: 2})\n// 修改成功\n")])])]),t("p",[e._v("另外，"),t("code",[e._v("writable")]),e._v("为"),t("code",[e._v("false")]),e._v("时，直接对目标属性赋值，不报错，但不会成功。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object.defineProperty({}, 'p', {\n  value: 1,\n  writable: false,\n  configurable: false\n});\n\nobj.p = 2;\nobj.p // 1\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.p")]),e._v("的"),t("code",[e._v("writable")]),e._v("为"),t("code",[e._v("false")]),e._v("，对"),t("code",[e._v("obj.p")]),e._v("直接赋值不会生效。如果是严格模式，还会报错。")]),e._v(" "),t("p",[e._v("可配置性决定了目标属性是否可以被删除（delete）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object.defineProperties({}, {\n  p1: { value: 1, configurable: true },\n  p2: { value: 2, configurable: false }\n});\n\ndelete obj.p1 // true\ndelete obj.p2 // false\n\nobj.p1 // undefined\nobj.p2 // 2\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.p1")]),e._v("的"),t("code",[e._v("configurable")]),e._v("是"),t("code",[e._v("true")]),e._v("，所以可以被删除，"),t("code",[e._v("obj.p2")]),e._v("就无法删除。")]),e._v(" "),t("h3",{attrs:{id:"存取器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存取器"}},[e._v("#")]),e._v(" 存取器")]),e._v(" "),t("p",[e._v("除了直接定义以外，属性还可以用存取器（accessor）定义。其中，存值函数称为"),t("code",[e._v("setter")]),e._v("，使用属性描述对象的"),t("code",[e._v("set")]),e._v("属性；取值函数称为"),t("code",[e._v("getter")]),e._v("，使用属性描述对象的"),t("code",[e._v("get")]),e._v("属性。")]),e._v(" "),t("p",[e._v("一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。利用这个功能，可以实现许多高级特性，比如定制属性的读取和赋值行为。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = Object.defineProperty({}, 'p', {\n  get: function () {\n    return 'getter';\n  },\n  set: function (value) {\n    console.log('setter: ' + value);\n  }\n});\n\nobj.p // \"getter\"\nobj.p = 123 // \"setter: 123\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.p")]),e._v("定义了"),t("code",[e._v("get")]),e._v("和"),t("code",[e._v("set")]),e._v("属性。"),t("code",[e._v("obj.p")]),e._v("取值时，就会调用"),t("code",[e._v("get")]),e._v("；赋值时，就会调用"),t("code",[e._v("set")]),e._v("。")]),e._v(" "),t("p",[e._v("JavaScript 还提供了存取器的另一种写法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 写法二\nvar obj = {\n  get p() {\n    return 'getter';\n  },\n  set p(value) {\n    console.log('setter: ' + value);\n  }\n};\n")])])]),t("p",[e._v("上面两种写法，虽然属性"),t("code",[e._v("p")]),e._v("的读取和赋值行为是一样的，但是有一些细微的区别。第一种写法，属性"),t("code",[e._v("p")]),e._v("的"),t("code",[e._v("configurable")]),e._v("和"),t("code",[e._v("enumerable")]),e._v("都为"),t("code",[e._v("false")]),e._v("，从而导致属性"),t("code",[e._v("p")]),e._v("是不可遍历的；第二种写法，属性"),t("code",[e._v("p")]),e._v("的"),t("code",[e._v("configurable")]),e._v("和"),t("code",[e._v("enumerable")]),e._v("都为"),t("code",[e._v("true")]),e._v("，因此属性"),t("code",[e._v("p")]),e._v("是可遍历的。实际开发中，写法二更常用。")]),e._v(" "),t("p",[e._v("注意，取值函数"),t("code",[e._v("get")]),e._v("不能接受参数，存值函数"),t("code",[e._v("set")]),e._v("只能接受一个参数（即属性的值）。")]),e._v(" "),t("p",[e._v("存取器往往用于，属性的值依赖对象内部数据的场合。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj ={\n  $n : 5,\n  get next() { return this.$n++ },\n  set next(n) {\n    if (n >= this.$n) this.$n = n;\n    else throw new Error('新的值必须大于当前值');\n  }\n};\n\nobj.next // 5\n\nobj.next = 10;\nobj.next // 10\n\nobj.next = 5;\n// Uncaught Error: 新的值必须大于当前值\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("next")]),e._v("属性的存值函数和取值函数，都依赖于内部属性"),t("code",[e._v("$n")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"对象的拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的拷贝"}},[e._v("#")]),e._v(" 对象的拷贝")]),e._v(" "),t("p",[e._v("有时，我们需要将一个对象的所有属性，拷贝到另一个对象，可以用下面的方法实现。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var extend = function (to, from) {\n  for (var property in from) {\n    to[property] = from[property];\n  }\n\n  return to;\n}\n\nextend({}, {\n  a: 1\n})\n// {a: 1}\n")])])]),t("p",[e._v("上面这个方法的问题在于，如果遇到存取器定义的属性，会只拷贝值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("extend({}, {\n  get a() { return 1 }\n})\n// {a: 1}\n")])])]),t("p",[e._v("为了解决这个问题，我们可以通过"),t("code",[e._v("Object.defineProperty")]),e._v("方法来拷贝属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var extend = function (to, from) {\n  for (var property in from) {\n    if (!from.hasOwnProperty(property)) continue;\n    Object.defineProperty(\n      to,\n      property,\n      Object.getOwnPropertyDescriptor(from, property)\n    );\n  }\n\n  return to;\n}\n\nextend({}, { get a(){ return 1 } })\n// { get a(){ return 1 } })\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("hasOwnProperty")]),e._v("那一行用来过滤掉继承的属性，否则可能会报错，因为"),t("code",[e._v("Object.getOwnPropertyDescriptor")]),e._v("读不到继承属性的属性描述对象。")]),e._v(" "),t("h3",{attrs:{id:"控制对象状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制对象状态"}},[e._v("#")]),e._v(" 控制对象状态")]),e._v(" "),t("p",[e._v("有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，最弱的一种是"),t("code",[e._v("Object.preventExtensions")]),e._v("，其次是"),t("code",[e._v("Object.seal")]),e._v("，最强的是"),t("code",[e._v("Object.freeze")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"object-preventextensions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-preventextensions"}},[e._v("#")]),e._v(" Object.preventExtensions()")]),e._v(" "),t("p",[t("code",[e._v("Object.preventExtensions")]),e._v("方法可以使得一个对象无法再添加新的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\nObject.preventExtensions(obj);\n\nObject.defineProperty(obj, 'p', {\n  value: 'hello'\n});\n// TypeError: Cannot define property:p, object is not extensible.\n\nobj.p = 1;\nobj.p // undefined\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj")]),e._v("对象经过"),t("code",[e._v("Object.preventExtensions")]),e._v("以后，就无法添加新属性了。")]),e._v(" "),t("h4",{attrs:{id:"object-isextensible"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-isextensible"}},[e._v("#")]),e._v(" Object.isExtensible()")]),e._v(" "),t("p",[t("code",[e._v("Object.isExtensible")]),e._v("方法用于检查一个对象是否使用了"),t("code",[e._v("Object.preventExtensions")]),e._v("方法。也就是说，检查是否可以为一个对象添加属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\n\nObject.isExtensible(obj) // true\nObject.preventExtensions(obj);\nObject.isExtensible(obj) // false\n")])])]),t("p",[e._v("上面代码中，对"),t("code",[e._v("obj")]),e._v("对象使用"),t("code",[e._v("Object.preventExtensions")]),e._v("方法以后，再使用"),t("code",[e._v("Object.isExtensible")]),e._v("方法，返回"),t("code",[e._v("false")]),e._v("，表示已经不能添加新属性了。")]),e._v(" "),t("h4",{attrs:{id:"object-seal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-seal"}},[e._v("#")]),e._v(" Object.seal()")]),e._v(" "),t("p",[t("code",[e._v("Object.seal")]),e._v("方法使得一个对象既无法添加新属性，也无法删除旧属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { p: 'hello' };\nObject.seal(obj);\n\ndelete obj.p;\nobj.p // \"hello\"\n\nobj.x = 'world';\nobj.x // undefined\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj")]),e._v("对象执行"),t("code",[e._v("Object.seal")]),e._v("方法以后，就无法添加新属性和删除旧属性了。")]),e._v(" "),t("p",[t("code",[e._v("Object.seal")]),e._v("实质是把属性描述对象的"),t("code",[e._v("configurable")]),e._v("属性设为"),t("code",[e._v("false")]),e._v("，因此属性描述对象不再能改变了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p: 'a'\n};\n\n// seal方法之前\nObject.getOwnPropertyDescriptor(obj, 'p')\n// Object {\n//   value: \"a\",\n//   writable: true,\n//   enumerable: true,\n//   configurable: true\n// }\n\nObject.seal(obj);\n\n// seal方法之后\nObject.getOwnPropertyDescriptor(obj, 'p')\n// Object {\n//   value: \"a\",\n//   writable: true,\n//   enumerable: true,\n//   configurable: false\n// }\n\nObject.defineProperty(obj, 'p', {\n  enumerable: false\n})\n// TypeError: Cannot redefine property: p\n")])])]),t("p",[e._v("上面代码中，使用"),t("code",[e._v("Object.seal")]),e._v("方法之后，属性描述对象的"),t("code",[e._v("configurable")]),e._v("属性就变成了"),t("code",[e._v("false")]),e._v("，然后改变"),t("code",[e._v("enumerable")]),e._v("属性就会报错。")]),e._v(" "),t("p",[t("code",[e._v("Object.seal")]),e._v("只是禁止新增或删除属性，并不影响修改某个属性的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { p: 'a' };\nObject.seal(obj);\nobj.p = 'b';\nobj.p // 'b'\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Object.seal")]),e._v("方法对"),t("code",[e._v("p")]),e._v("属性的"),t("code",[e._v("value")]),e._v("无效，是因为此时"),t("code",[e._v("p")]),e._v("属性的可写性由"),t("code",[e._v("writable")]),e._v("决定。")]),e._v(" "),t("h4",{attrs:{id:"object-issealed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-issealed"}},[e._v("#")]),e._v(" Object.isSealed()")]),e._v(" "),t("p",[t("code",[e._v("Object.isSealed")]),e._v("方法用于检查一个对象是否使用了"),t("code",[e._v("Object.seal")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { p: 'a' };\n\nObject.seal(obj);\nObject.isSealed(obj) // true\n")])])]),t("p",[e._v("这时，"),t("code",[e._v("Object.isExtensible")]),e._v("方法也返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { p: 'a' };\n\nObject.seal(obj);\nObject.isExtensible(obj) // false\n")])])]),t("h4",{attrs:{id:"object-freeze"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-freeze"}},[e._v("#")]),e._v(" Object.freeze()")]),e._v(" "),t("p",[t("code",[e._v("Object.freeze")]),e._v("方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p: 'hello'\n};\n\nObject.freeze(obj);\n\nobj.p = 'world';\nobj.p // \"hello\"\n\nobj.t = 'hello';\nobj.t // undefined\n\ndelete obj.p // false\nobj.p // \"hello\"\n")])])]),t("p",[e._v("上面代码中，对"),t("code",[e._v("obj")]),e._v("对象进行"),t("code",[e._v("Object.freeze()")]),e._v("以后，修改属性、新增属性、删除属性都无效了。这些操作并不报错，只是默默地失败。如果在严格模式下，则会报错。")]),e._v(" "),t("h4",{attrs:{id:"object-isfrozen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-isfrozen"}},[e._v("#")]),e._v(" Object.isFrozen()")]),e._v(" "),t("p",[t("code",[e._v("Object.isFrozen")]),e._v("方法用于检查一个对象是否使用了"),t("code",[e._v("Object.freeze")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p: 'hello'\n};\n\nObject.freeze(obj);\nObject.isFrozen(obj) // true\n")])])]),t("p",[e._v("使用"),t("code",[e._v("Object.freeze")]),e._v("方法以后，"),t("code",[e._v("Object.isSealed")]),e._v("将会返回"),t("code",[e._v("true")]),e._v("，"),t("code",[e._v("Object.isExtensible")]),e._v("返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p: 'hello'\n};\n\nObject.freeze(obj);\n\nObject.isSealed(obj) // true\nObject.isExtensible(obj) // false\n")])])]),t("p",[t("code",[e._v("Object.isFrozen")]),e._v("的一个用途是，确认某个对象没有被冻结后，再对它的属性赋值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  p: 'hello'\n};\n\nObject.freeze(obj);\n\nif (!Object.isFrozen(obj)) {\n  obj.p = 'world';\n}\n")])])]),t("p",[e._v("上面代码中，确认"),t("code",[e._v("obj")]),e._v("没有被冻结后，再对它的属性赋值，就不会报错了。")]),e._v(" "),t("h4",{attrs:{id:"局限性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局限性"}},[e._v("#")]),e._v(" 局限性")]),e._v(" "),t("p",[e._v("上面的三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nproto.t = 'hello';\nobj.t\n// hello\n")])])]),t("p",[e._v("上面代码中，对象"),t("code",[e._v("obj")]),e._v("本身不能新增属性，但是可以在它的原型对象上新增属性，就依然能够在"),t("code",[e._v("obj")]),e._v("上读到。")]),e._v(" "),t("p",[e._v("一种解决方案是，把"),t("code",[e._v("obj")]),e._v("的原型也冻结住。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = new Object();\nObject.preventExtensions(obj);\n\nvar proto = Object.getPrototypeOf(obj);\nObject.preventExtensions(proto);\n\nproto.t = 'hello';\nobj.t // undefined\n")])])]),t("p",[e._v("另外一个局限是，如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  foo: 1,\n  bar: ['a', 'b']\n};\nObject.freeze(obj);\n\nobj.bar.push('c');\nobj.bar // [\"a\", \"b\", \"c\"]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("obj.bar")]),e._v("属性指向一个数组，"),t("code",[e._v("obj")]),e._v("对象被冻结以后，这个指向无法改变，即无法指向其他值，但是所指向的数组是可以改变的。")]),e._v(" "),t("h2",{attrs:{id:"array-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-对象"}},[e._v("#")]),e._v(" Array 对象")]),e._v(" "),t("h3",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" 构造函数")]),e._v(" "),t("p",[t("code",[e._v("Array")]),e._v("是 JavaScript 的原生对象，同时也是一个构造函数，可以用它生成新的数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = new Array(2);\narr.length // 2\narr // [ empty x 2 ]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Array()")]),e._v("构造函数的参数"),t("code",[e._v("2")]),e._v("，表示生成一个两个成员的数组，每个位置都是空值。")]),e._v(" "),t("p",[e._v("如果没有使用"),t("code",[e._v("new")]),e._v("关键字，运行结果也是一样的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = Array(2);\n// 等同于\nvar arr = new Array(2);\n")])])]),t("p",[e._v("考虑到语义性，以及与其他构造函数用法保持一致，建议总是加上"),t("code",[e._v("new")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("Array()")]),e._v("构造函数有一个很大的缺陷，不同的参数个数会导致不一致的行为。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 无参数时，返回一个空数组\nnew Array() // []\n\n// 单个正整数参数，表示返回的新数组的长度\nnew Array(1) // [ empty ]\nnew Array(2) // [ empty x 2 ]\n\n// 非正整数的数值作为参数，会报错\nnew Array(3.2) // RangeError: Invalid array length\nnew Array(-3) // RangeError: Invalid array length\n\n// 单个非数值（比如字符串、布尔值、对象等）作为参数，\n// 则该参数是返回的新数组的成员\nnew Array('abc') // ['abc']\nnew Array([1]) // [Array[1]]\n\n// 多参数时，所有参数都是返回的新数组的成员\nnew Array(1, 2) // [1, 2]\nnew Array('a', 'b', 'c') // ['a', 'b', 'c']\n")])])]),t("p",[e._v("可以看到，"),t("code",[e._v("Array()")]),e._v("作为构造函数，行为很不一致。因此，不建议使用它生成新数组，直接使用数组字面量是更好的做法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// bad\nvar arr = new Array(1, 2);\n\n// good\nvar arr = [1, 2];\n")])])]),t("p",[e._v("注意，如果参数是一个正整数，返回数组的成员都是空位。虽然读取的时候返回"),t("code",[e._v("undefined")]),e._v("，但实际上该位置没有任何值。虽然这时可以读取到"),t("code",[e._v("length")]),e._v("属性，但是取不到键名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = new Array(3);\nvar b = [undefined, undefined, undefined];\n\na.length // 3\nb.length // 3\n\na[0] // undefined\nb[0] // undefined\n\n0 in a // false\n0 in b // true\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("a")]),e._v("是"),t("code",[e._v("Array()")]),e._v("生成的一个长度为3的空数组，"),t("code",[e._v("b")]),e._v("是一个三个成员都是"),t("code",[e._v("undefined")]),e._v("的数组，这两个数组是不一样的。读取键值的时候，"),t("code",[e._v("a")]),e._v("和"),t("code",[e._v("b")]),e._v("都返回"),t("code",[e._v("undefined")]),e._v("，但是"),t("code",[e._v("a")]),e._v("的键名（成员的序号）都是空的，"),t("code",[e._v("b")]),e._v("的键名是有值的。")]),e._v(" "),t("h3",{attrs:{id:"静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),t("h4",{attrs:{id:"array-isarray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray"}},[e._v("#")]),e._v(" Array.isArray()")]),e._v(" "),t("p",[t("code",[e._v("Array.isArray")]),e._v("方法返回一个布尔值，表示参数是否为数组。它可以弥补"),t("code",[e._v("typeof")]),e._v("运算符的不足。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var arr = [1, 2, 3];\n\ntypeof arr // "object"\nArray.isArray(arr) // true\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("typeof")]),e._v("运算符只能显示数组的类型是"),t("code",[e._v("Object")]),e._v("，而"),t("code",[e._v("Array.isArray")]),e._v("方法可以识别数组。")]),e._v(" "),t("h3",{attrs:{id:"实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("h4",{attrs:{id:"valueof-tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#valueof-tostring"}},[e._v("#")]),e._v(" valueOf()，toString()")]),e._v(" "),t("p",[t("code",[e._v("valueOf")]),e._v("方法是一个所有对象都拥有的方法，表示对该对象求值。不同对象的"),t("code",[e._v("valueOf")]),e._v("方法不尽一致，数组的"),t("code",[e._v("valueOf")]),e._v("方法返回数组本身。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [1, 2, 3];\narr.valueOf() // [1, 2, 3]\n")])])]),t("p",[t("code",[e._v("toString")]),e._v("方法也是对象的通用方法，数组的"),t("code",[e._v("toString")]),e._v("方法返回数组的字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var arr = [1, 2, 3];\narr.toString() // "1,2,3"\n\nvar arr = [1, 2, 3, [4, 5, 6]];\narr.toString() // "1,2,3,4,5,6"\n')])])]),t("h4",{attrs:{id:"push-pop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push-pop"}},[e._v("#")]),e._v(" push()，pop()")]),e._v(" "),t("p",[t("code",[e._v("push")]),e._v("方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [];\n\narr.push(1) // 1\narr.push('a') // 2\narr.push(true, {}) // 4\narr // [1, 'a', true, {}]\n")])])]),t("p",[e._v("上面代码使用"),t("code",[e._v("push")]),e._v("方法，往数组中添加了四个成员。")]),e._v(" "),t("p",[t("code",[e._v("pop")]),e._v("方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = ['a', 'b', 'c'];\n\narr.pop() // 'c'\narr // ['a', 'b']\n")])])]),t("p",[e._v("对空数组使用"),t("code",[e._v("pop")]),e._v("方法，不会报错，而是返回"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[].pop() // undefined\n")])])]),t("p",[t("code",[e._v("push")]),e._v("和"),t("code",[e._v("pop")]),e._v("结合使用，就构成了“后进先出”的栈结构（stack）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [];\narr.push(1, 2);\narr.push(3);\narr.pop();\narr // [1, 2]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("3")]),e._v("是最后进入数组的，但是最早离开数组。")]),e._v(" "),t("h4",{attrs:{id:"shift-unshift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shift-unshift"}},[e._v("#")]),e._v(" shift()，unshift()")]),e._v(" "),t("p",[t("code",[e._v("shift()")]),e._v("方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c'];\n\na.shift() // 'a'\na // ['b', 'c']\n")])])]),t("p",[e._v("上面代码中，使用"),t("code",[e._v("shift()")]),e._v("方法以后，原数组就变了。")]),e._v(" "),t("p",[t("code",[e._v("shift()")]),e._v("方法可以遍历并清空一个数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var list = [1, 2, 3, 4];\nvar item;\n\nwhile (item = list.shift()) {\n  console.log(item);\n}\n\nlist // []\n")])])]),t("p",[e._v("上面代码通过"),t("code",[e._v("list.shift()")]),e._v("方法每次取出一个元素，从而遍历数组。它的前提是数组元素不能是"),t("code",[e._v("0")]),e._v("或任何布尔值等于"),t("code",[e._v("false")]),e._v("的元素，因此这样的遍历不是很可靠。")]),e._v(" "),t("p",[t("code",[e._v("push()")]),e._v("和"),t("code",[e._v("shift()")]),e._v("结合使用，就构成了“先进先出”的队列结构（queue）。")]),e._v(" "),t("p",[t("code",[e._v("unshift()")]),e._v("方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c'];\n\na.unshift('x'); // 4\na // ['x', 'a', 'b', 'c']\n")])])]),t("p",[t("code",[e._v("unshift()")]),e._v("方法可以接受多个参数，这些参数都会添加到目标数组头部。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [ 'c', 'd' ];\narr.unshift('a', 'b') // 4\narr // [ 'a', 'b', 'c', 'd' ]\n")])])]),t("h4",{attrs:{id:"join"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[e._v("#")]),e._v(" join()")]),e._v(" "),t("p",[t("code",[e._v("join()")]),e._v("方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = [1, 2, 3, 4];\n\na.join(' ') // '1 2 3 4'\na.join(' | ') // \"1 | 2 | 3 | 4\"\na.join() // \"1,2,3,4\"\n")])])]),t("p",[e._v("如果数组成员是"),t("code",[e._v("undefined")]),e._v("或"),t("code",[e._v("null")]),e._v("或空位，会被转成空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[undefined, null].join('#')\n// '#'\n\n['a',, 'b'].join('-')\n// 'a--b'\n")])])]),t("p",[e._v("通过"),t("code",[e._v("call")]),e._v("方法，这个方法也可以用于字符串或类似数组的对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Array.prototype.join.call('hello', '-')\n// \"h-e-l-l-o\"\n\nvar obj = { 0: 'a', 1: 'b', length: 2 };\nArray.prototype.join.call(obj, '-')\n// 'a-b'\n")])])]),t("h4",{attrs:{id:"concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[e._v("#")]),e._v(" concat()")]),e._v(" "),t("p",[t("code",[e._v("concat")]),e._v("方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("['hello'].concat(['world'])\n// [\"hello\", \"world\"]\n\n['hello'].concat(['world'], ['!'])\n// [\"hello\", \"world\", \"!\"]\n\n[].concat({a: 1}, {b: 2})\n// [{ a: 1 }, { b: 2 }]\n\n[2].concat({a: 1})\n// [2, {a: 1}]\n")])])]),t("p",[e._v("除了数组作为参数，"),t("code",[e._v("concat")]),e._v("也接受其他类型的值作为参数，添加到目标数组尾部。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3].concat(4, 5, 6)\n// [1, 2, 3, 4, 5, 6]\n")])])]),t("p",[e._v("如果数组成员包括对象，"),t("code",[e._v("concat")]),e._v("方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是新数组拷贝的是对象的引用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { a: 1 };\nvar oldArray = [obj];\n\nvar newArray = oldArray.concat();\n\nobj.a = 2;\nnewArray[0].a // 2\n")])])]),t("p",[e._v("上面代码中，原数组包含一个对象，"),t("code",[e._v("concat")]),e._v("方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。")]),e._v(" "),t("h4",{attrs:{id:"reverse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[e._v("#")]),e._v(" reverse()")]),e._v(" "),t("p",[t("code",[e._v("reverse")]),e._v("方法用于颠倒排列数组元素，返回改变后的数组。注意，该方法将改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var a = [\'a\', \'b\', \'c\'];\n\na.reverse() // ["c", "b", "a"]\na // ["c", "b", "a"]\n')])])]),t("h4",{attrs:{id:"slice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[e._v("#")]),e._v(" slice()")]),e._v(" "),t("p",[t("code",[e._v("slice()")]),e._v("方法用于提取目标数组的一部分，返回一个新数组，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("arr.slice(start, end);\n")])])]),t("p",[e._v("它的第一个参数为起始位置（从0开始，会包括在返回的新数组之中），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var a = [\'a\', \'b\', \'c\'];\n\na.slice(0) // ["a", "b", "c"]\na.slice(1) // ["b", "c"]\na.slice(1, 2) // ["b"]\na.slice(2, 6) // ["c"]\na.slice() // ["a", "b", "c"]\n')])])]),t("p",[e._v("上面代码中，最后一个例子"),t("code",[e._v("slice()")]),e._v("没有参数，实际上等于返回一个原数组的拷贝。")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("slice()")]),e._v("方法的参数是负数，则表示倒数计算的位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c'];\na.slice(-2) // [\"b\", \"c\"]\na.slice(-2, -1) // [\"b\"]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("-2")]),e._v("表示倒数计算的第二个位置，"),t("code",[e._v("-1")]),e._v("表示倒数计算的第一个位置。")]),e._v(" "),t("p",[e._v("如果第一个参数大于等于数组长度，或者第二个参数小于第一个参数，则返回空数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c'];\na.slice(4) // []\na.slice(2, 1) // []\n")])])]),t("p",[t("code",[e._v("slice()")]),e._v("方法的一个重要应用，是将类似数组的对象转为真正的数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Array.prototype.slice.call({ 0: 'a', 1: 'b', length: 2 })\n// ['a', 'b']\n\nArray.prototype.slice.call(document.querySelectorAll(\"div\"));\nArray.prototype.slice.call(arguments);\n")])])]),t("p",[e._v("上面代码的参数都不是数组，但是通过"),t("code",[e._v("call")]),e._v("方法，在它们上面调用"),t("code",[e._v("slice()")]),e._v("方法，就可以把它们转为真正的数组。")]),e._v(" "),t("h4",{attrs:{id:"splice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[e._v("#")]),e._v(" splice()")]),e._v(" "),t("p",[t("code",[e._v("splice()")]),e._v("方法用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("arr.splice(start, count, addElement1, addElement2, ...);\n")])])]),t("p",[t("code",[e._v("splice")]),e._v("的第一个参数是删除的起始位置（从0开始），第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c', 'd', 'e', 'f'];\na.splice(4, 2) // [\"e\", \"f\"]\na // [\"a\", \"b\", \"c\", \"d\"]\n")])])]),t("p",[e._v("上面代码从原数组4号位置，删除了两个数组成员。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c', 'd', 'e', 'f'];\na.splice(4, 2, 1, 2) // [\"e\", \"f\"]\na // [\"a\", \"b\", \"c\", \"d\", 1, 2]\n")])])]),t("p",[e._v("上面代码除了删除成员，还插入了两个新成员。")]),e._v(" "),t("p",[e._v("起始位置如果是负数，就表示从倒数位置开始删除。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c', 'd', 'e', 'f'];\na.splice(-4, 2) // [\"c\", \"d\"]\n")])])]),t("p",[e._v("上面代码表示，从倒数第四个位置"),t("code",[e._v("c")]),e._v("开始删除两个成员。")]),e._v(" "),t("p",[e._v("如果只是单纯地插入元素，"),t("code",[e._v("splice")]),e._v("方法的第二个参数可以设为"),t("code",[e._v("0")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = [1, 1, 1];\n\na.splice(1, 0, 2) // []\na // [1, 2, 1, 1]\n")])])]),t("p",[e._v("如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = [1, 2, 3, 4];\na.splice(2) // [3, 4]\na // [1, 2]\n")])])]),t("h4",{attrs:{id:"sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[e._v("#")]),e._v(" sort()")]),e._v(" "),t("p",[t("code",[e._v("sort")]),e._v("方法对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("['d', 'c', 'b', 'a'].sort()\n// ['a', 'b', 'c', 'd']\n\n[4, 3, 2, 1].sort()\n// [1, 2, 3, 4]\n\n[11, 101].sort()\n// [101, 11]\n\n[10111, 1101, 111].sort()\n// [10111, 1101, 111]\n")])])]),t("p",[e._v("上面代码的最后两个例子，需要特殊注意。"),t("code",[e._v("sort()")]),e._v("方法不是按照大小排序，而是按照字典顺序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以"),t("code",[e._v("101")]),e._v("排在"),t("code",[e._v("11")]),e._v("的前面。")]),e._v(" "),t("p",[e._v("如果想让"),t("code",[e._v("sort")]),e._v("方法按照自定义方式排序，可以传入一个函数作为参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[10111, 1101, 111].sort(function (a, b) {\n  return a - b;\n})\n// [111, 1101, 10111]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("sort")]),e._v("的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于"),t("code",[e._v("0")]),e._v("，表示第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素前面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('[\n  { name: "张三", age: 30 },\n  { name: "李四", age: 24 },\n  { name: "王五", age: 28  }\n].sort(function (o1, o2) {\n  return o1.age - o2.age;\n})\n// [\n//   { name: "李四", age: 24 },\n//   { name: "王五", age: 28  },\n//   { name: "张三", age: 30 }\n// ]\n')])])]),t("p",[e._v("注意，自定义的排序函数应该返回数值，否则不同的浏览器可能有不同的实现，不能保证结果都一致。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// bad\n[1, 4, 2, 6, 0, 6, 2, 6].sort((a, b) => a > b)\n\n// good\n[1, 4, 2, 6, 0, 6, 2, 6].sort((a, b) => a - b)\n")])])]),t("p",[e._v("上面代码中，前一种排序算法返回的是布尔值，这是不推荐使用的。后一种是数值，才是更好的写法。")]),e._v(" "),t("h4",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" map()")]),e._v(" "),t("p",[t("code",[e._v("map()")]),e._v("方法将数组的所有成员依次传入参数函数，然后把每一次的执行结果组成一个新数组返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var numbers = [1, 2, 3];\n\nnumbers.map(function (n) {\n  return n + 1;\n});\n// [2, 3, 4]\n\nnumbers\n// [1, 2, 3]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("numbers")]),e._v("数组的所有成员依次执行参数函数，运行结果组成一个新数组返回，原数组没有变化。")]),e._v(" "),t("p",[t("code",[e._v("map()")]),e._v("方法接受一个函数作为参数。该函数调用时，"),t("code",[e._v("map()")]),e._v("方法向它传入三个参数：当前成员、当前位置和数组本身。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3].map(function(elem, index, arr) {\n  return elem * index;\n});\n// [0, 2, 6]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("map()")]),e._v("方法的回调函数有三个参数，"),t("code",[e._v("elem")]),e._v("为当前成员的值，"),t("code",[e._v("index")]),e._v("为当前成员的位置，"),t("code",[e._v("arr")]),e._v("为原数组（"),t("code",[e._v("[1, 2, 3]")]),e._v("）。")]),e._v(" "),t("p",[t("code",[e._v("map()")]),e._v("方法还可以接受第二个参数，用来绑定回调函数内部的"),t("code",[e._v("this")]),e._v("变量（详见《this 变量》一章）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = ['a', 'b', 'c'];\n\n[1, 2].map(function (e) {\n  return this[e];\n}, arr)\n// ['b', 'c']\n")])])]),t("p",[e._v("上面代码通过"),t("code",[e._v("map()")]),e._v("方法的第二个参数，将回调函数内部的"),t("code",[e._v("this")]),e._v("对象，指向"),t("code",[e._v("arr")]),e._v("数组。")]),e._v(" "),t("p",[e._v("如果数组有空位，"),t("code",[e._v("map()")]),e._v("方法的回调函数在这个位置不会执行，会跳过数组的空位。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var f = function (n) { return \'a\' };\n\n[1, undefined, 2].map(f) // ["a", "a", "a"]\n[1, null, 2].map(f) // ["a", "a", "a"]\n[1, , 2].map(f) // ["a", , "a"]\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("map()")]),e._v("方法不会跳过"),t("code",[e._v("undefined")]),e._v("和"),t("code",[e._v("null")]),e._v("，但是会跳过空位。")]),e._v(" "),t("h4",{attrs:{id:"foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[e._v("#")]),e._v(" forEach()")]),e._v(" "),t("p",[t("code",[e._v("forEach()")]),e._v("方法与"),t("code",[e._v("map()")]),e._v("方法很相似，也是对数组的所有成员依次执行参数函数。但是，"),t("code",[e._v("forEach()")]),e._v("方法不返回值，只用来操作数据。这就是说，如果数组遍历的目的是为了得到返回值，那么使用"),t("code",[e._v("map()")]),e._v("方法，否则使用"),t("code",[e._v("forEach()")]),e._v("方法。")]),e._v(" "),t("p",[t("code",[e._v("forEach()")]),e._v("的用法与"),t("code",[e._v("map()")]),e._v("方法一致，参数是一个函数，该函数同样接受三个参数：当前值、当前位置、整个数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function log(element, index, array) {\n  console.log('[' + index + '] = ' + element);\n}\n\n[2, 5, 9].forEach(log);\n// [0] = 2\n// [1] = 5\n// [2] = 9\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("forEach()")]),e._v("遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以不必使用"),t("code",[e._v("map()")]),e._v("方法。")]),e._v(" "),t("p",[t("code",[e._v("forEach()")]),e._v("方法也可以接受第二个参数，绑定参数函数的"),t("code",[e._v("this")]),e._v("变量。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var out = [];\n\n[1, 2, 3].forEach(function(elem) {\n  this.push(elem * elem);\n}, out);\n\nout // [1, 4, 9]\n")])])]),t("p",[e._v("上面代码中，空数组"),t("code",[e._v("out")]),e._v("是"),t("code",[e._v("forEach()")]),e._v("方法的第二个参数，结果，回调函数内部的"),t("code",[e._v("this")]),e._v("关键字就指向"),t("code",[e._v("out")]),e._v("。")]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("forEach()")]),e._v("方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用"),t("code",[e._v("for")]),e._v("循环。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [1, 2, 3];\n\nfor (var i = 0; i < arr.length; i++) {\n  if (arr[i] === 2) break;\n  console.log(arr[i]);\n}\n// 1\n")])])]),t("p",[e._v("上面代码中，执行到数组的第二个成员时，就会中断执行。"),t("code",[e._v("forEach()")]),e._v("方法做不到这一点。")]),e._v(" "),t("p",[t("code",[e._v("forEach()")]),e._v("方法也会跳过数组的空位。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var log = function (n) {\n  console.log(n + 1);\n};\n\n[1, undefined, 2].forEach(log)\n// 2\n// NaN\n// 3\n\n[1, null, 2].forEach(log)\n// 2\n// 1\n// 3\n\n[1, , 2].forEach(log)\n// 2\n// 3\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("forEach()")]),e._v("方法不会跳过"),t("code",[e._v("undefined")]),e._v("和"),t("code",[e._v("null")]),e._v("，但会跳过空位。")]),e._v(" "),t("h4",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[e._v("#")]),e._v(" filter()")]),e._v(" "),t("p",[t("code",[e._v("filter()")]),e._v("方法用于过滤数组成员，满足条件的成员组成一个新数组返回。")]),e._v(" "),t("p",[e._v("它的参数是一个函数，所有数组成员依次执行该函数，返回结果为"),t("code",[e._v("true")]),e._v("的成员组成一个新数组返回。该方法不会改变原数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3, 4, 5].filter(function (elem) {\n  return (elem > 3);\n})\n// [4, 5]\n")])])]),t("p",[e._v("上面代码将大于"),t("code",[e._v("3")]),e._v("的数组成员，作为一个新数组返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [0, 1, 'a', false];\n\narr.filter(Boolean)\n// [1, \"a\"]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("filter()")]),e._v("方法返回数组"),t("code",[e._v("arr")]),e._v("里面所有布尔值为"),t("code",[e._v("true")]),e._v("的成员。")]),e._v(" "),t("p",[t("code",[e._v("filter()")]),e._v("方法的参数函数可以接受三个参数：当前成员，当前位置和整个数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3, 4, 5].filter(function (elem, index, arr) {\n  return index % 2 === 0;\n});\n// [1, 3, 5]\n")])])]),t("p",[e._v("上面代码返回偶数位置的成员组成的新数组。")]),e._v(" "),t("p",[t("code",[e._v("filter()")]),e._v("方法还可以接受第二个参数，用来绑定参数函数内部的"),t("code",[e._v("this")]),e._v("变量。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { MAX: 3 };\nvar myFilter = function (item) {\n  if (item > this.MAX) return true;\n};\n\nvar arr = [2, 8, 3, 4, 1, 3, 2, 9];\narr.filter(myFilter, obj) // [8, 4, 9]\n")])])]),t("p",[e._v("上面代码中，过滤器"),t("code",[e._v("myFilter()")]),e._v("内部有"),t("code",[e._v("this")]),e._v("变量，它可以被"),t("code",[e._v("filter()")]),e._v("方法的第二个参数"),t("code",[e._v("obj")]),e._v("绑定，返回大于"),t("code",[e._v("3")]),e._v("的成员。")]),e._v(" "),t("h4",{attrs:{id:"some-every"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#some-every"}},[e._v("#")]),e._v(" some()，every()")]),e._v(" "),t("p",[e._v("这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件。")]),e._v(" "),t("p",[e._v("它们接受一个函数作为参数，所有数组成员依次执行该函数。该函数接受三个参数：当前成员、当前位置和整个数组，然后返回一个布尔值。")]),e._v(" "),t("p",[t("code",[e._v("some")]),e._v("方法是只要一个成员的返回值是"),t("code",[e._v("true")]),e._v("，则整个"),t("code",[e._v("some")]),e._v("方法的返回值就是"),t("code",[e._v("true")]),e._v("，否则返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [1, 2, 3, 4, 5];\narr.some(function (elem, index, arr) {\n  return elem >= 3;\n});\n// true\n")])])]),t("p",[e._v("上面代码中，如果数组"),t("code",[e._v("arr")]),e._v("有一个成员大于等于3，"),t("code",[e._v("some")]),e._v("方法就返回"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("every")]),e._v("方法是所有成员的返回值都是"),t("code",[e._v("true")]),e._v("，整个"),t("code",[e._v("every")]),e._v("方法才返回"),t("code",[e._v("true")]),e._v("，否则返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var arr = [1, 2, 3, 4, 5];\narr.every(function (elem, index, arr) {\n  return elem >= 3;\n});\n// false\n")])])]),t("p",[e._v("上面代码中，数组"),t("code",[e._v("arr")]),e._v("并非所有成员大于等于"),t("code",[e._v("3")]),e._v("，所以返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("p",[e._v("注意，对于空数组，"),t("code",[e._v("some")]),e._v("方法返回"),t("code",[e._v("false")]),e._v("，"),t("code",[e._v("every")]),e._v("方法返回"),t("code",[e._v("true")]),e._v("，回调函数都不会执行。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function isEven(x) { return x % 2 === 0 }\n\n[].some(isEven) // false\n[].every(isEven) // true\n")])])]),t("p",[t("code",[e._v("some")]),e._v("和"),t("code",[e._v("every")]),e._v("方法还可以接受第二个参数，用来绑定参数函数内部的"),t("code",[e._v("this")]),e._v("变量。")]),e._v(" "),t("h4",{attrs:{id:"reduce-reduceright"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reduce-reduceright"}},[e._v("#")]),e._v(" reduce()，reduceRight()")]),e._v(" "),t("p",[t("code",[e._v("reduce()")]),e._v("方法和"),t("code",[e._v("reduceRight()")]),e._v("方法依次处理数组的每个成员，最终累计为一个值。它们的差别是，"),t("code",[e._v("reduce()")]),e._v("是从左到右处理（从第一个成员到最后一个成员），"),t("code",[e._v("reduceRight()")]),e._v("则是从右到左（从最后一个成员到第一个成员），其他完全一样。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3, 4, 5].reduce(function (a, b) {\n  console.log(a, b);\n  return a + b;\n})\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//最后结果：15\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("reduce()")]),e._v("方法用来求出数组所有成员的和。"),t("code",[e._v("reduce()")]),e._v("的参数是一个函数，数组每个成员都会依次执行这个函数。如果数组有 n 个成员，这个参数函数就会执行 n - 1 次。")]),e._v(" "),t("ul",[t("li",[e._v("第一次执行："),t("code",[e._v("a")]),e._v("是数组的第一个成员"),t("code",[e._v("1")]),e._v("，"),t("code",[e._v("b")]),e._v("是数组的第二个成员"),t("code",[e._v("2")]),e._v("。")]),e._v(" "),t("li",[e._v("第二次执行："),t("code",[e._v("a")]),e._v("为上一轮的返回值"),t("code",[e._v("3")]),e._v("，"),t("code",[e._v("b")]),e._v("为第三个成员"),t("code",[e._v("3")]),e._v("。")]),e._v(" "),t("li",[e._v("第三次执行："),t("code",[e._v("a")]),e._v("为上一轮的返回值"),t("code",[e._v("6")]),e._v("，"),t("code",[e._v("b")]),e._v("为第四个成员"),t("code",[e._v("4")]),e._v("。")]),e._v(" "),t("li",[e._v("第四次执行："),t("code",[e._v("a")]),e._v("为上一轮返回值"),t("code",[e._v("10")]),e._v("，"),t("code",[e._v("b")]),e._v("为第五个成员"),t("code",[e._v("5")]),e._v("。至此所有成员遍历完成，整个方法的返回值就是最后一轮的返回值"),t("code",[e._v("15")]),e._v("。")])]),e._v(" "),t("p",[t("code",[e._v("reduce()")]),e._v("方法和"),t("code",[e._v("reduceRight()")]),e._v("方法的第一个参数都是一个函数。该函数接受以下四个参数。")]),e._v(" "),t("ol",[t("li",[e._v("累积变量。第一次执行时，默认为数组的第一个成员；以后每次执行时，都是上一轮的返回值。")]),e._v(" "),t("li",[e._v("当前变量。第一次执行时，默认为数组的第二个成员；以后每次执行时，都是下一个成员。")]),e._v(" "),t("li",[e._v("当前位置。一个整数，表示第二个参数（当前变量）的位置，默认为"),t("code",[e._v("1")]),e._v("。")]),e._v(" "),t("li",[e._v("原数组。")])]),e._v(" "),t("p",[e._v("这四个参数之中，只有前两个是必须的，后两个则是可选的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3, 4, 5].reduce(function (\n  a,   // 累积变量，必须\n  b,   // 当前变量，必须\n  i,   // 当前位置，可选\n  arr  // 原数组，可选\n) {\n  // ... ...\n")])])]),t("p",[e._v("如果要对累积变量指定初值，可以把它放在"),t("code",[e._v("reduce()")]),e._v("方法和"),t("code",[e._v("reduceRight()")]),e._v("方法的第二个参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[1, 2, 3, 4, 5].reduce(function (a, b) {\n  return a + b;\n}, 10);\n// 25\n")])])]),t("p",[e._v("上面代码指定参数"),t("code",[e._v("a")]),e._v("的初值为10，所以数组从10开始累加，最终结果为25。注意，这时"),t("code",[e._v("b")]),e._v("是从数组的第一个成员开始遍历，参数函数会执行5次。")]),e._v(" "),t("p",[e._v("建议总是加上第二个参数，这样比较符合直觉，每个数组成员都会依次执行"),t("code",[e._v("reduce()")]),e._v("方法的参数函数。另外，第二个参数可以防止空数组报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function add(prev, cur) {\n  return prev + cur;\n}\n\n[].reduce(add)\n// TypeError: Reduce of empty array with no initial value\n[].reduce(add, 1)\n// 1\n")])])]),t("p",[e._v("上面代码中，由于空数组取不到累积变量的初始值，"),t("code",[e._v("reduce()")]),e._v("方法会报错。这时，加上第二个参数，就能保证总是会返回一个值。")]),e._v(" "),t("p",[e._v("下面是一个"),t("code",[e._v("reduceRight()")]),e._v("方法的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function subtract(prev, cur) {\n  return prev - cur;\n}\n\n[3, 2, 1].reduce(subtract) // 0\n[3, 2, 1].reduceRight(subtract) // -4\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("reduce()")]),e._v("方法相当于"),t("code",[e._v("3")]),e._v("减去"),t("code",[e._v("2")]),e._v("再减去"),t("code",[e._v("1")]),e._v("，"),t("code",[e._v("reduceRight")]),e._v("方法相当于"),t("code",[e._v("1")]),e._v("减去"),t("code",[e._v("2")]),e._v("再减去"),t("code",[e._v("3")]),e._v("。")]),e._v(" "),t("p",[e._v("由于这两个方法会遍历数组，所以实际上可以用来做一些遍历相关的操作。比如，找出字符长度最长的数组成员。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function findLongest(entries) {\n  return entries.reduce(function (longest, entry) {\n    return entry.length > longest.length ? entry : longest;\n  }, '');\n}\n\nfindLongest(['aaa', 'bb', 'c']) // \"aaa\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("reduce()")]),e._v("的参数函数会将字符长度较长的那个数组成员，作为累积值。这导致遍历所有成员之后，累积值就是字符长度最长的那个成员。")]),e._v(" "),t("h4",{attrs:{id:"indexof-lastindexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexof-lastindexof"}},[e._v("#")]),e._v(" indexOf()，lastIndexOf()")]),e._v(" "),t("p",[t("code",[e._v("indexOf")]),e._v("方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回"),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = ['a', 'b', 'c'];\n\na.indexOf('b') // 1\na.indexOf('y') // -1\n")])])]),t("p",[t("code",[e._v("indexOf")]),e._v("方法还可以接受第二个参数，表示搜索的开始位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("['a', 'b', 'c'].indexOf('a', 1) // -1\n")])])]),t("p",[e._v("上面代码从1号位置开始搜索字符"),t("code",[e._v("a")]),e._v("，结果为"),t("code",[e._v("-1")]),e._v("，表示没有搜索到。")]),e._v(" "),t("p",[t("code",[e._v("lastIndexOf")]),e._v("方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回"),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var a = [2, 5, 9, 2];\na.lastIndexOf(2) // 3\na.lastIndexOf(7) // -1\n")])])]),t("p",[e._v("注意，这两个方法不能用来搜索"),t("code",[e._v("NaN")]),e._v("的位置，即它们无法确定数组成员是否包含"),t("code",[e._v("NaN")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[NaN].indexOf(NaN) // -1\n[NaN].lastIndexOf(NaN) // -1\n")])])]),t("p",[e._v("这是因为这两个方法内部，使用严格相等运算符（"),t("code",[e._v("===")]),e._v("）进行比较，而"),t("code",[e._v("NaN")]),e._v("是唯一一个不等于自身的值。")]),e._v(" "),t("h4",{attrs:{id:"链式使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链式使用"}},[e._v("#")]),e._v(" 链式使用")]),e._v(" "),t("p",[e._v("上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var users = [\n  {name: 'tom', email: 'tom@example.com'},\n  {name: 'peter', email: 'peter@example.com'}\n];\n\nusers\n.map(function (user) {\n  return user.email;\n})\n.filter(function (email) {\n  return /^t/.test(email);\n})\n.forEach(function (email) {\n  console.log(email);\n});\n// \"tom@example.com\"\n")])])]),t("p",[e._v("上面代码中，先产生一个所有 Email 地址组成的数组，然后再过滤出以"),t("code",[e._v("t")]),e._v("开头的 Email 地址，最后将它打印出来。")]),e._v(" "),t("h3",{attrs:{id:"参考链接-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-2"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Nicolas Bevacqua, "),t("a",{attrs:{href:"http://flippinawesome.org/2013/11/25/fun-with-javascript-native-array-functions/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fun with JavaScript Native Array Functions"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"包装对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包装对象"}},[e._v("#")]),e._v(" 包装对象")]),e._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),t("p",[e._v("对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。")]),e._v(" "),t("p",[e._v("所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的"),t("code",[e._v("Number")]),e._v("、"),t("code",[e._v("String")]),e._v("、"),t("code",[e._v("Boolean")]),e._v("三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var v1 = new Number(123);\nvar v2 = new String(\'abc\');\nvar v3 = new Boolean(true);\n\ntypeof v1 // "object"\ntypeof v2 // "object"\ntypeof v3 // "object"\n\nv1 === 123 // false\nv2 === \'abc\' // false\nv3 === true // false\n')])])]),t("p",[e._v("上面代码中，基于原始类型的值，生成了三个对应的包装对象。可以看到，"),t("code",[e._v("v1")]),e._v("、"),t("code",[e._v("v2")]),e._v("、"),t("code",[e._v("v3")]),e._v("都是对象，且与对应的简单类型值不相等。")]),e._v(" "),t("p",[e._v("包装对象的设计目的，首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。")]),e._v(" "),t("p",[t("code",[e._v("Number")]),e._v("、"),t("code",[e._v("String")]),e._v("和"),t("code",[e._v("Boolean")]),e._v("这三个原生对象，如果不作为构造函数调用（即调用时不加"),t("code",[e._v("new")]),e._v("），而是作为普通函数调用，常常用于将任意类型的值转为数值、字符串和布尔值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 字符串转为数值\nNumber('123') // 123\n\n// 数值转为字符串\nString(123) // \"123\"\n\n// 数值转为布尔值\nBoolean(123) // true\n")])])]),t("p",[e._v("上面这种数据类型的转换，详见《数据类型转换》一节。")]),e._v(" "),t("p",[e._v("总结一下，这三个对象作为构造函数使用（带有"),t("code",[e._v("new")]),e._v("）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有"),t("code",[e._v("new")]),e._v("），可以将任意类型的值，转为原始类型的值。")]),e._v(" "),t("h3",{attrs:{id:"实例方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-2"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("p",[e._v("三种包装对象各自提供了许多实例方法，详见后文。这里介绍两种它们共同具有、从"),t("code",[e._v("Object")]),e._v("对象继承的方法："),t("code",[e._v("valueOf()")]),e._v("和"),t("code",[e._v("toString()")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"valueof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#valueof"}},[e._v("#")]),e._v(" valueOf()")]),e._v(" "),t("p",[t("code",[e._v("valueOf()")]),e._v("方法返回包装对象实例对应的原始类型的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Number(123).valueOf()  // 123\nnew String('abc').valueOf() // \"abc\"\nnew Boolean(true).valueOf() // true\n")])])]),t("h4",{attrs:{id:"tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[e._v("#")]),e._v(" toString()")]),e._v(" "),t("p",[t("code",[e._v("toString()")]),e._v("方法返回对应的字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('new Number(123).toString() // "123"\nnew String(\'abc\').toString() // "abc"\nnew Boolean(true).toString() // "true"\n')])])]),t("h3",{attrs:{id:"原始类型与实例对象的自动转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始类型与实例对象的自动转换"}},[e._v("#")]),e._v(" 原始类型与实例对象的自动转换")]),e._v(" "),t("p",[e._v("某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。")]),e._v(" "),t("p",[e._v("比如，字符串可以调用"),t("code",[e._v("length")]),e._v("属性，返回字符串的长度。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.length // 3\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("abc")]),e._v("是一个字符串，本身不是对象，不能调用"),t("code",[e._v("length")]),e._v("属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用"),t("code",[e._v("length")]),e._v("属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var str = \'abc\';\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String {\n//   0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"\n// }\nstrObj.length // 3\n')])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("abc")]),e._v("的包装对象提供了多个属性，"),t("code",[e._v("length")]),e._v("只是其中之一。")]),e._v(" "),t("p",[e._v("自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s = 'Hello World';\ns.x = 123;\ns.x // undefined\n")])])]),t("p",[e._v("上面代码为字符串"),t("code",[e._v("s")]),e._v("添加了一个"),t("code",[e._v("x")]),e._v("属性，结果无效，总是返回"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("p",[e._v("另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象"),t("code",[e._v("String.prototype")]),e._v("上定义（参见《面向对象编程》章节）。")]),e._v(" "),t("h3",{attrs:{id:"自定义方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义方法"}},[e._v("#")]),e._v(" 自定义方法")]),e._v(" "),t("p",[e._v("除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。")]),e._v(" "),t("p",[e._v("比如，我们可以新增一个"),t("code",[e._v("double")]),e._v("方法，使得字符串和数字翻倍。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("String.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n'abc'.double()\n// abcabc\n\nNumber.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n(123).double() // 246\n")])])]),t("p",[e._v("上面代码在"),t("code",[e._v("String")]),e._v("和"),t("code",[e._v("Number")]),e._v("这两个对象的原型上面，分别自定义了一个方法，从而可以在所有实例对象上调用。注意，最后一行的"),t("code",[e._v("123")]),e._v("外面必须要加上圆括号，否则后面的点运算符（"),t("code",[e._v(".")]),e._v("）会被解释成小数点。")]),e._v(" "),t("h2",{attrs:{id:"boolean-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boolean-对象"}},[e._v("#")]),e._v(" Boolean 对象")]),e._v(" "),t("h3",{attrs:{id:"概述-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-3"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v("对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var b = new Boolean(true);\n\ntypeof b // "object"\nb.valueOf() // true\n')])])]),t("p",[e._v("上面代码的变量"),t("code",[e._v("b")]),e._v("是一个"),t("code",[e._v("Boolean")]),e._v("对象的实例，它的类型是对象，值为布尔值"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("注意，"),t("code",[e._v("false")]),e._v("对应的包装对象实例，布尔运算结果也是"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (new Boolean(false)) {\n  console.log('true');\n} // true\n\nif (new Boolean(false).valueOf()) {\n  console.log('true');\n} // 无输出\n")])])]),t("p",[e._v("上面代码的第一个例子之所以得到"),t("code",[e._v("true")]),e._v("，是因为"),t("code",[e._v("false")]),e._v("对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值"),t("code",[e._v("true")]),e._v("（因为所有对象对应的布尔值都是"),t("code",[e._v("true")]),e._v("）。而实例的"),t("code",[e._v("valueOf")]),e._v("方法，则返回实例对应的原始值，本例为"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"boolean-函数的类型转换作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boolean-函数的类型转换作用"}},[e._v("#")]),e._v(" Boolean 函数的类型转换作用")]),e._v(" "),t("p",[t("code",[e._v("Boolean")]),e._v("对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时"),t("code",[e._v("Boolean")]),e._v("就是一个单纯的工具方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean('') // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean('false') // true\nBoolean([]) // true\nBoolean({}) // true\nBoolean(function () {}) // true\nBoolean(/foo/) // true\n")])])]),t("p",[e._v("上面代码中几种得到"),t("code",[e._v("true")]),e._v("的情况，都值得认真记住。")]),e._v(" "),t("p",[e._v("顺便提一下，使用双重的否运算符（"),t("code",[e._v("!")]),e._v("）也可以将任意值转为对应的布尔值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("!!undefined // false\n!!null // false\n!!0 // false\n!!'' // false\n!!NaN // false\n\n!!1 // true\n!!'false' // true\n!![] // true\n!!{} // true\n!!function(){} // true\n!!/foo/ // true\n")])])]),t("p",[e._v("最后，对于一些特殊值，"),t("code",[e._v("Boolean")]),e._v("对象前面加不加"),t("code",[e._v("new")]),e._v("，会得到完全相反的结果，必须小心。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (Boolean(false)) {\n  console.log('true');\n} // 无输出\n\nif (new Boolean(false)) {\n  console.log('true');\n} // true\n\nif (Boolean(null)) {\n  console.log('true');\n} // 无输出\n\nif (new Boolean(null)) {\n  console.log('true');\n} // true\n")])])]),t("h2",{attrs:{id:"number-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-对象"}},[e._v("#")]),e._v(" Number 对象")]),e._v(" "),t("h3",{attrs:{id:"概述-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-4"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[t("code",[e._v("Number")]),e._v("对象是数值对应的包装对象，可以作为构造函数使用，也可以作为工具函数使用。")]),e._v(" "),t("p",[e._v("作为构造函数时，它用于生成值为数值的对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var n = new Number(1);\ntypeof n // "object"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("Number")]),e._v("对象作为构造函数使用，返回一个值为"),t("code",[e._v("1")]),e._v("的对象。")]),e._v(" "),t("p",[e._v("作为工具函数时，它可以将任何类型的值转为数值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Number(true) // 1\n")])])]),t("p",[e._v("上面代码将布尔值"),t("code",[e._v("true")]),e._v("转为数值"),t("code",[e._v("1")]),e._v("。"),t("code",[e._v("Number")]),e._v("作为工具函数的用法，详见《数据类型转换》一章。")]),e._v(" "),t("h3",{attrs:{id:"静态属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态属性"}},[e._v("#")]),e._v(" 静态属性")]),e._v(" "),t("p",[t("code",[e._v("Number")]),e._v("对象拥有以下一些静态属性（即直接定义在"),t("code",[e._v("Number")]),e._v("对象上的属性，而不是定义在实例上的属性）。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Number.POSITIVE_INFINITY")]),e._v("：正的无限，指向"),t("code",[e._v("Infinity")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Number.NEGATIVE_INFINITY")]),e._v("：负的无限，指向"),t("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Number.NaN")]),e._v("：表示非数值，指向"),t("code",[e._v("NaN")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Number.MIN_VALUE")]),e._v("：表示最小的正数（即最接近0的正数，在64位浮点数体系中为"),t("code",[e._v("5e-324")]),e._v("），相应的，最接近0的负数为"),t("code",[e._v("-Number.MIN_VALUE")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v("：表示能够精确表示的最大整数，即"),t("code",[e._v("9007199254740991")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Number.MIN_SAFE_INTEGER")]),e._v("：表示能够精确表示的最小整数，即"),t("code",[e._v("-9007199254740991")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Number.POSITIVE_INFINITY // Infinity\nNumber.NEGATIVE_INFINITY // -Infinity\nNumber.NaN // NaN\n\nNumber.MAX_VALUE\n// 1.7976931348623157e+308\nNumber.MAX_VALUE < Infinity\n// true\n\nNumber.MIN_VALUE\n// 5e-324\nNumber.MIN_VALUE > 0\n// true\n\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n")])])]),t("h3",{attrs:{id:"实例方法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-3"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("p",[t("code",[e._v("Number")]),e._v("对象有4个实例方法，都跟将数值转换成指定格式有关。")]),e._v(" "),t("h4",{attrs:{id:"number-prototype-tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tostring"}},[e._v("#")]),e._v(" Number.prototype.toString()")]),e._v(" "),t("p",[t("code",[e._v("Number")]),e._v("对象部署了自己的"),t("code",[e._v("toString")]),e._v("方法，用来将一个数值转为字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(10).toString() // "10"\n')])])]),t("p",[t("code",[e._v("toString")]),e._v("方法可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(10).toString(2) // "1010"\n(10).toString(8) // "12"\n(10).toString(16) // "a"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("10")]),e._v("一定要放在括号里，这样表明后面的点表示调用对象属性。如果不加括号，这个点会被 JavaScript 引擎解释成小数点，从而报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("10.toString(2)\n// SyntaxError: Unexpected token ILLEGAL\n")])])]),t("p",[e._v("只要能够让 JavaScript 引擎不混淆小数点和对象的点运算符，各种写法都能用。除了为"),t("code",[e._v("10")]),e._v("加上括号，还可以在"),t("code",[e._v("10")]),e._v("后面加两个点，JavaScript 会把第一个点理解成小数点（即"),t("code",[e._v("10.0")]),e._v("），把第二个点理解成调用对象属性，从而得到正确结果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('10..toString(2)\n// "1010"\n\n// 其他方法还包括\n10 .toString(2) // "1010"\n10.0.toString(2) // "1010"\n')])])]),t("p",[e._v("这实际上意味着，可以直接对一个小数使用"),t("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('10.5.toString() // "10.5"\n10.5.toString(2) // "1010.1"\n10.5.toString(8) // "12.4"\n10.5.toString(16) // "a.8"\n')])])]),t("p",[e._v("通过方括号运算符也可以调用"),t("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("10['toString'](2) // \"1010\"\n")])])]),t("p",[t("code",[e._v("toString")]),e._v("方法只能将十进制的数，转为其他进制的字符串。如果要将其他进制的数，转回十进制，需要使用"),t("code",[e._v("parseInt")]),e._v("方法。")]),e._v(" "),t("h4",{attrs:{id:"number-prototype-tofixed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tofixed"}},[e._v("#")]),e._v(" Number.prototype.toFixed()")]),e._v(" "),t("p",[t("code",[e._v("toFixed()")]),e._v("方法先将一个数转为指定位数的小数，然后返回这个小数对应的字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(10).toFixed(2) // "10.00"\n10.005.toFixed(2) // "10.01"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("10")]),e._v("和"),t("code",[e._v("10.005")]),e._v("先转成2位小数，然后转成字符串。其中"),t("code",[e._v("10")]),e._v("必须放在括号里，否则后面的点会被处理成小数点。")]),e._v(" "),t("p",[t("code",[e._v("toFixed()")]),e._v("方法的参数为小数位数，有效范围为0到100，超出这个范围将抛出 RangeError 错误。")]),e._v(" "),t("p",[e._v("由于浮点数的原因，小数"),t("code",[e._v("5")]),e._v("的四舍五入是不确定的，使用的时候必须小心。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(10.055).toFixed(2) // 10.05\n(10.005).toFixed(2) // 10.01\n")])])]),t("h4",{attrs:{id:"number-prototype-toexponential"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-toexponential"}},[e._v("#")]),e._v(" Number.prototype.toExponential()")]),e._v(" "),t("p",[t("code",[e._v("toExponential")]),e._v("方法用于将一个数转为科学计数法形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(10).toExponential()  // "1e+1"\n(10).toExponential(1) // "1.0e+1"\n(10).toExponential(2) // "1.00e+1"\n\n(1234).toExponential()  // "1.234e+3"\n(1234).toExponential(1) // "1.2e+3"\n(1234).toExponential(2) // "1.23e+3"\n')])])]),t("p",[t("code",[e._v("toExponential")]),e._v("方法的参数是小数点后有效数字的位数，范围为0到100，超出这个范围，会抛出一个 RangeError 错误。")]),e._v(" "),t("h4",{attrs:{id:"number-prototype-toprecision"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-toprecision"}},[e._v("#")]),e._v(" Number.prototype.toPrecision()")]),e._v(" "),t("p",[t("code",[e._v("Number.prototype.toPrecision()")]),e._v("方法用于将一个数转为指定位数的有效数字。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(12.34).toPrecision(1) // "1e+1"\n(12.34).toPrecision(2) // "12"\n(12.34).toPrecision(3) // "12.3"\n(12.34).toPrecision(4) // "12.34"\n(12.34).toPrecision(5) // "12.340"\n')])])]),t("p",[e._v("该方法的参数为有效数字的位数，范围是1到100，超出这个范围会抛出 RangeError 错误。")]),e._v(" "),t("p",[e._v("该方法用于四舍五入时不太可靠，跟浮点数不是精确储存有关。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('(12.35).toPrecision(3) // "12.3"\n(12.25).toPrecision(3) // "12.3"\n(12.15).toPrecision(3) // "12.2"\n(12.45).toPrecision(3) // "12.4"\n')])])]),t("h4",{attrs:{id:"number-prototype-tolocalestring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number-prototype-tolocalestring"}},[e._v("#")]),e._v(" Number.prototype.toLocaleString()")]),e._v(" "),t("p",[t("code",[e._v("Number.prototype.toLocaleString()")]),e._v("方法接受一个地区码作为参数，返回一个字符串，表示当前数字在该地区的当地书写形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(123).toLocaleString('zh-Hans-CN-u-nu-hanidec')\n// \"一二三\"\n")])])]),t("p",[e._v("该方法还可以接受第二个参数配置对象，用来定制指定用途的返回字符串。该对象的"),t("code",[e._v("style")]),e._v("属性指定输出样式，默认值是"),t("code",[e._v("decimal")]),e._v("，表示输出十进制形式。如果值为"),t("code",[e._v("percent")]),e._v("，表示输出百分数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(123).toLocaleString('zh-Hans-CN', { style: 'percent' })\n// \"12,300%\"\n")])])]),t("p",[e._v("如果"),t("code",[e._v("style")]),e._v("属性的值为"),t("code",[e._v("currency")]),e._v("，则可以搭配"),t("code",[e._v("currency")]),e._v("属性，输出指定格式的货币字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(123).toLocaleString('zh-Hans-CN', { style: 'currency', currency: 'CNY' })\n// \"￥123.00\"\n\n(123).toLocaleString('de-DE', { style: 'currency', currency: 'EUR' })\n// \"123,00 €\"\n\n(123).toLocaleString('en-US', { style: 'currency', currency: 'USD' })\n// \"$123.00\"\n")])])]),t("p",[e._v("如果"),t("code",[e._v("Number.prototype.toLocaleString()")]),e._v("省略了参数，则由浏览器自行决定如何处理，通常会使用操作系统的地区设定。注意，该方法如果使用浏览器不认识的地区码，会抛出一个错误。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(123).toLocaleString('123') // 出错\n")])])]),t("h3",{attrs:{id:"自定义方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义方法-2"}},[e._v("#")]),e._v(" 自定义方法")]),e._v(" "),t("p",[e._v("与其他对象一样，"),t("code",[e._v("Number.prototype")]),e._v("对象上面可以自定义方法，被"),t("code",[e._v("Number")]),e._v("的实例继承。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Number.prototype.add = function (x) {\n  return this + x;\n};\n\n8['add'](2) // 10\n")])])]),t("p",[e._v("上面代码为"),t("code",[e._v("Number")]),e._v("对象实例定义了一个"),t("code",[e._v("add")]),e._v("方法。在数值上调用某个方法，数值会自动转为"),t("code",[e._v("Number")]),e._v("的实例对象，所以就可以调用"),t("code",[e._v("add")]),e._v("方法了。由于"),t("code",[e._v("add")]),e._v("方法返回的还是数值，所以可以链式运算。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Number.prototype.subtract = function (x) {\n  return this - x;\n};\n\n(8).add(2).subtract(4)\n// 6\n")])])]),t("p",[e._v("上面代码在"),t("code",[e._v("Number")]),e._v("对象的实例上部署了"),t("code",[e._v("subtract")]),e._v("方法，它可以与"),t("code",[e._v("add")]),e._v("方法链式调用。")]),e._v(" "),t("p",[e._v("我们还可以部署更复杂的方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Number.prototype.iterate = function () {\n  var result = [];\n  for (var i = 0; i <= this; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n(8).iterate()\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]\n")])])]),t("p",[e._v("上面代码在"),t("code",[e._v("Number")]),e._v("对象的原型上部署了"),t("code",[e._v("iterate")]),e._v("方法，将一个数值自动遍历为一个数组。")]),e._v(" "),t("p",[e._v("注意，数值的自定义方法，只能定义在它的原型对象"),t("code",[e._v("Number.prototype")]),e._v("上面，数值本身是无法自定义属性的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var n = 1;\nn.x = 1;\nn.x // undefined\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("n")]),e._v("是一个原始类型的数值。直接在它上面新增一个属性"),t("code",[e._v("x")]),e._v("，不会报错，但毫无作用，总是返回"),t("code",[e._v("undefined")]),e._v("。这是因为一旦被调用属性，"),t("code",[e._v("n")]),e._v("就自动转为"),t("code",[e._v("Number")]),e._v("的实例对象，调用结束后，该对象自动销毁。所以，下一次调用"),t("code",[e._v("n")]),e._v("的属性时，实际取到的是另一个对象，属性"),t("code",[e._v("x")]),e._v("当然就读不出来。")]),e._v(" "),t("h2",{attrs:{id:"string-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-对象"}},[e._v("#")]),e._v(" String 对象")]),e._v(" "),t("h3",{attrs:{id:"概述-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-5"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[t("code",[e._v("String")]),e._v("对象是 JavaScript 原生提供的三个包装对象之一，用来生成字符串对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var s1 = \'abc\';\nvar s2 = new String(\'abc\');\n\ntypeof s1 // "string"\ntypeof s2 // "object"\n\ns2.valueOf() // "abc"\n')])])]),t("p",[e._v("上面代码中，变量"),t("code",[e._v("s1")]),e._v("是字符串，"),t("code",[e._v("s2")]),e._v("是对象。由于"),t("code",[e._v("s2")]),e._v("是字符串对象，"),t("code",[e._v("s2.valueOf")]),e._v("方法返回的就是它所对应的原始字符串。")]),e._v(" "),t("p",[e._v("字符串对象是一个类似数组的对象（很像数组，但不是数组）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('new String(\'abc\')\n// String {0: "a", 1: "b", 2: "c", length: 3}\n\n(new String(\'abc\'))[1] // "b"\n')])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("abc")]),e._v("对应的字符串对象，有数值键（"),t("code",[e._v("0")]),e._v("、"),t("code",[e._v("1")]),e._v("、"),t("code",[e._v("2")]),e._v("）和"),t("code",[e._v("length")]),e._v("属性，所以可以像数组那样取值。")]),e._v(" "),t("p",[e._v("除了用作构造函数，"),t("code",[e._v("String")]),e._v("对象还可以当作工具方法使用，将任意类型的值转为字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String(true) // "true"\nString(5) // "5"\n')])])]),t("p",[e._v("上面代码将布尔值"),t("code",[e._v("true")]),e._v("和数值"),t("code",[e._v("5")]),e._v("，分别转换为字符串。")]),e._v(" "),t("h3",{attrs:{id:"静态方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-2"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),t("h4",{attrs:{id:"string-fromcharcode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-fromcharcode"}},[e._v("#")]),e._v(" String.fromCharCode()")]),e._v(" "),t("p",[t("code",[e._v("String")]),e._v("对象提供的静态方法（即定义在对象本身，而不是定义在对象实例的方法），主要是"),t("code",[e._v("String.fromCharCode()")]),e._v("。该方法的参数是一个或多个数值，代表 Unicode 码点，返回值是这些码点组成的字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String.fromCharCode() // ""\nString.fromCharCode(97) // "a"\nString.fromCharCode(104, 101, 108, 108, 111)\n// "hello"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("String.fromCharCode")]),e._v("方法的参数为空，就返回空字符串；否则，返回参数对应的 Unicode 字符串。")]),e._v(" "),t("p",[e._v("注意，该方法不支持 Unicode 码点大于"),t("code",[e._v("0xFFFF")]),e._v("的字符，即传入的参数不能大于"),t("code",[e._v("0xFFFF")]),e._v("（即十进制的 65535）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String.fromCharCode(0x20BB7)\n// "ஷ"\nString.fromCharCode(0x20BB7) === String.fromCharCode(0x0BB7)\n// true\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("String.fromCharCode")]),e._v("参数"),t("code",[e._v("0x20BB7")]),e._v("大于"),t("code",[e._v("0xFFFF")]),e._v("，导致返回结果出错。"),t("code",[e._v("0x20BB7")]),e._v("对应的字符是汉字"),t("code",[e._v("𠮷")]),e._v("，但是返回结果却是另一个字符（码点"),t("code",[e._v("0x0BB7")]),e._v("）。这是因为"),t("code",[e._v("String.fromCharCode")]),e._v("发现参数值大于"),t("code",[e._v("0xFFFF")]),e._v("，就会忽略多出的位（即忽略"),t("code",[e._v("0x20BB7")]),e._v("里面的"),t("code",[e._v("2")]),e._v("）。")]),e._v(" "),t("p",[e._v("这种现象的根本原因在于，码点大于"),t("code",[e._v("0xFFFF")]),e._v("的字符占用四个字节，而 JavaScript 默认支持两个字节的字符。这种情况下，必须把"),t("code",[e._v("0x20BB7")]),e._v("拆成两个字符表示。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('String.fromCharCode(0xD842, 0xDFB7)\n// "𠮷"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("0x20BB7")]),e._v("拆成两个字符"),t("code",[e._v("0xD842")]),e._v("和"),t("code",[e._v("0xDFB7")]),e._v("（即两个两字节字符，合成一个四字节字符），就能得到正确的结果。码点大于"),t("code",[e._v("0xFFFF")]),e._v("的字符的四字节表示法，由 UTF-16 编码方法决定。")]),e._v(" "),t("h3",{attrs:{id:"实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-length"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-length"}},[e._v("#")]),e._v(" String.prototype.length")]),e._v(" "),t("p",[e._v("字符串实例的"),t("code",[e._v("length")]),e._v("属性返回字符串的长度。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.length // 3\n")])])]),t("h3",{attrs:{id:"实例方法-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-4"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-charat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-charat"}},[e._v("#")]),e._v(" String.prototype.charAt()")]),e._v(" "),t("p",[t("code",[e._v("charAt")]),e._v("方法返回指定位置的字符，参数是从"),t("code",[e._v("0")]),e._v("开始编号的位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var s = new String(\'abc\');\n\ns.charAt(1) // "b"\ns.charAt(s.length - 1) // "c"\n')])])]),t("p",[e._v("这个方法完全可以用数组下标替代。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.charAt(1) // \"b\"\n'abc'[1] // \"b\"\n")])])]),t("p",[e._v("如果参数为负数，或大于等于字符串的长度，"),t("code",[e._v("charAt")]),e._v("返回空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.charAt(-1) // \"\"\n'abc'.charAt(3) // \"\"\n")])])]),t("h4",{attrs:{id:"string-prototype-charcodeat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-charcodeat"}},[e._v("#")]),e._v(" String.prototype.charCodeAt()")]),e._v(" "),t("p",[t("code",[e._v("charCodeAt()")]),e._v("方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于"),t("code",[e._v("String.fromCharCode()")]),e._v("的逆操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.charCodeAt(1) // 98\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("abc")]),e._v("的"),t("code",[e._v("1")]),e._v("号位置的字符是"),t("code",[e._v("b")]),e._v("，它的 Unicode 码点是"),t("code",[e._v("98")]),e._v("。")]),e._v(" "),t("p",[e._v("如果没有任何参数，"),t("code",[e._v("charCodeAt")]),e._v("返回首字符的 Unicode 码点。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.charCodeAt() // 97\n")])])]),t("p",[e._v("如果参数为负数，或大于等于字符串的长度，"),t("code",[e._v("charCodeAt")]),e._v("返回"),t("code",[e._v("NaN")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abc'.charCodeAt(-1) // NaN\n'abc'.charCodeAt(4) // NaN\n")])])]),t("p",[e._v("注意，"),t("code",[e._v("charCodeAt")]),e._v("方法返回的 Unicode 码点不会大于65536（0xFFFF），也就是说，只返回两个字节的字符的码点。如果遇到码点大于 65536 的字符（四个字节的字符），必须连续使用两次"),t("code",[e._v("charCodeAt")]),e._v("，不仅读入"),t("code",[e._v("charCodeAt(i)")]),e._v("，还要读入"),t("code",[e._v("charCodeAt(i+1)")]),e._v("，将两个值放在一起，才能得到准确的字符。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-concat"}},[e._v("#")]),e._v(" String.prototype.concat()")]),e._v(" "),t("p",[t("code",[e._v("concat")]),e._v("方法用于连接两个字符串，返回一个新字符串，不改变原字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s1 = 'abc';\nvar s2 = 'def';\n\ns1.concat(s2) // \"abcdef\"\ns1 // \"abc\"\n")])])]),t("p",[e._v("该方法可以接受多个参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'a'.concat('b', 'c') // \"abc\"\n")])])]),t("p",[e._v("如果参数不是字符串，"),t("code",[e._v("concat")]),e._v("方法会将其先转为字符串，然后再连接。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var one = 1;\nvar two = 2;\nvar three = '3';\n\n''.concat(one, two, three) // \"123\"\none + two + three // \"33\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("concat")]),e._v("方法将参数先转成字符串再连接，所以返回的是一个三个字符的字符串。作为对比，加号运算符在两个运算数都是数值时，不会转换类型，所以返回的是一个两个字符的字符串。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-slice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-slice"}},[e._v("#")]),e._v(" String.prototype.slice()")]),e._v(" "),t("p",[t("code",[e._v("slice()")]),e._v("方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.slice(0, 4) // \"Java\"\n")])])]),t("p",[e._v("如果省略第二个参数，则表示子字符串一直到原字符串结束。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.slice(4) // \"Script\"\n")])])]),t("p",[e._v("如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.slice(-6) // \"Script\"\n'JavaScript'.slice(0, -6) // \"Java\"\n'JavaScript'.slice(-2, -1) // \"p\"\n")])])]),t("p",[e._v("如果第一个参数大于第二个参数（正数情况下），"),t("code",[e._v("slice()")]),e._v("方法返回一个空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.slice(2, 1) // \"\"\n")])])]),t("h4",{attrs:{id:"string-prototype-substring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-substring"}},[e._v("#")]),e._v(" String.prototype.substring()")]),e._v(" "),t("p",[t("code",[e._v("substring")]),e._v("方法用于从原字符串取出子字符串并返回，不改变原字符串，跟"),t("code",[e._v("slice")]),e._v("方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substring(0, 4) // \"Java\"\n")])])]),t("p",[e._v("如果省略第二个参数，则表示子字符串一直到原字符串的结束。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substring(4) // \"Script\"\n")])])]),t("p",[e._v("如果第一个参数大于第二个参数，"),t("code",[e._v("substring")]),e._v("方法会自动更换两个参数的位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substring(10, 4) // \"Script\"\n// 等同于\n'JavaScript'.substring(4, 10) // \"Script\"\n")])])]),t("p",[e._v("上面代码中，调换"),t("code",[e._v("substring")]),e._v("方法的两个参数，都得到同样的结果。")]),e._v(" "),t("p",[e._v("如果参数是负数，"),t("code",[e._v("substring")]),e._v("方法会自动将负数转为0。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substring(-3) // \"JavaScript\"\n'JavaScript'.substring(4, -3) // \"Java\"\n")])])]),t("p",[e._v("上面代码中，第二个例子的参数"),t("code",[e._v("-3")]),e._v("会自动变成"),t("code",[e._v("0")]),e._v("，等同于"),t("code",[e._v("'JavaScript'.substring(4, 0)")]),e._v("。由于第二个参数小于第一个参数，会自动互换位置，所以返回"),t("code",[e._v("Java")]),e._v("。")]),e._v(" "),t("p",[e._v("由于这些规则违反直觉，因此不建议使用"),t("code",[e._v("substring")]),e._v("方法，应该优先使用"),t("code",[e._v("slice")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-substr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-substr"}},[e._v("#")]),e._v(" String.prototype.substr()")]),e._v(" "),t("p",[t("code",[e._v("substr")]),e._v("方法用于从原字符串取出子字符串并返回，不改变原字符串，跟"),t("code",[e._v("slice")]),e._v("和"),t("code",[e._v("substring")]),e._v("方法的作用相同。")]),e._v(" "),t("p",[t("code",[e._v("substr")]),e._v("方法的第一个参数是子字符串的开始位置（从0开始计算），第二个参数是子字符串的长度。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substr(4, 6) // \"Script\"\n")])])]),t("p",[e._v("如果省略第二个参数，则表示子字符串一直到原字符串的结束。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substr(4) // \"Script\"\n")])])]),t("p",[e._v("如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'JavaScript'.substr(-6) // \"Script\"\n'JavaScript'.substr(4, -1) // \"\"\n")])])]),t("p",[e._v("上面代码中，第二个例子的参数"),t("code",[e._v("-1")]),e._v("自动转为"),t("code",[e._v("0")]),e._v("，表示子字符串长度为"),t("code",[e._v("0")]),e._v("，所以返回空字符串。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-indexof-string-prototype-lastindexof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-indexof-string-prototype-lastindexof"}},[e._v("#")]),e._v(" String.prototype.indexOf()，String.prototype.lastIndexOf()")]),e._v(" "),t("p",[t("code",[e._v("indexOf")]),e._v("方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回"),t("code",[e._v("-1")]),e._v("，就表示不匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'hello world'.indexOf('o') // 4\n'JavaScript'.indexOf('script') // -1\n")])])]),t("p",[t("code",[e._v("indexOf")]),e._v("方法还可以接受第二个参数，表示从该位置开始向后匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'hello world'.indexOf('o', 6) // 7\n")])])]),t("p",[t("code",[e._v("lastIndexOf")]),e._v("方法的用法跟"),t("code",[e._v("indexOf")]),e._v("方法一致，主要的区别是"),t("code",[e._v("lastIndexOf")]),e._v("从尾部开始匹配，"),t("code",[e._v("indexOf")]),e._v("则是从头部开始匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'hello world'.lastIndexOf('o') // 7\n")])])]),t("p",[e._v("另外，"),t("code",[e._v("lastIndexOf")]),e._v("的第二个参数表示从该位置起向前匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'hello world'.lastIndexOf('o', 6) // 4\n")])])]),t("h4",{attrs:{id:"string-prototype-trim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-trim"}},[e._v("#")]),e._v(" String.prototype.trim()")]),e._v(" "),t("p",[t("code",[e._v("trim")]),e._v("方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'  hello world  '.trim()\n// \"hello world\"\n")])])]),t("p",[e._v("该方法去除的不仅是空格，还包括制表符（"),t("code",[e._v("\\t")]),e._v("、"),t("code",[e._v("\\v")]),e._v("）、换行符（"),t("code",[e._v("\\n")]),e._v("）和回车符（"),t("code",[e._v("\\r")]),e._v("）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'\\r\\nabc \\t'.trim() // 'abc'\n")])])]),t("h4",{attrs:{id:"string-prototype-tolowercase-string-prototype-touppercase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-tolowercase-string-prototype-touppercase"}},[e._v("#")]),e._v(" String.prototype.toLowerCase()，String.prototype.toUpperCase()")]),e._v(" "),t("p",[t("code",[e._v("toLowerCase")]),e._v("方法用于将一个字符串全部转为小写，"),t("code",[e._v("toUpperCase")]),e._v("则是全部转为大写。它们都返回一个新字符串，不改变原字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'Hello World'.toLowerCase()\n// \"hello world\"\n\n'Hello World'.toUpperCase()\n// \"HELLO WORLD\"\n")])])]),t("h4",{attrs:{id:"string-prototype-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[e._v("#")]),e._v(" String.prototype.match()")]),e._v(" "),t("p",[t("code",[e._v("match")]),e._v("方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'cat, bat, sat, fat'.match('at') // [\"at\"]\n'cat, bat, sat, fat'.match('xt') // null\n")])])]),t("p",[e._v("返回的数组还有"),t("code",[e._v("index")]),e._v("属性和"),t("code",[e._v("input")]),e._v("属性，分别表示匹配字符串开始的位置和原始字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var matches = 'cat, bat, sat, fat'.match('at');\nmatches.index // 1\nmatches.input // \"cat, bat, sat, fat\"\n")])])]),t("p",[t("code",[e._v("match")]),e._v("方法还可以使用正则表达式作为参数，详见《正则表达式》一章。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-search-string-prototype-replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search-string-prototype-replace"}},[e._v("#")]),e._v(" String.prototype.search()，String.prototype.replace()")]),e._v(" "),t("p",[t("code",[e._v("search")]),e._v("方法的用法基本等同于"),t("code",[e._v("match")]),e._v("，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回"),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'cat, bat, sat, fat'.search('at') // 1\n")])])]),t("p",[t("code",[e._v("search")]),e._v("方法还可以使用正则表达式作为参数，详见《正则表达式》一节。")]),e._v(" "),t("p",[t("code",[e._v("replace")]),e._v("方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有"),t("code",[e._v("g")]),e._v("修饰符的正则表达式）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'aaa'.replace('a', 'b') // \"baa\"\n")])])]),t("p",[t("code",[e._v("replace")]),e._v("方法还可以使用正则表达式作为参数，详见《正则表达式》一节。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-split"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split"}},[e._v("#")]),e._v(" String.prototype.split()")]),e._v(" "),t("p",[t("code",[e._v("split")]),e._v("方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\'a|b|c\'.split(\'|\') // ["a", "b", "c"]\n')])])]),t("p",[e._v("如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\'a|b|c\'.split(\'\') // ["a", "|", "b", "|", "c"]\n')])])]),t("p",[e._v("如果省略参数，则返回数组的唯一成员就是原字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'a|b|c'.split() // [\"a|b|c\"]\n")])])]),t("p",[e._v("如果满足分割规则的两个部分紧邻着（即两个分割符中间没有其他字符），则返回数组之中会有一个空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'a||c'.split('|') // ['a', '', 'c']\n")])])]),t("p",[e._v("如果满足分割规则的部分处于字符串的开头或结尾（即它的前面或后面没有其他字符），则返回数组的第一个或最后一个成员是一个空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\'|b|c\'.split(\'|\') // ["", "b", "c"]\n\'a|b|\'.split(\'|\') // ["a", "b", ""]\n')])])]),t("p",[t("code",[e._v("split")]),e._v("方法还可以接受第二个参数，限定返回数组的最大成员数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'a|b|c'.split('|', 0) // []\n'a|b|c'.split('|', 1) // [\"a\"]\n'a|b|c'.split('|', 2) // [\"a\", \"b\"]\n'a|b|c'.split('|', 3) // [\"a\", \"b\", \"c\"]\n'a|b|c'.split('|', 4) // [\"a\", \"b\", \"c\"]\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("split")]),e._v("方法的第二个参数，决定了返回数组的成员数。")]),e._v(" "),t("p",[t("code",[e._v("split")]),e._v("方法还可以使用正则表达式作为参数，详见《正则表达式》一节。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-localecompare"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-localecompare"}},[e._v("#")]),e._v(" String.prototype.localeCompare()")]),e._v(" "),t("p",[t("code",[e._v("localeCompare")]),e._v("方法用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'apple'.localeCompare('banana') // -1\n'apple'.localeCompare('apple') // 0\n")])])]),t("p",[e._v("该方法的最大特点，就是会考虑自然语言的顺序。举例来说，正常情况下，大写的英文字母小于小写字母。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'B' > 'a' // false\n")])])]),t("p",[e._v("上面代码中，字母"),t("code",[e._v("B")]),e._v("小于字母"),t("code",[e._v("a")]),e._v("。因为 JavaScript 采用的是 Unicode 码点比较，"),t("code",[e._v("B")]),e._v("的码点是66，而"),t("code",[e._v("a")]),e._v("的码点是97。")]),e._v(" "),t("p",[e._v("但是，"),t("code",[e._v("localeCompare")]),e._v("方法会考虑自然语言的排序情况，将"),t("code",[e._v("B")]),e._v("排在"),t("code",[e._v("a")]),e._v("的前面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'B'.localeCompare('a') // 1\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("localeCompare")]),e._v("方法返回整数1，表示"),t("code",[e._v("B")]),e._v("较大。")]),e._v(" "),t("p",[t("code",[e._v("localeCompare")]),e._v("还可以有第二个参数，指定所使用的语言（默认是英语），然后根据该语言的规则进行比较。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'ä'.localeCompare('z', 'de') // -1\n'ä'.localeCompare('z', 'sv') // 1\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("de")]),e._v("表示德语，"),t("code",[e._v("sv")]),e._v("表示瑞典语。德语中，"),t("code",[e._v("ä")]),e._v("小于"),t("code",[e._v("z")]),e._v("，所以返回"),t("code",[e._v("-1")]),e._v("；瑞典语中，"),t("code",[e._v("ä")]),e._v("大于"),t("code",[e._v("z")]),e._v("，所以返回"),t("code",[e._v("1")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"参考链接-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-3"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Ariya Hidayat, "),t("a",{attrs:{href:"http://ariya.ofilabs.com/2014/02/javascript-string-substring-substr-slice.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript String: substring, substr, slice"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"math-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-对象"}},[e._v("#")]),e._v(" Math 对象")]),e._v(" "),t("p",[t("code",[e._v("Math")]),e._v("是 JavaScript 的原生对象，提供各种数学功能。该对象不是构造函数，不能生成实例，所有的属性和方法都必须在"),t("code",[e._v("Math")]),e._v("对象上调用。")]),e._v(" "),t("h3",{attrs:{id:"静态属性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态属性-2"}},[e._v("#")]),e._v(" 静态属性")]),e._v(" "),t("p",[t("code",[e._v("Math")]),e._v("对象的静态属性，提供以下一些数学常数。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Math.E")]),e._v("：常数"),t("code",[e._v("e")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Math.LN2")]),e._v("：2 的自然对数。")]),e._v(" "),t("li",[t("code",[e._v("Math.LN10")]),e._v("：10 的自然对数。")]),e._v(" "),t("li",[t("code",[e._v("Math.LOG2E")]),e._v("：以 2 为底的"),t("code",[e._v("e")]),e._v("的对数。")]),e._v(" "),t("li",[t("code",[e._v("Math.LOG10E")]),e._v("：以 10 为底的"),t("code",[e._v("e")]),e._v("的对数。")]),e._v(" "),t("li",[t("code",[e._v("Math.PI")]),e._v("：常数"),t("code",[e._v("π")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("Math.SQRT1_2")]),e._v("：0.5 的平方根。")]),e._v(" "),t("li",[t("code",[e._v("Math.SQRT2")]),e._v("：2 的平方根。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.E // 2.718281828459045\nMath.LN2 // 0.6931471805599453\nMath.LN10 // 2.302585092994046\nMath.LOG2E // 1.4426950408889634\nMath.LOG10E // 0.4342944819032518\nMath.PI // 3.141592653589793\nMath.SQRT1_2 // 0.7071067811865476\nMath.SQRT2 // 1.4142135623730951\n")])])]),t("p",[e._v("这些属性都是只读的，不能修改。")]),e._v(" "),t("h3",{attrs:{id:"静态方法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-3"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),t("p",[t("code",[e._v("Math")]),e._v("对象提供以下一些静态方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Math.abs()")]),e._v("：绝对值")]),e._v(" "),t("li",[t("code",[e._v("Math.ceil()")]),e._v("：向上取整")]),e._v(" "),t("li",[t("code",[e._v("Math.floor()")]),e._v("：向下取整")]),e._v(" "),t("li",[t("code",[e._v("Math.max()")]),e._v("：最大值")]),e._v(" "),t("li",[t("code",[e._v("Math.min()")]),e._v("：最小值")]),e._v(" "),t("li",[t("code",[e._v("Math.pow()")]),e._v("：幂运算")]),e._v(" "),t("li",[t("code",[e._v("Math.sqrt()")]),e._v("：平方根")]),e._v(" "),t("li",[t("code",[e._v("Math.log()")]),e._v("：自然对数")]),e._v(" "),t("li",[t("code",[e._v("Math.exp()")]),e._v("："),t("code",[e._v("e")]),e._v("的指数")]),e._v(" "),t("li",[t("code",[e._v("Math.round()")]),e._v("：四舍五入")]),e._v(" "),t("li",[t("code",[e._v("Math.random()")]),e._v("：随机数")])]),e._v(" "),t("h4",{attrs:{id:"math-abs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-abs"}},[e._v("#")]),e._v(" Math.abs()")]),e._v(" "),t("p",[t("code",[e._v("Math.abs")]),e._v("方法返回参数值的绝对值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.abs(1) // 1\nMath.abs(-1) // 1\n")])])]),t("h4",{attrs:{id:"math-max-math-min"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-max-math-min"}},[e._v("#")]),e._v(" Math.max()，Math.min()")]),e._v(" "),t("p",[t("code",[e._v("Math.max")]),e._v("方法返回参数之中最大的那个值，"),t("code",[e._v("Math.min")]),e._v("返回最小的那个值。如果参数为空, "),t("code",[e._v("Math.min")]),e._v("返回"),t("code",[e._v("Infinity")]),e._v(", "),t("code",[e._v("Math.max")]),e._v("返回"),t("code",[e._v("-Infinity")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.max(2, -1, 5) // 5\nMath.min(2, -1, 5) // -1\nMath.min() // Infinity\nMath.max() // -Infinity\n")])])]),t("h4",{attrs:{id:"math-floor-math-ceil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-floor-math-ceil"}},[e._v("#")]),e._v(" Math.floor()，Math.ceil()")]),e._v(" "),t("p",[t("code",[e._v("Math.floor")]),e._v("方法返回小于或等于参数值的最大整数（地板值）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.floor(3.2) // 3\nMath.floor(-3.2) // -4\n")])])]),t("p",[t("code",[e._v("Math.ceil")]),e._v("方法返回大于或等于参数值的最小整数（天花板值）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.ceil(3.2) // 4\nMath.ceil(-3.2) // -3\n")])])]),t("p",[e._v("这两个方法可以结合起来，实现一个总是返回数值的整数部分的函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function ToInteger(x) {\n  x = Number(x);\n  return x < 0 ? Math.ceil(x) : Math.floor(x);\n}\n\nToInteger(3.2) // 3\nToInteger(3.5) // 3\nToInteger(3.8) // 3\nToInteger(-3.2) // -3\nToInteger(-3.5) // -3\nToInteger(-3.8) // -3\n")])])]),t("p",[e._v("上面代码中，不管正数或负数，"),t("code",[e._v("ToInteger")]),e._v("函数总是返回一个数值的整数部分。")]),e._v(" "),t("h4",{attrs:{id:"math-round"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-round"}},[e._v("#")]),e._v(" Math.round()")]),e._v(" "),t("p",[t("code",[e._v("Math.round")]),e._v("方法用于四舍五入。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.round(0.1) // 0\nMath.round(0.5) // 1\nMath.round(0.6) // 1\n\n// 等同于\nMath.floor(x + 0.5)\n")])])]),t("p",[e._v("注意，它对负数的处理（主要是对"),t("code",[e._v("0.5")]),e._v("的处理）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.round(-1.1) // -1\nMath.round(-1.5) // -1\nMath.round(-1.6) // -2\n")])])]),t("h4",{attrs:{id:"math-pow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-pow"}},[e._v("#")]),e._v(" Math.pow()")]),e._v(" "),t("p",[t("code",[e._v("Math.pow")]),e._v("方法返回以第一个参数为底数、第二个参数为指数的幂运算值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 等同于 2 ** 2\nMath.pow(2, 2) // 4\n// 等同于 2 ** 3\nMath.pow(2, 3) // 8\n")])])]),t("p",[e._v("下面是计算圆面积的方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var radius = 20;\nvar area = Math.PI * Math.pow(radius, 2);\n")])])]),t("h4",{attrs:{id:"math-sqrt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-sqrt"}},[e._v("#")]),e._v(" Math.sqrt()")]),e._v(" "),t("p",[t("code",[e._v("Math.sqrt")]),e._v("方法返回参数值的平方根。如果参数是一个负值，则返回"),t("code",[e._v("NaN")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.sqrt(4) // 2\nMath.sqrt(-4) // NaN\n")])])]),t("h4",{attrs:{id:"math-log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-log"}},[e._v("#")]),e._v(" Math.log()")]),e._v(" "),t("p",[t("code",[e._v("Math.log")]),e._v("方法返回以"),t("code",[e._v("e")]),e._v("为底的自然对数值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.log(Math.E) // 1\nMath.log(10) // 2.302585092994046\n")])])]),t("p",[e._v("如果要计算以10为底的对数，可以先用"),t("code",[e._v("Math.log")]),e._v("求出自然对数，然后除以"),t("code",[e._v("Math.LN10")]),e._v("；求以2为底的对数，可以除以"),t("code",[e._v("Math.LN2")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.log(100)/Math.LN10 // 2\nMath.log(8)/Math.LN2 // 3\n")])])]),t("h4",{attrs:{id:"math-exp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-exp"}},[e._v("#")]),e._v(" Math.exp()")]),e._v(" "),t("p",[t("code",[e._v("Math.exp")]),e._v("方法返回常数"),t("code",[e._v("e")]),e._v("的参数次方。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.exp(1) // 2.718281828459045\nMath.exp(3) // 20.085536923187668\n")])])]),t("h4",{attrs:{id:"math-random"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math-random"}},[e._v("#")]),e._v(" Math.random()")]),e._v(" "),t("p",[t("code",[e._v("Math.random()")]),e._v("返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.random() // 0.7151307314634323\n")])])]),t("p",[e._v("任意范围的随机数生成函数如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\ngetRandomArbitrary(1.5, 6.5)\n// 2.4942810038223864\n")])])]),t("p",[e._v("任意范围的随机整数生成函数如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomInt(1, 6) // 5\n")])])]),t("p",[e._v("返回随机字符的例子如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function random_str(length) {\n  var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  ALPHABET += 'abcdefghijklmnopqrstuvwxyz';\n  ALPHABET += '0123456789-_';\n  var str = '';\n  for (var i = 0; i < length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\n\nrandom_str(6) // \"NdQKOr\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("random_str")]),e._v("函数接受一个整数作为参数，返回变量"),t("code",[e._v("ALPHABET")]),e._v("内的随机字符所组成的指定长度的字符串。")]),e._v(" "),t("h4",{attrs:{id:"三角函数方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三角函数方法"}},[e._v("#")]),e._v(" 三角函数方法")]),e._v(" "),t("p",[t("code",[e._v("Math")]),e._v("对象还提供一系列三角函数方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Math.sin()")]),e._v("：返回参数的正弦（参数为弧度值）")]),e._v(" "),t("li",[t("code",[e._v("Math.cos()")]),e._v("：返回参数的余弦（参数为弧度值）")]),e._v(" "),t("li",[t("code",[e._v("Math.tan()")]),e._v("：返回参数的正切（参数为弧度值）")]),e._v(" "),t("li",[t("code",[e._v("Math.asin()")]),e._v("：返回参数的反正弦（返回值为弧度值）")]),e._v(" "),t("li",[t("code",[e._v("Math.acos()")]),e._v("：返回参数的反余弦（返回值为弧度值）")]),e._v(" "),t("li",[t("code",[e._v("Math.atan()")]),e._v("：返回参数的反正切（返回值为弧度值）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Math.sin(0) // 0\nMath.cos(0) // 1\nMath.tan(0) // 0\n\nMath.sin(Math.PI / 2) // 1\n\nMath.asin(1) // 1.5707963267948966\nMath.acos(1) // 0\nMath.atan(1) // 0.7853981633974483\n")])])]),t("h2",{attrs:{id:"date-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-对象"}},[e._v("#")]),e._v(" Date 对象")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("对象是 JavaScript 原生的时间库。它以国际标准时间（UTC）1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）。")]),e._v(" "),t("h3",{attrs:{id:"普通函数的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通函数的用法"}},[e._v("#")]),e._v(" 普通函数的用法")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("对象可以作为普通函数直接调用，返回一个代表当前时间的字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Date()\n// "Tue Dec 01 2015 09:34:43 GMT+0800 (CST)"\n')])])]),t("p",[e._v("注意，即使带有参数，"),t("code",[e._v("Date")]),e._v("作为普通函数使用时，返回的还是当前时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Date(2000, 1, 1)\n// "Tue Dec 01 2015 09:34:43 GMT+0800 (CST)"\n')])])]),t("p",[e._v("上面代码说明，无论有没有参数，直接调用"),t("code",[e._v("Date")]),e._v("总是返回当前时间。")]),e._v(" "),t("h3",{attrs:{id:"构造函数的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的用法"}},[e._v("#")]),e._v(" 构造函数的用法")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("还可以当作构造函数使用。对它使用"),t("code",[e._v("new")]),e._v("命令，会返回一个"),t("code",[e._v("Date")]),e._v("对象的实例。如果不加参数，实例代表的就是当前时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var today = new Date();\n")])])]),t("p",[t("code",[e._v("Date")]),e._v("实例有一个独特的地方。其他对象求值的时候，都是默认调用"),t("code",[e._v(".valueOf()")]),e._v("方法，但是"),t("code",[e._v("Date")]),e._v("实例求值的时候，默认调用的是"),t("code",[e._v("toString()")]),e._v("方法。这导致对"),t("code",[e._v("Date")]),e._v("实例求值，返回的是一个字符串，代表该实例对应的时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var today = new Date();\n\ntoday\n// "Tue Dec 01 2015 09:34:43 GMT+0800 (CST)"\n\n// 等同于\ntoday.toString()\n// "Tue Dec 01 2015 09:34:43 GMT+0800 (CST)"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("today")]),e._v("是"),t("code",[e._v("Date")]),e._v("的实例，直接求值等同于调用"),t("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),t("p",[e._v("作为构造函数时，"),t("code",[e._v("Date")]),e._v("对象可以接受多种格式的参数，返回一个该参数对应的时间实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 参数为时间零点开始计算的毫秒数\nnew Date(1378218728000)\n// Tue Sep 03 2013 22:32:08 GMT+0800 (CST)\n\n// 参数为日期字符串\nnew Date('January 6, 2013');\n// Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\n\n// 参数为多个整数，\n// 代表年、月、日、小时、分钟、秒、毫秒\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("关于"),t("code",[e._v("Date")]),e._v("构造函数的参数，有几点说明。")]),e._v(" "),t("p",[e._v("第一点，参数可以是负整数，代表1970年元旦之前的时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Date(-1378218728000)\n// Fri Apr 30 1926 17:27:52 GMT+0800 (CST)\n")])])]),t("p",[e._v("第二点，只要是能被"),t("code",[e._v("Date.parse()")]),e._v("方法解析的字符串，都可以当作参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Date('2013-2-15')\nnew Date('2013/2/15')\nnew Date('02/15/2013')\nnew Date('2013-FEB-15')\nnew Date('FEB, 15, 2013')\nnew Date('FEB 15, 2013')\nnew Date('February, 15, 2013')\nnew Date('February 15, 2013')\nnew Date('15 Feb 2013')\nnew Date('15, February, 2013')\n// Fri Feb 15 2013 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面多种日期字符串的写法，返回的都是同一个时间。")]),e._v(" "),t("p",[e._v("第三，参数为年、月、日等多个整数时，年和月是不能省略的，其他参数都可以省略的。也就是说，这时至少需要两个参数，因为如果只使用“年”这一个参数，"),t("code",[e._v("Date")]),e._v("会将其解释为毫秒数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Date(2013)\n// Thu Jan 01 1970 08:00:02 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面代码中，2013被解释为毫秒数，而不是年份。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Date(2013, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 1, 0, 0, 0, 0)\n// Tue Jan 01 2013 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面代码中，不管有几个参数，返回的都是2013年1月1日零点。")]),e._v(" "),t("p",[e._v("最后，各个参数的取值范围如下。")]),e._v(" "),t("ul",[t("li",[e._v("年：使用四位数年份，比如"),t("code",[e._v("2000")]),e._v("。如果写成两位数或个位数，则加上"),t("code",[e._v("1900")]),e._v("，即"),t("code",[e._v("10")]),e._v("代表1910年。如果是负数，表示公元前。")]),e._v(" "),t("li",[e._v("月："),t("code",[e._v("0")]),e._v("表示一月，依次类推，"),t("code",[e._v("11")]),e._v("表示12月。")]),e._v(" "),t("li",[e._v("日："),t("code",[e._v("1")]),e._v("到"),t("code",[e._v("31")]),e._v("。")]),e._v(" "),t("li",[e._v("小时："),t("code",[e._v("0")]),e._v("到"),t("code",[e._v("23")]),e._v("。")]),e._v(" "),t("li",[e._v("分钟："),t("code",[e._v("0")]),e._v("到"),t("code",[e._v("59")]),e._v("。")]),e._v(" "),t("li",[e._v("秒："),t("code",[e._v("0")]),e._v("到"),t("code",[e._v("59")])]),e._v(" "),t("li",[e._v("毫秒："),t("code",[e._v("0")]),e._v("到"),t("code",[e._v("999")]),e._v("。")])]),e._v(" "),t("p",[e._v("注意，月份从"),t("code",[e._v("0")]),e._v("开始计算，但是，天数从"),t("code",[e._v("1")]),e._v("开始计算。另外，除了日期的默认值为"),t("code",[e._v("1")]),e._v("，小时、分钟、秒钟和毫秒的默认值都是"),t("code",[e._v("0")]),e._v("。")]),e._v(" "),t("p",[e._v("这些参数如果超出了正常范围，会被自动折算。比如，如果月设为"),t("code",[e._v("15")]),e._v("，就折算为下一年的4月。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Date(2013, 15)\n// Tue Apr 01 2014 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, 0)\n// Mon Dec 31 2012 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面代码的第二个例子，日期设为"),t("code",[e._v("0")]),e._v("，就代表上个月的最后一天。")]),e._v(" "),t("p",[e._v("参数还可以使用负数，表示扣去的时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Date(2013, -1)\n// Sat Dec 01 2012 00:00:00 GMT+0800 (CST)\nnew Date(2013, 0, -1)\n// Sun Dec 30 2012 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面代码中，分别对月和日使用了负数，表示从基准日扣去相应的时间。")]),e._v(" "),t("h3",{attrs:{id:"日期的运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日期的运算"}},[e._v("#")]),e._v(" 日期的运算")]),e._v(" "),t("p",[e._v("类型自动转换时，"),t("code",[e._v("Date")]),e._v("实例如果转为数值，则等于对应的毫秒数；如果转为字符串，则等于对应的日期字符串。所以，两个日期实例对象进行减法运算时，返回的是它们间隔的毫秒数；进行加法运算时，返回的是两个字符串连接而成的新字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d1 = new Date(2000, 2, 1);\nvar d2 = new Date(2000, 3, 1);\n\nd2 - d1\n// 2678400000\nd2 + d1\n// "Sat Apr 01 2000 00:00:00 GMT+0800 (CST)Wed Mar 01 2000 00:00:00 GMT+0800 (CST)"\n')])])]),t("h3",{attrs:{id:"静态方法-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-4"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),t("h4",{attrs:{id:"date-now"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-now"}},[e._v("#")]),e._v(" Date.now()")]),e._v(" "),t("p",[t("code",[e._v("Date.now")]),e._v("方法返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Date.now() // 1364026285194\n")])])]),t("h4",{attrs:{id:"date-parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-parse"}},[e._v("#")]),e._v(" Date.parse()")]),e._v(" "),t("p",[t("code",[e._v("Date.parse")]),e._v("方法用来解析日期字符串，返回该时间距离时间零点（1970年1月1日 00:00:00）的毫秒数。")]),e._v(" "),t("p",[e._v("日期字符串应该符合 RFC 2822 和 ISO 8061 这两个标准，即"),t("code",[e._v("YYYY-MM-DDTHH:mm:ss.sssZ")]),e._v("格式，其中最后的"),t("code",[e._v("Z")]),e._v("表示时区。但是，其他格式也可以被解析，请看下面的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Date.parse('Aug 9, 1995')\nDate.parse('January 26, 2011 13:51:50')\nDate.parse('Mon, 25 Dec 1995 13:30:00 GMT')\nDate.parse('Mon, 25 Dec 1995 13:30:00 +0430')\nDate.parse('2011-10-10')\nDate.parse('2011-10-10T14:48:00')\n")])])]),t("p",[e._v("上面的日期字符串都可以解析。")]),e._v(" "),t("p",[e._v("如果解析失败，返回"),t("code",[e._v("NaN")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Date.parse('xxx') // NaN\n")])])]),t("h4",{attrs:{id:"date-utc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-utc"}},[e._v("#")]),e._v(" Date.UTC()")]),e._v(" "),t("p",[t("code",[e._v("Date.UTC")]),e._v("方法接受年、月、日等变量作为参数，返回该时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 格式\nDate.UTC(year, month[, date[, hrs[, min[, sec[, ms]]]]])\n\n// 用法\nDate.UTC(2011, 0, 1, 2, 3, 4, 567)\n// 1293847384567\n")])])]),t("p",[e._v("该方法的参数用法与"),t("code",[e._v("Date")]),e._v("构造函数完全一致，比如月从"),t("code",[e._v("0")]),e._v("开始计算，日期从"),t("code",[e._v("1")]),e._v("开始计算。区别在于"),t("code",[e._v("Date.UTC")]),e._v("方法的参数，会被解释为 UTC 时间（世界标准时间），"),t("code",[e._v("Date")]),e._v("构造函数的参数会被解释为当前时区的时间。")]),e._v(" "),t("h3",{attrs:{id:"实例方法-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-5"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("的实例对象，有几十个自己的方法，除了"),t("code",[e._v("valueOf")]),e._v("和"),t("code",[e._v("toString")]),e._v("，可以分为以下三类。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("to")]),e._v("类：从"),t("code",[e._v("Date")]),e._v("对象返回一个字符串，表示指定的时间。")]),e._v(" "),t("li",[t("code",[e._v("get")]),e._v("类：获取"),t("code",[e._v("Date")]),e._v("对象的日期和时间。")]),e._v(" "),t("li",[t("code",[e._v("set")]),e._v("类：设置"),t("code",[e._v("Date")]),e._v("对象的日期和时间。")])]),e._v(" "),t("h4",{attrs:{id:"date-prototype-valueof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-prototype-valueof"}},[e._v("#")]),e._v(" Date.prototype.valueOf()")]),e._v(" "),t("p",[t("code",[e._v("valueOf")]),e._v("方法返回实例对象距离时间零点（1970年1月1日00:00:00 UTC）对应的毫秒数，该方法等同于"),t("code",[e._v("getTime")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date();\n\nd.valueOf() // 1362790014817\nd.getTime() // 1362790014817\n")])])]),t("p",[e._v("预期为数值的场合，"),t("code",[e._v("Date")]),e._v("实例会自动调用该方法，所以可以用下面的方法计算时间的间隔。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var start = new Date();\n// ...\nvar end = new Date();\nvar elapsed = end - start;\n")])])]),t("h4",{attrs:{id:"to-类方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-类方法"}},[e._v("#")]),e._v(" to 类方法")]),e._v(" "),t("p",[t("strong",[e._v("（1）Date.prototype.toString()")])]),e._v(" "),t("p",[t("code",[e._v("toString")]),e._v("方法返回一个完整的日期字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\n\nd.toString()\n// "Tue Jan 01 2013 00:00:00 GMT+0800 (CST)"\nd\n// "Tue Jan 01 2013 00:00:00 GMT+0800 (CST)"\n')])])]),t("p",[e._v("因为"),t("code",[e._v("toString")]),e._v("是默认的调用方法，所以如果直接读取"),t("code",[e._v("Date")]),e._v("实例，就相当于调用这个方法。")]),e._v(" "),t("p",[t("strong",[e._v("（2）Date.prototype.toUTCString()")])]),e._v(" "),t("p",[t("code",[e._v("toUTCString")]),e._v("方法返回对应的 UTC 时间，也就是比北京时间晚8个小时。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\n\nd.toUTCString()\n// "Mon, 31 Dec 2012 16:00:00 GMT"\n')])])]),t("p",[t("strong",[e._v("（3）Date.prototype.toISOString()")])]),e._v(" "),t("p",[t("code",[e._v("toISOString")]),e._v("方法返回对应时间的 ISO8601 写法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\n\nd.toISOString()\n// "2012-12-31T16:00:00.000Z"\n')])])]),t("p",[e._v("注意，"),t("code",[e._v("toISOString")]),e._v("方法返回的总是 UTC 时区的时间。")]),e._v(" "),t("p",[t("strong",[e._v("（4）Date.prototype.toJSON()")])]),e._v(" "),t("p",[t("code",[e._v("toJSON")]),e._v("方法返回一个符合 JSON 格式的 ISO 日期字符串，与"),t("code",[e._v("toISOString")]),e._v("方法的返回结果完全相同。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\n\nd.toJSON()\n// "2012-12-31T16:00:00.000Z"\n')])])]),t("p",[t("strong",[e._v("（5）Date.prototype.toDateString()")])]),e._v(" "),t("p",[t("code",[e._v("toDateString")]),e._v("方法返回日期字符串（不含小时、分和秒）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\nd.toDateString() // "Tue Jan 01 2013"\n')])])]),t("p",[t("strong",[e._v("（6）Date.prototype.toTimeString()")])]),e._v(" "),t("p",[t("code",[e._v("toTimeString")]),e._v("方法返回时间字符串（不含年月日）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\nd.toTimeString() // "00:00:00 GMT+0800 (CST)"\n')])])]),t("p",[t("strong",[e._v("（7）本地时间")])]),e._v(" "),t("p",[e._v("以下三种方法，可以将 Date 实例转为表示本地时间的字符串。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Date.prototype.toLocaleString()")]),e._v("：完整的本地时间。")]),e._v(" "),t("li",[t("code",[e._v("Date.prototype.toLocaleDateString()")]),e._v("：本地日期（不含小时、分和秒）。")]),e._v(" "),t("li",[t("code",[e._v("Date.prototype.toLocaleTimeString()")]),e._v("：本地时间（不含年月日）。")])]),e._v(" "),t("p",[e._v("下面是用法实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var d = new Date(2013, 0, 1);\n\nd.toLocaleString()\n// 中文版浏览器为"2013年1月1日 上午12:00:00"\n// 英文版浏览器为"1/1/2013 12:00:00 AM"\n\nd.toLocaleDateString()\n// 中文版浏览器为"2013年1月1日"\n// 英文版浏览器为"1/1/2013"\n\nd.toLocaleTimeString()\n// 中文版浏览器为"上午12:00:00"\n// 英文版浏览器为"12:00:00 AM"\n')])])]),t("p",[e._v("这三个方法都有两个可选的参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("dateObj.toLocaleString([locales[, options]])\ndateObj.toLocaleDateString([locales[, options]])\ndateObj.toLocaleTimeString([locales[, options]])\n")])])]),t("p",[e._v("这两个参数中，"),t("code",[e._v("locales")]),e._v("是一个指定所用语言的字符串，"),t("code",[e._v("options")]),e._v("是一个配置对象。下面是"),t("code",[e._v("locales")]),e._v("的例子，分别采用"),t("code",[e._v("en-US")]),e._v("和"),t("code",[e._v("zh-CN")]),e._v("语言设定。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date(2013, 0, 1);\n\nd.toLocaleString('en-US') // \"1/1/2013, 12:00:00 AM\"\nd.toLocaleString('zh-CN') // \"2013/1/1 上午12:00:00\"\n\nd.toLocaleDateString('en-US') // \"1/1/2013\"\nd.toLocaleDateString('zh-CN') // \"2013/1/1\"\n\nd.toLocaleTimeString('en-US') // \"12:00:00 AM\"\nd.toLocaleTimeString('zh-CN') // \"上午12:00:00\"\n")])])]),t("p",[t("code",[e._v("options")]),e._v("配置对象有以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("dateStyle")]),e._v("：可能的值为"),t("code",[e._v("full")]),e._v("、"),t("code",[e._v("long")]),e._v("、"),t("code",[e._v("medium")]),e._v("、"),t("code",[e._v("short")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("timeStyle")]),e._v("：可能的值为"),t("code",[e._v("full")]),e._v("、"),t("code",[e._v("long")]),e._v("、"),t("code",[e._v("medium")]),e._v("、"),t("code",[e._v("short")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("month")]),e._v("：可能的值为"),t("code",[e._v("numeric")]),e._v("、"),t("code",[e._v("2-digit")]),e._v("、"),t("code",[e._v("long")]),e._v("、"),t("code",[e._v("short")]),e._v("、"),t("code",[e._v("narrow")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("year")]),e._v("：可能的值为"),t("code",[e._v("numeric")]),e._v("、"),t("code",[e._v("2-digit")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("weekday")]),e._v("：可能的值为"),t("code",[e._v("long")]),e._v("、"),t("code",[e._v("short")]),e._v("、"),t("code",[e._v("narrow")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("day")]),e._v("、"),t("code",[e._v("hour")]),e._v("、"),t("code",[e._v("minute")]),e._v("、"),t("code",[e._v("second")]),e._v("：可能的值为"),t("code",[e._v("numeric")]),e._v("、"),t("code",[e._v("2-digit")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("timeZone")]),e._v("：可能的值为 IANA 的时区数据库。")]),e._v(" "),t("li",[t("code",[e._v("timeZooneName")]),e._v("：可能的值为"),t("code",[e._v("long")]),e._v("、"),t("code",[e._v("short")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("hour12")]),e._v("：24小时周期还是12小时周期，可能的值为"),t("code",[e._v("true")]),e._v("、"),t("code",[e._v("false")]),e._v("。")])]),e._v(" "),t("p",[e._v("下面是用法实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date(2013, 0, 1);\n\nd.toLocaleDateString('en-US', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n})\n// \"Tuesday, January 1, 2013\"\n\nd.toLocaleDateString('en-US', {\n  day: \"2-digit\",\n  month: \"long\",\n  year: \"2-digit\"\n});\n// \"January 01, 13\"\n\nd.toLocaleTimeString('en-US', {\n  timeZone: 'UTC',\n  timeZoneName: 'short'\n})\n// \"4:00:00 PM UTC\"\n\nd.toLocaleTimeString('en-US', {\n  timeZone: 'Asia/Shanghai',\n  timeZoneName: 'long'\n})\n// \"12:00:00 AM China Standard Time\"\n\nd.toLocaleTimeString('en-US', {\n  hour12: false\n})\n// \"00:00:00\"\n\nd.toLocaleTimeString('en-US', {\n  hour12: true\n})\n// \"12:00:00 AM\"\n")])])]),t("h4",{attrs:{id:"get-类方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-类方法"}},[e._v("#")]),e._v(" get 类方法")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("对象提供了一系列"),t("code",[e._v("get*")]),e._v("方法，用来获取实例对象某个方面的值。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("getTime()")]),e._v("：返回实例距离1970年1月1日00:00:00的毫秒数，等同于"),t("code",[e._v("valueOf")]),e._v("方法。")]),e._v(" "),t("li",[t("code",[e._v("getDate()")]),e._v("：返回实例对象对应每个月的几号（从1开始）。")]),e._v(" "),t("li",[t("code",[e._v("getDay()")]),e._v("：返回星期几，星期日为0，星期一为1，以此类推。")]),e._v(" "),t("li",[t("code",[e._v("getFullYear()")]),e._v("：返回四位的年份。")]),e._v(" "),t("li",[t("code",[e._v("getMonth()")]),e._v("：返回月份（0表示1月，11表示12月）。")]),e._v(" "),t("li",[t("code",[e._v("getHours()")]),e._v("：返回小时（0-23）。")]),e._v(" "),t("li",[t("code",[e._v("getMilliseconds()")]),e._v("：返回毫秒（0-999）。")]),e._v(" "),t("li",[t("code",[e._v("getMinutes()")]),e._v("：返回分钟（0-59）。")]),e._v(" "),t("li",[t("code",[e._v("getSeconds()")]),e._v("：返回秒（0-59）。")]),e._v(" "),t("li",[t("code",[e._v("getTimezoneOffset()")]),e._v("：返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素。")])]),e._v(" "),t("p",[e._v("所有这些"),t("code",[e._v("get*")]),e._v("方法返回的都是整数，不同方法返回值的范围不一样。")]),e._v(" "),t("ul",[t("li",[e._v("分钟和秒：0 到 59")]),e._v(" "),t("li",[e._v("小时：0 到 23")]),e._v(" "),t("li",[e._v("星期：0（星期天）到 6（星期六）")]),e._v(" "),t("li",[e._v("日期：1 到 31")]),e._v(" "),t("li",[e._v("月份：0（一月）到 11（十二月）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date('January 6, 2013');\n\nd.getDate() // 6\nd.getMonth() // 0\nd.getFullYear() // 2013\nd.getTimezoneOffset() // -480\n")])])]),t("p",[e._v("上面代码中，最后一行返回"),t("code",[e._v("-480")]),e._v("，即 UTC 时间减去当前时间，单位是分钟。"),t("code",[e._v("-480")]),e._v("表示 UTC 比当前时间少480分钟，即当前时区比 UTC 早8个小时。")]),e._v(" "),t("p",[e._v("下面是一个例子，计算本年度还剩下多少天。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function leftDays() {\n  var today = new Date();\n  var endYear = new Date(today.getFullYear(), 11, 31, 23, 59, 59, 999);\n  var msPerDay = 24 * 60 * 60 * 1000;\n  return Math.round((endYear.getTime() - today.getTime()) / msPerDay);\n}\n")])])]),t("p",[e._v("上面这些"),t("code",[e._v("get*")]),e._v("方法返回的都是当前时区的时间，"),t("code",[e._v("Date")]),e._v("对象还提供了这些方法对应的 UTC 版本，用来返回 UTC 时间。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("getUTCDate()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCFullYear()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCMonth()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCDay()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCHours()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCMinutes()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCSeconds()")])]),e._v(" "),t("li",[t("code",[e._v("getUTCMilliseconds()")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date('January 6, 2013');\n\nd.getDate() // 6\nd.getUTCDate() // 5\n")])])]),t("p",[e._v("上面代码中，实例对象"),t("code",[e._v("d")]),e._v("表示当前时区（东八时区）的1月6日0点0分0秒，这个时间对于当前时区来说是1月6日，所以"),t("code",[e._v("getDate")]),e._v("方法返回6，对于 UTC 时区来说是1月5日，所以"),t("code",[e._v("getUTCDate")]),e._v("方法返回5。")]),e._v(" "),t("h4",{attrs:{id:"set-类方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-类方法"}},[e._v("#")]),e._v(" set 类方法")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("对象提供了一系列"),t("code",[e._v("set*")]),e._v("方法，用来设置实例对象的各个方面。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("setDate(date)")]),e._v("：设置实例对象对应的每个月的几号（1-31），返回改变后毫秒时间戳。")]),e._v(" "),t("li",[t("code",[e._v("setFullYear(year [, month, date])")]),e._v("：设置四位年份。")]),e._v(" "),t("li",[t("code",[e._v("setHours(hour [, min, sec, ms])")]),e._v("：设置小时（0-23）。")]),e._v(" "),t("li",[t("code",[e._v("setMilliseconds()")]),e._v("：设置毫秒（0-999）。")]),e._v(" "),t("li",[t("code",[e._v("setMinutes(min [, sec, ms])")]),e._v("：设置分钟（0-59）。")]),e._v(" "),t("li",[t("code",[e._v("setMonth(month [, date])")]),e._v("：设置月份（0-11）。")]),e._v(" "),t("li",[t("code",[e._v("setSeconds(sec [, ms])")]),e._v("：设置秒（0-59）。")]),e._v(" "),t("li",[t("code",[e._v("setTime(milliseconds)")]),e._v("：设置毫秒时间戳。")])]),e._v(" "),t("p",[e._v("这些方法基本是跟"),t("code",[e._v("get*")]),e._v("方法一一对应的，但是没有"),t("code",[e._v("setDay")]),e._v("方法，因为星期几是计算出来的，而不是设置的。另外，需要注意的是，凡是涉及到设置月份，都是从0开始算的，即"),t("code",[e._v("0")]),e._v("是1月，"),t("code",[e._v("11")]),e._v("是12月。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date ('January 6, 2013');\n\nd // Sun Jan 06 2013 00:00:00 GMT+0800 (CST)\nd.setDate(9) // 1357660800000\nd // Wed Jan 09 2013 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[t("code",[e._v("set*")]),e._v("方法的参数都会自动折算。以"),t("code",[e._v("setDate()")]),e._v("为例，如果参数超过当月的最大天数，则向下一个月顺延，如果参数是负数，表示从上个月的最后一天开始减去的天数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d1 = new Date('January 6, 2013');\n\nd1.setDate(32) // 1359648000000\nd1 // Fri Feb 01 2013 00:00:00 GMT+0800 (CST)\n\nvar d2 = new Date ('January 6, 2013');\n\nd2.setDate(-1) // 1356796800000\nd2 // Sun Dec 30 2012 00:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("d1.setDate(32)")]),e._v("将日期设为1月份的32号，因为1月份只有31号，所以自动折算为2月1日。"),t("code",[e._v("d2.setDate(-1)")]),e._v("表示设为上个月的倒数第二天，即12月30日。")]),e._v(" "),t("p",[t("code",[e._v("set")]),e._v("类方法和"),t("code",[e._v("get")]),e._v("类方法，可以结合使用，得到相对时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date();\n\n// 将日期向后推1000天\nd.setDate(d.getDate() + 1000);\n// 将时间设为6小时后\nd.setHours(d.getHours() + 6);\n// 将年份设为去年\nd.setFullYear(d.getFullYear() - 1);\n")])])]),t("p",[t("code",[e._v("set*")]),e._v("系列方法除了"),t("code",[e._v("setTime()")]),e._v("，都有对应的 UTC 版本，即设置 UTC 时区的时间。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("setUTCDate()")])]),e._v(" "),t("li",[t("code",[e._v("setUTCFullYear()")])]),e._v(" "),t("li",[t("code",[e._v("setUTCHours()")])]),e._v(" "),t("li",[t("code",[e._v("setUTCMilliseconds()")])]),e._v(" "),t("li",[t("code",[e._v("setUTCMinutes()")])]),e._v(" "),t("li",[t("code",[e._v("setUTCMonth()")])]),e._v(" "),t("li",[t("code",[e._v("setUTCSeconds()")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = new Date('January 6, 2013');\nd.getUTCHours() // 16\nd.setUTCHours(22) // 1357423200000\nd // Sun Jan 06 2013 06:00:00 GMT+0800 (CST)\n")])])]),t("p",[e._v("上面代码中，本地时区（东八时区）的1月6日0点0分，是 UTC 时区的前一天下午16点。设为 UTC 时区的22点以后，就变为本地时区的上午6点。")]),e._v(" "),t("h3",{attrs:{id:"参考链接-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-4"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Rakhitha Nimesh，"),t("a",{attrs:{href:"http://jspro.com/raw-javascript/beginners-guide-to-javascript-date-and-time/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting Started with the Date Object"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Ilya Kantor, "),t("a",{attrs:{href:"http://javascript.info/tutorial/datetime-functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("Date/Time functions"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"regexp-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象"}},[e._v("#")]),e._v(" RegExp 对象")]),e._v(" "),t("p",[t("code",[e._v("RegExp")]),e._v("对象提供正则表达式的功能。")]),e._v(" "),t("h3",{attrs:{id:"概述-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-6"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。")]),e._v(" "),t("p",[e._v("新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /xyz/;\n")])])]),t("p",[e._v("另一种是使用"),t("code",[e._v("RegExp")]),e._v("构造函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = new RegExp('xyz');\n")])])]),t("p",[e._v("上面两种写法是等价的，都新建了一个内容为"),t("code",[e._v("xyz")]),e._v("的正则表达式对象。它们的主要区别是，第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。")]),e._v(" "),t("p",[t("code",[e._v("RegExp")]),e._v("构造函数还可以接受第二个参数，表示修饰符（详细解释见下文）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = new RegExp('xyz', 'i');\n// 等价于\nvar regex = /xyz/i;\n")])])]),t("p",[e._v("上面代码中，正则表达式"),t("code",[e._v("/xyz/")]),e._v("有一个修饰符"),t("code",[e._v("i")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"实例属性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例属性-2"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),t("p",[e._v("正则对象的实例属性分成两类。")]),e._v(" "),t("p",[e._v("一类是修饰符相关，用于了解设置了什么修饰符。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("RegExp.prototype.ignoreCase")]),e._v("：返回一个布尔值，表示是否设置了"),t("code",[e._v("i")]),e._v("修饰符。")]),e._v(" "),t("li",[t("code",[e._v("RegExp.prototype.global")]),e._v("：返回一个布尔值，表示是否设置了"),t("code",[e._v("g")]),e._v("修饰符。")]),e._v(" "),t("li",[t("code",[e._v("RegExp.prototype.multiline")]),e._v("：返回一个布尔值，表示是否设置了"),t("code",[e._v("m")]),e._v("修饰符。")]),e._v(" "),t("li",[t("code",[e._v("RegExp.prototype.flags")]),e._v("：返回一个字符串，包含了已经设置的所有修饰符，按字母排序。")])]),e._v(" "),t("p",[e._v("上面四个属性都是只读的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var r = /abc/igm;\n\nr.ignoreCase // true\nr.global // true\nr.multiline // true\nr.flags // 'gim'\n")])])]),t("p",[e._v("另一类是与修饰符无关的属性，主要是下面两个。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("RegExp.prototype.lastIndex")]),e._v("：返回一个整数，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。")]),e._v(" "),t("li",[t("code",[e._v("RegExp.prototype.source")]),e._v("：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var r = /abc/igm;\n\nr.lastIndex // 0\nr.source // "abc"\n')])])]),t("h3",{attrs:{id:"实例方法-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-6"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("h4",{attrs:{id:"regexp-prototype-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[e._v("#")]),e._v(" RegExp.prototype.test()")]),e._v(" "),t("p",[e._v("正则实例对象的"),t("code",[e._v("test")]),e._v("方法返回一个布尔值，表示当前模式是否能匹配参数字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/cat/.test('cats and dogs') // true\n")])])]),t("p",[e._v("上面代码验证参数字符串之中是否包含"),t("code",[e._v("cat")]),e._v("，结果返回"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("如果正则表达式带有"),t("code",[e._v("g")]),e._v("修饰符，则每一次"),t("code",[e._v("test")]),e._v("方法都从上一次结束的位置开始向后匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var r = /x/g;\nvar s = '_x_x';\n\nr.lastIndex // 0\nr.test(s) // true\n\nr.lastIndex // 2\nr.test(s) // true\n\nr.lastIndex // 4\nr.test(s) // false\n")])])]),t("p",[e._v("上面代码的正则表达式使用了"),t("code",[e._v("g")]),e._v("修饰符，表示是全局搜索，会有多个结果。接着，三次使用"),t("code",[e._v("test")]),e._v("方法，每一次开始搜索的位置都是上一次匹配的后一个位置。")]),e._v(" "),t("p",[e._v("带有"),t("code",[e._v("g")]),e._v("修饰符时，可以通过正则对象的"),t("code",[e._v("lastIndex")]),e._v("属性指定开始搜索的位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var r = /x/g;\nvar s = '_x_x';\n\nr.lastIndex = 4;\nr.test(s) // false\n\nr.lastIndex // 0\nr.test(s)\n")])])]),t("p",[e._v("上面代码指定从字符串的第五个位置开始搜索，这个位置为空，所以返回"),t("code",[e._v("false")]),e._v("。同时，"),t("code",[e._v("lastIndex")]),e._v("属性重置为"),t("code",[e._v("0")]),e._v("，所以第二次执行"),t("code",[e._v("r.test(s)")]),e._v("会返回"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("注意，带有"),t("code",[e._v("g")]),e._v("修饰符时，正则表达式内部会记住上一次的"),t("code",[e._v("lastIndex")]),e._v("属性，这时不应该更换所要匹配的字符串，否则会有一些难以察觉的错误。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var r = /bb/g;\nr.test('bb') // true\nr.test('-bb-') // false\n")])])]),t("p",[e._v("上面代码中，由于正则表达式"),t("code",[e._v("r")]),e._v("是从上一次的"),t("code",[e._v("lastIndex")]),e._v("位置开始匹配，导致第二次执行"),t("code",[e._v("test")]),e._v("方法时出现预期以外的结果。")]),e._v(" "),t("p",[t("code",[e._v("lastIndex")]),e._v("属性只对同一个正则表达式有效，所以下面这样写是错误的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var count = 0;\nwhile (/a/g.test('babaa')) count++;\n")])])]),t("p",[e._v("上面代码会导致无限循环，因为"),t("code",[e._v("while")]),e._v("循环的每次匹配条件都是一个新的正则表达式，导致"),t("code",[e._v("lastIndex")]),e._v("属性总是等于0。")]),e._v(" "),t("p",[e._v("如果正则模式是一个空字符串，则匹配所有字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new RegExp('').test('abc')\n// true\n")])])]),t("h4",{attrs:{id:"regexp-prototype-exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[e._v("#")]),e._v(" RegExp.prototype.exec()")]),e._v(" "),t("p",[e._v("正则实例对象的"),t("code",[e._v("exec()")]),e._v("方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s = '_x_x';\nvar r1 = /x/;\nvar r2 = /y/;\n\nr1.exec(s) // [\"x\"]\nr2.exec(s) // null\n")])])]),t("p",[e._v("上面代码中，正则对象"),t("code",[e._v("r1")]),e._v("匹配成功，返回一个数组，成员是匹配结果；正则对象"),t("code",[e._v("r2")]),e._v("匹配失败，返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的"),t("code",[e._v("length")]),e._v("属性等于组匹配的数量再加1。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var s = \'_x_x\';\nvar r = /_(x)/;\n\nr.exec(s) // ["_x", "x"]\n')])])]),t("p",[e._v("上面代码的"),t("code",[e._v("exec()")]),e._v("方法，返回一个数组。第一个成员是整个匹配的结果，第二个成员是圆括号匹配的结果。")]),e._v(" "),t("p",[t("code",[e._v("exec()")]),e._v("方法的返回数组还包含以下两个属性：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("input")]),e._v("：整个原字符串。")]),e._v(" "),t("li",[t("code",[e._v("index")]),e._v("：模式匹配成功的开始位置（从0开始计数）。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var r = /a(b+)a/;\nvar arr = r.exec(\'_abbba_aba_\');\n\narr // ["abbba", "bbb"]\n\narr.index // 1\narr.input // "_abbba_aba_"\n')])])]),t("p",[e._v("上面代码中的"),t("code",[e._v("index")]),e._v("属性等于1，是因为从原字符串的第二个位置开始匹配成功。")]),e._v(" "),t("p",[e._v("如果正则表达式加上"),t("code",[e._v("g")]),e._v("修饰符，则可以使用多次"),t("code",[e._v("exec()")]),e._v("方法，下一次搜索的位置从上一次匹配成功结束的位置开始。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var reg = /a/g;\nvar str = \'abc_abc_abc\'\n\nvar r1 = reg.exec(str);\nr1 // ["a"]\nr1.index // 0\nreg.lastIndex // 1\n\nvar r2 = reg.exec(str);\nr2 // ["a"]\nr2.index // 4\nreg.lastIndex // 5\n\nvar r3 = reg.exec(str);\nr3 // ["a"]\nr3.index // 8\nreg.lastIndex // 9\n\nvar r4 = reg.exec(str);\nr4 // null\nreg.lastIndex // 0\n')])])]),t("p",[e._v("上面代码连续用了四次"),t("code",[e._v("exec()")]),e._v("方法，前三次都是从上一次匹配结束的位置向后匹配。当第三次匹配结束以后，整个字符串已经到达尾部，匹配结果返回"),t("code",[e._v("null")]),e._v("，正则实例对象的"),t("code",[e._v("lastIndex")]),e._v("属性也重置为"),t("code",[e._v("0")]),e._v("，意味着第四次匹配将从头开始。")]),e._v(" "),t("p",[e._v("利用"),t("code",[e._v("g")]),e._v("修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var reg = /a/g;\nvar str = 'abc_abc_abc'\n\nwhile(true) {\n  var match = reg.exec(str);\n  if (!match) break;\n  console.log('#' + match.index + ':' + match[0]);\n}\n// #0:a\n// #4:a\n// #8:a\n")])])]),t("p",[e._v("上面代码中，只要"),t("code",[e._v("exec()")]),e._v("方法不返回"),t("code",[e._v("null")]),e._v("，就会一直循环下去，每次输出匹配的位置和匹配的文本。")]),e._v(" "),t("p",[e._v("正则实例对象的"),t("code",[e._v("lastIndex")]),e._v("属性不仅可读，还可写。设置了"),t("code",[e._v("g")]),e._v("修饰符的时候，只要手动设置了"),t("code",[e._v("lastIndex")]),e._v("的值，就会从指定位置开始匹配。")]),e._v(" "),t("h3",{attrs:{id:"字符串的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串的实例方法"}},[e._v("#")]),e._v(" 字符串的实例方法")]),e._v(" "),t("p",[e._v("字符串的实例方法之中，有4种与正则表达式有关。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("String.prototype.match()")]),e._v("：返回一个数组，成员是所有匹配的子字符串。")]),e._v(" "),t("li",[t("code",[e._v("String.prototype.search()")]),e._v("：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。")]),e._v(" "),t("li",[t("code",[e._v("String.prototype.replace()")]),e._v("：按照给定的正则表达式进行替换，返回替换后的字符串。")]),e._v(" "),t("li",[t("code",[e._v("String.prototype.split()")]),e._v("：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。")])]),e._v(" "),t("h4",{attrs:{id:"string-prototype-match-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match-2"}},[e._v("#")]),e._v(" String.prototype.match()")]),e._v(" "),t("p",[e._v("字符串实例对象的"),t("code",[e._v("match")]),e._v("方法对字符串进行正则匹配，返回匹配结果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s = '_x_x';\nvar r1 = /x/;\nvar r2 = /y/;\n\ns.match(r1) // [\"x\"]\ns.match(r2) // null\n")])])]),t("p",[e._v("从上面代码可以看到，字符串的"),t("code",[e._v("match")]),e._v("方法与正则对象的"),t("code",[e._v("exec")]),e._v("方法非常类似：匹配成功返回一个数组，匹配失败返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("如果正则表达式带有"),t("code",[e._v("g")]),e._v("修饰符，则该方法与正则对象的"),t("code",[e._v("exec")]),e._v("方法行为不同，会一次性返回所有匹配成功的结果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var s = \'abba\';\nvar r = /a/g;\n\ns.match(r) // ["a", "a"]\nr.exec(s) // ["a"]\n')])])]),t("p",[e._v("设置正则表达式的"),t("code",[e._v("lastIndex")]),e._v("属性，对"),t("code",[e._v("match")]),e._v("方法无效，匹配总是从字符串的第一个字符开始。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var r = /a|b/g;\nr.lastIndex = 7;\n'xaxb'.match(r) // ['a', 'b']\nr.lastIndex // 0\n")])])]),t("p",[e._v("上面代码表示，设置正则对象的"),t("code",[e._v("lastIndex")]),e._v("属性是无效的。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search"}},[e._v("#")]),e._v(" String.prototype.search()")]),e._v(" "),t("p",[e._v("字符串对象的"),t("code",[e._v("search")]),e._v("方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回"),t("code",[e._v("-1")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'_x_x'.search(/x/)\n// 1\n")])])]),t("p",[e._v("上面代码中，第一个匹配结果出现在字符串的"),t("code",[e._v("1")]),e._v("号位置。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace"}},[e._v("#")]),e._v(" String.prototype.replace()")]),e._v(" "),t("p",[e._v("字符串对象的"),t("code",[e._v("replace")]),e._v("方法可以替换匹配的值。它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("str.replace(search, replacement)\n")])])]),t("p",[e._v("正则表达式如果不加"),t("code",[e._v("g")]),e._v("修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'aaa'.replace('a', 'b') // \"baa\"\n'aaa'.replace(/a/, 'b') // \"baa\"\n'aaa'.replace(/a/g, 'b') // \"bbb\"\n")])])]),t("p",[e._v("上面代码中，最后一个正则表达式使用了"),t("code",[e._v("g")]),e._v("修饰符，导致所有的"),t("code",[e._v("a")]),e._v("都被替换掉了。")]),e._v(" "),t("p",[t("code",[e._v("replace")]),e._v("方法的一个应用，就是消除字符串首尾两端的空格。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var str = '  #id div.class  ';\n\nstr.replace(/^\\s+|\\s+$/g, '')\n// \"#id div.class\"\n")])])]),t("p",[t("code",[e._v("replace")]),e._v("方法的第二个参数可以使用美元符号"),t("code",[e._v("$")]),e._v("，用来指代所替换的内容。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("$&")]),e._v("：匹配的子字符串。")]),e._v(" "),t("li",[e._v("`$``：匹配结果前面的文本。")]),e._v(" "),t("li",[t("code",[e._v("$'")]),e._v("：匹配结果后面的文本。")]),e._v(" "),t("li",[t("code",[e._v("$n")]),e._v("：匹配成功的第"),t("code",[e._v("n")]),e._v("组内容，"),t("code",[e._v("n")]),e._v("是从1开始的自然数。")]),e._v(" "),t("li",[t("code",[e._v("$$")]),e._v("：指代美元符号"),t("code",[e._v("$")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'hello world'.replace(/(\\w+)\\s(\\w+)/, '$2 $1')\n// \"world hello\"\n\n'abc'.replace('b', '[$`-$&-$\\']')\n// \"a[a-b-c]c\"\n")])])]),t("p",[e._v("上面代码中，第一个例子是将匹配的组互换位置，第二个例子是改写匹配的值。")]),e._v(" "),t("p",[t("code",[e._v("replace")]),e._v("方法的第二个参数还可以是一个函数，将每一个匹配内容替换为函数返回值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'3 and 5'.replace(/[0-9]+/g, function (match) {\n  return 2 * match;\n})\n// \"6 and 10\"\n\nvar a = 'The quick brown fox jumped over the lazy dog.';\nvar pattern = /quick|brown|lazy/ig;\n\na.replace(pattern, function replacer(match) {\n  return match.toUpperCase();\n});\n// The QUICK BROWN fox jumped over the LAZY dog.\n")])])]),t("p",[e._v("作为"),t("code",[e._v("replace")]),e._v("方法第二个参数的替换函数，可以接受多个参数。其中，第一个参数是捕捉到的内容，第二个参数是捕捉到的组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置（比如从第五个位置开始），最后一个参数是原字符串。下面是一个网页模板替换的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var prices = {\n  'p1': '$1.99',\n  'p2': '$9.99',\n  'p3': '$5.00'\n};\n\nvar template = '<span id=\"p1\"></span>'\n  + '<span id=\"p2\"></span>'\n  + '<span id=\"p3\"></span>';\n\ntemplate.replace(\n  /(<span id=\")(.*?)(\">)(<\\/span>)/g,\n  function(match, $1, $2, $3, $4){\n    return $1 + $2 + $3 + prices[$2] + $4;\n  }\n);\n// \"<span id=\"p1\">$1.99</span><span id=\"p2\">$9.99</span><span id=\"p3\">$5.00</span>\"\n")])])]),t("p",[e._v("上面代码的捕捉模式中，有四个括号，所以会产生四个组匹配，在匹配函数中用"),t("code",[e._v("$1")]),e._v("到"),t("code",[e._v("$4")]),e._v("表示。匹配函数的作用是将价格插入模板中。")]),e._v(" "),t("h4",{attrs:{id:"string-prototype-split-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split-2"}},[e._v("#")]),e._v(" String.prototype.split()")]),e._v(" "),t("p",[e._v("字符串对象的"),t("code",[e._v("split")]),e._v("方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("str.split(separator, [limit])\n")])])]),t("p",[e._v("该方法接受两个参数，第一个参数是正则表达式，表示分隔规则，第二个参数是返回数组的最大成员数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 非正则分隔\n'a,  b,c, d'.split(',')\n// [ 'a', '  b', 'c', ' d' ]\n\n// 正则分隔，去除多余的空格\n'a,  b,c, d'.split(/, */)\n// [ 'a', 'b', 'c', 'd' ]\n\n// 指定返回数组的最大成员\n'a,  b,c, d'.split(/, */, 2)\n[ 'a', 'b' ]\n")])])]),t("p",[e._v("上面代码使用正则表达式，去除了子字符串的逗号后面的空格。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 例一\n'aaa*a*'.split(/a*/)\n// [ '', '*', '*' ]\n\n// 例二\n'aaa**a*'.split(/a*/)\n// [\"\", \"*\", \"*\", \"*\"]\n")])])]),t("p",[e._v("上面代码的分割规则是0次或多次的"),t("code",[e._v("a")]),e._v("，由于正则默认是贪婪匹配，所以例一的第一个分隔符是"),t("code",[e._v("aaa")]),e._v("，第二个分割符是"),t("code",[e._v("a")]),e._v("，将字符串分成三个部分，包含开始处的空字符串。例二的第一个分隔符是"),t("code",[e._v("aaa")]),e._v("，第二个分隔符是0个"),t("code",[e._v("a")]),e._v("（即空字符），第三个分隔符是"),t("code",[e._v("a")]),e._v("，所以将字符串分成四个部分。")]),e._v(" "),t("p",[e._v("如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'aaa*a*'.split(/(a*)/)\n// [ '', 'aaa', '*', 'a', '*' ]\n")])])]),t("p",[e._v("上面代码的正则表达式使用了括号，第一个组匹配是"),t("code",[e._v("aaa")]),e._v("，第二个组匹配是"),t("code",[e._v("a")]),e._v("，它们都作为数组成员返回。")]),e._v(" "),t("h3",{attrs:{id:"匹配规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则"}},[e._v("#")]),e._v(" 匹配规则")]),e._v(" "),t("p",[e._v("正则表达式的规则很复杂，下面一一介绍这些规则。")]),e._v(" "),t("h4",{attrs:{id:"字面量字符和元字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符和元字符"}},[e._v("#")]),e._v(" 字面量字符和元字符")]),e._v(" "),t("p",[e._v("大部分字符在正则表达式中，就是字面的含义，比如"),t("code",[e._v("/a/")]),e._v("匹配"),t("code",[e._v("a")]),e._v("，"),t("code",[e._v("/b/")]),e._v("匹配"),t("code",[e._v("b")]),e._v("。如果在正则表达式之中，某个字符只表示它字面的含义（就像前面的"),t("code",[e._v("a")]),e._v("和"),t("code",[e._v("b")]),e._v("），那么它们就叫做“字面量字符”（literal characters）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/dog/.test('old dog') // true\n")])])]),t("p",[e._v("上面代码中正则表达式的"),t("code",[e._v("dog")]),e._v("，就是字面量字符，所以"),t("code",[e._v("/dog/")]),e._v("匹配"),t("code",[e._v("old dog")]),e._v("，因为它就表示"),t("code",[e._v("d")]),e._v("、"),t("code",[e._v("o")]),e._v("、"),t("code",[e._v("g")]),e._v("三个字母连在一起。")]),e._v(" "),t("p",[e._v("除了字面量字符以外，还有一部分字符有特殊含义，不代表字面的意思。它们叫做“元字符”（metacharacters），主要有以下几个。")]),e._v(" "),t("p",[t("strong",[e._v("（1）点字符（.)")])]),e._v(" "),t("p",[e._v("点字符（"),t("code",[e._v(".")]),e._v("）匹配除回车（"),t("code",[e._v("\\r")]),e._v("）、换行("),t("code",[e._v("\\n")]),e._v(") 、行分隔符（"),t("code",[e._v("\\u2028")]),e._v("）和段分隔符（"),t("code",[e._v("\\u2029")]),e._v("）以外的所有字符。注意，对于码点大于"),t("code",[e._v("0xFFFF")]),e._v("字符，点字符不能正确匹配，会认为这是两个字符。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/c.t/\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("c.t")]),e._v("匹配"),t("code",[e._v("c")]),e._v("和"),t("code",[e._v("t")]),e._v("之间包含任意一个字符的情况，只要这三个字符在同一行，比如"),t("code",[e._v("cat")]),e._v("、"),t("code",[e._v("c2t")]),e._v("、"),t("code",[e._v("c-t")]),e._v("等等，但是不匹配"),t("code",[e._v("coot")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("（2）位置字符")])]),e._v(" "),t("p",[e._v("位置字符用来提示字符所处的位置，主要有两个字符。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("^")]),e._v(" 表示字符串的开始位置")]),e._v(" "),t("li",[t("code",[e._v("$")]),e._v(" 表示字符串的结束位置")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// test必须出现在开始位置\n/^test/.test('test123') // true\n\n// test必须出现在结束位置\n/test$/.test('new test') // true\n\n// 从开始位置到结束位置只有test\n/^test$/.test('test') // true\n/^test$/.test('test test') // false\n")])])]),t("p",[t("strong",[e._v("（3）选择符（"),t("code",[e._v("|")]),e._v("）")])]),e._v(" "),t("p",[e._v("竖线符号（"),t("code",[e._v("|")]),e._v("）在正则表达式中表示“或关系”（OR），即"),t("code",[e._v("cat|dog")]),e._v("表示匹配"),t("code",[e._v("cat")]),e._v("或"),t("code",[e._v("dog")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/11|22/.test('911') // true\n")])])]),t("p",[e._v("上面代码中，正则表达式指定必须匹配"),t("code",[e._v("11")]),e._v("或"),t("code",[e._v("22")]),e._v("。")]),e._v(" "),t("p",[e._v("多个选择符可以联合使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 匹配fred、barney、betty之中的一个\n/fred|barney|betty/\n")])])]),t("p",[e._v("选择符会包括它前后的多个字符，比如"),t("code",[e._v("/ab|cd/")]),e._v("指的是匹配"),t("code",[e._v("ab")]),e._v("或者"),t("code",[e._v("cd")]),e._v("，而不是指匹配"),t("code",[e._v("b")]),e._v("或者"),t("code",[e._v("c")]),e._v("。如果想修改这个行为，可以使用圆括号。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/a( |\\t)b/.test('a\\tb') // true\n")])])]),t("p",[e._v("上面代码指的是，"),t("code",[e._v("a")]),e._v("和"),t("code",[e._v("b")]),e._v("之间有一个空格或者一个制表符。")]),e._v(" "),t("p",[e._v("其他的元字符还包括"),t("code",[e._v("\\")]),e._v("、"),t("code",[e._v("*")]),e._v("、"),t("code",[e._v("+")]),e._v("、"),t("code",[e._v("?")]),e._v("、"),t("code",[e._v("()")]),e._v("、"),t("code",[e._v("[]")]),e._v("、"),t("code",[e._v("{}")]),e._v("等，将在下文解释。")]),e._v(" "),t("h4",{attrs:{id:"转义符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转义符"}},[e._v("#")]),e._v(" 转义符")]),e._v(" "),t("p",[e._v("正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配"),t("code",[e._v("+")]),e._v("，就要写成"),t("code",[e._v("\\+")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/1+1/.test('1+1')\n// false\n\n/1\\+1/.test('1+1')\n// true\n")])])]),t("p",[e._v("上面代码中，第一个正则表达式之所以不匹配，因为加号是元字符，不代表自身。第二个正则表达式使用反斜杠对加号转义，就能匹配成功。")]),e._v(" "),t("p",[e._v("正则表达式中，需要反斜杠转义的，一共有12个字符："),t("code",[e._v("^")]),e._v("、"),t("code",[e._v(".")]),e._v("、"),t("code",[e._v("[")]),e._v("、"),t("code",[e._v("$")]),e._v("、"),t("code",[e._v("(")]),e._v("、"),t("code",[e._v(")")]),e._v("、"),t("code",[e._v("|")]),e._v("、"),t("code",[e._v("*")]),e._v("、"),t("code",[e._v("+")]),e._v("、"),t("code",[e._v("?")]),e._v("、"),t("code",[e._v("{")]),e._v("和"),t("code",[e._v("\\")]),e._v("。需要特别注意的是，如果使用"),t("code",[e._v("RegExp")]),e._v("方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(new RegExp('1\\+1')).test('1+1')\n// false\n\n(new RegExp('1\\\\+1')).test('1+1')\n// true\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("RegExp")]),e._v("作为构造函数，参数是一个字符串。但是，在字符串内部，反斜杠也是转义字符，所以它会先被反斜杠转义一次，然后再被正则表达式转义一次，因此需要两个反斜杠转义。")]),e._v(" "),t("h4",{attrs:{id:"特殊字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[e._v("#")]),e._v(" 特殊字符")]),e._v(" "),t("p",[e._v("正则表达式对一些不能打印的特殊字符，提供了表达方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("\\cX")]),e._v(" 表示"),t("code",[e._v("Ctrl-[X]")]),e._v("，其中的"),t("code",[e._v("X")]),e._v("是A-Z之中任一个英文字母，用来匹配控制字符。")]),e._v(" "),t("li",[t("code",[e._v("[\\b]")]),e._v(" 匹配退格键(U+0008)，不要与"),t("code",[e._v("\\b")]),e._v("混淆。")]),e._v(" "),t("li",[t("code",[e._v("\\n")]),e._v(" 匹配换行键。")]),e._v(" "),t("li",[t("code",[e._v("\\r")]),e._v(" 匹配回车键。")]),e._v(" "),t("li",[t("code",[e._v("\\t")]),e._v(" 匹配制表符 tab（U+0009）。")]),e._v(" "),t("li",[t("code",[e._v("\\v")]),e._v(" 匹配垂直制表符（U+000B）。")]),e._v(" "),t("li",[t("code",[e._v("\\f")]),e._v(" 匹配换页符（U+000C）。")]),e._v(" "),t("li",[t("code",[e._v("\\0")]),e._v(" 匹配"),t("code",[e._v("null")]),e._v("字符（U+0000）。")]),e._v(" "),t("li",[t("code",[e._v("\\xhh")]),e._v(" 匹配一个以两位十六进制数（"),t("code",[e._v("\\x00")]),e._v("-"),t("code",[e._v("\\xFF")]),e._v("）表示的字符。")]),e._v(" "),t("li",[t("code",[e._v("\\uhhhh")]),e._v(" 匹配一个以四位十六进制数（"),t("code",[e._v("\\u0000")]),e._v("-"),t("code",[e._v("\\uFFFF")]),e._v("）表示的 Unicode 字符。")])]),e._v(" "),t("h4",{attrs:{id:"字符类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[e._v("#")]),e._v(" 字符类")]),e._v(" "),t("p",[e._v("字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如"),t("code",[e._v("[xyz]")]),e._v(" 表示"),t("code",[e._v("x")]),e._v("、"),t("code",[e._v("y")]),e._v("、"),t("code",[e._v("z")]),e._v("之中任选一个匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/[abc]/.test('hello world') // false\n/[abc]/.test('apple') // true\n")])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("hello world")]),e._v("不包含"),t("code",[e._v("a")]),e._v("、"),t("code",[e._v("b")]),e._v("、"),t("code",[e._v("c")]),e._v("这三个字母中的任一个，所以返回"),t("code",[e._v("false")]),e._v("；字符串"),t("code",[e._v("apple")]),e._v("包含字母"),t("code",[e._v("a")]),e._v("，所以返回"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("p",[e._v("有两个字符在字符类中有特殊含义。")]),e._v(" "),t("p",[t("strong",[e._v("（1）脱字符（^）")])]),e._v(" "),t("p",[e._v("如果方括号内的第一个字符是"),t("code",[e._v("[^]")]),e._v("，则表示除了字符类之中的字符，其他字符都可以匹配。比如，"),t("code",[e._v("[^xyz]")]),e._v("表示除了"),t("code",[e._v("x")]),e._v("、"),t("code",[e._v("y")]),e._v("、"),t("code",[e._v("z")]),e._v("之外都可以匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/[^abc]/.test('bbc news') // true\n/[^abc]/.test('bbc') // false\n")])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("bbc news")]),e._v("包含"),t("code",[e._v("a")]),e._v("、"),t("code",[e._v("b")]),e._v("、"),t("code",[e._v("c")]),e._v("以外的其他字符，所以返回"),t("code",[e._v("true")]),e._v("；字符串"),t("code",[e._v("bbc")]),e._v("不包含"),t("code",[e._v("a")]),e._v("、"),t("code",[e._v("b")]),e._v("、"),t("code",[e._v("c")]),e._v("以外的其他字符，所以返回"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("p",[e._v("如果方括号内没有其他字符，即只有"),t("code",[e._v("[^]")]),e._v("，就表示匹配一切字符，其中包括换行符。相比之下，点号作为元字符（"),t("code",[e._v(".")]),e._v("）是不包括换行符的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s = 'Please yes\\nmake my day!';\n\ns.match(/yes.*day/) // null\ns.match(/yes[^]*day/) // [ 'yes\\nmake my day']\n")])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("s")]),e._v("含有一个换行符，点号不包括换行符，所以第一个正则表达式匹配失败；第二个正则表达式"),t("code",[e._v("[^]")]),e._v("包含一切字符，所以匹配成功。")]),e._v(" "),t("blockquote",[t("p",[e._v("注意，脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义。")])]),e._v(" "),t("p",[t("strong",[e._v("（2）连字符（-）")])]),e._v(" "),t("p",[e._v("某些情况下，对于连续序列的字符，连字符（"),t("code",[e._v("-")]),e._v("）用来提供简写形式，表示字符的连续范围。比如，"),t("code",[e._v("[abc]")]),e._v("可以写成"),t("code",[e._v("[a-c]")]),e._v("，"),t("code",[e._v("[0123456789]")]),e._v("可以写成"),t("code",[e._v("[0-9]")]),e._v("，同理"),t("code",[e._v("[A-Z]")]),e._v("表示26个大写字母。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/a-z/.test('b') // false\n/[a-z]/.test('b') // true\n")])])]),t("p",[e._v("上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符"),t("code",[e._v("b")]),e._v("。只有当连字号用在方括号之中，才表示连续的字符序列。")]),e._v(" "),t("p",[e._v("以下都是合法的字符类简写形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31]\n")])])]),t("p",[e._v("上面代码中最后一个字符类"),t("code",[e._v("[1-31]")]),e._v("，不代表"),t("code",[e._v("1")]),e._v("到"),t("code",[e._v("31")]),e._v("，只代表"),t("code",[e._v("1")]),e._v("到"),t("code",[e._v("3")]),e._v("。")]),e._v(" "),t("p",[e._v("连字符还可以用来指定 Unicode 字符的范围。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var str = "\\u0130\\u0131\\u0132";\n/[\\u0128-\\uFFFF]/.test(str)\n// true\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("\\u0128-\\uFFFF")]),e._v("表示匹配码点在"),t("code",[e._v("0128")]),e._v("到"),t("code",[e._v("FFFF")]),e._v("之间的所有字符。")]),e._v(" "),t("p",[e._v("另外，不要过分使用连字符，设定一个很大的范围，否则很可能选中意料之外的字符。最典型的例子就是"),t("code",[e._v("[A-z]")]),e._v("，表面上它是选中从大写的"),t("code",[e._v("A")]),e._v("到小写的"),t("code",[e._v("z")]),e._v("之间52个字母，但是由于在 ASCII 编码之中，大写字母与小写字母之间还有其他字符，结果就会出现意料之外的结果。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/[A-z]/.test('\\\\') // true\n")])])]),t("p",[e._v("上面代码中，由于反斜杠（''）的ASCII码在大写字母与小写字母之间，结果会被选中。")]),e._v(" "),t("h4",{attrs:{id:"预定义模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预定义模式"}},[e._v("#")]),e._v(" 预定义模式")]),e._v(" "),t("p",[e._v("预定义模式指的是某些常见模式的简写方式。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("\\d")]),e._v(" 匹配0-9之间的任一数字，相当于"),t("code",[e._v("[0-9]")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("\\D")]),e._v(" 匹配所有0-9以外的字符，相当于"),t("code",[e._v("[^0-9]")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("\\w")]),e._v(" 匹配任意的字母、数字和下划线，相当于"),t("code",[e._v("[A-Za-z0-9_]")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("\\W")]),e._v(" 除所有字母、数字和下划线以外的字符，相当于"),t("code",[e._v("[^A-Za-z0-9_]")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("\\s")]),e._v(" 匹配空格（包括换行符、制表符、空格符等），相等于"),t("code",[e._v("[ \\t\\r\\n\\v\\f]")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("\\S")]),e._v(" 匹配非空格的字符，相当于"),t("code",[e._v("[^ \\t\\r\\n\\v\\f]")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("\\b")]),e._v(" 匹配词的边界。")]),e._v(" "),t("li",[t("code",[e._v("\\B")]),e._v(" 匹配非词边界，即在词的内部。")])]),e._v(" "),t("p",[e._v("下面是一些例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// \\s 的例子\n/\\s\\w*/.exec('hello world') // [\" world\"]\n\n// \\b 的例子\n/\\bworld/.test('hello world') // true\n/\\bworld/.test('hello-world') // true\n/\\bworld/.test('helloworld') // false\n\n// \\B 的例子\n/\\Bworld/.test('hello-world') // false\n/\\Bworld/.test('helloworld') // true\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("\\s")]),e._v("表示空格，所以匹配结果会包括空格。"),t("code",[e._v("\\b")]),e._v("表示词的边界，所以"),t("code",[e._v("world")]),e._v("的词首必须独立（词尾是否独立未指定），才会匹配。同理，"),t("code",[e._v("\\B")]),e._v("表示非词的边界，只有"),t("code",[e._v("world")]),e._v("的词首不独立，才会匹配。")]),e._v(" "),t("p",[e._v("通常，正则表达式遇到换行符（"),t("code",[e._v("\\n")]),e._v("）就会停止匹配。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var html = "<b>Hello</b>\\n<i>world!</i>";\n\n/.*/.exec(html)[0]\n// "<b>Hello</b>"\n')])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("html")]),e._v("包含一个换行符，结果点字符（"),t("code",[e._v(".")]),e._v("）不匹配换行符，导致匹配结果可能不符合原意。这时使用"),t("code",[e._v("\\s")]),e._v("字符类，就能包括换行符。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var html = "<b>Hello</b>\\n<i>world!</i>";\n\n/[\\S\\s]*/.exec(html)[0]\n// "<b>Hello</b>\\n<i>world!</i>"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("[\\S\\s]")]),e._v("指代一切字符。")]),e._v(" "),t("h4",{attrs:{id:"重复类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重复类"}},[e._v("#")]),e._v(" 重复类")]),e._v(" "),t("p",[e._v("模式的精确匹配次数，使用大括号（"),t("code",[e._v("{}")]),e._v("）表示。"),t("code",[e._v("{n}")]),e._v("表示恰好重复"),t("code",[e._v("n")]),e._v("次，"),t("code",[e._v("{n,}")]),e._v("表示至少重复"),t("code",[e._v("n")]),e._v("次，"),t("code",[e._v("{n,m}")]),e._v("表示重复不少于"),t("code",[e._v("n")]),e._v("次，不多于"),t("code",[e._v("m")]),e._v("次。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/lo{2}k/.test('look') // true\n/lo{2,5}k/.test('looook') // true\n")])])]),t("p",[e._v("上面代码中，第一个模式指定"),t("code",[e._v("o")]),e._v("连续出现2次，第二个模式指定"),t("code",[e._v("o")]),e._v("连续出现2次到5次之间。")]),e._v(" "),t("h4",{attrs:{id:"量词符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#量词符"}},[e._v("#")]),e._v(" 量词符")]),e._v(" "),t("p",[e._v("量词符用来设定某个模式出现的次数。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("?")]),e._v(" 问号表示某个模式出现0次或1次，等同于"),t("code",[e._v("{0, 1}")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("*")]),e._v(" 星号表示某个模式出现0次或多次，等同于"),t("code",[e._v("{0,}")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("+")]),e._v(" 加号表示某个模式出现1次或多次，等同于"),t("code",[e._v("{1,}")]),e._v("。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// t 出现0次或1次\n/t?est/.test('test') // true\n/t?est/.test('est') // true\n\n// t 出现1次或多次\n/t+est/.test('test') // true\n/t+est/.test('ttest') // true\n/t+est/.test('est') // false\n\n// t 出现0次或多次\n/t*est/.test('test') // true\n/t*est/.test('ttest') // true\n/t*est/.test('tttest') // true\n/t*est/.test('est') // true\n")])])]),t("h4",{attrs:{id:"贪婪模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[e._v("#")]),e._v(" 贪婪模式")]),e._v(" "),t("p",[e._v("上一小节的三个量词符，默认情况下都是最大可能匹配，即匹配到下一个字符不满足匹配规则为止。这被称为贪婪模式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s = 'aaa';\ns.match(/a+/) // [\"aaa\"]\n")])])]),t("p",[e._v("上面代码中，模式是"),t("code",[e._v("/a+/")]),e._v("，表示匹配1个"),t("code",[e._v("a")]),e._v("或多个"),t("code",[e._v("a")]),e._v("，那么到底会匹配几个"),t("code",[e._v("a")]),e._v("呢？因为默认是贪婪模式，会一直匹配到字符"),t("code",[e._v("a")]),e._v("不出现为止，所以匹配结果是3个"),t("code",[e._v("a")]),e._v("。")]),e._v(" "),t("p",[e._v("除了贪婪模式，还有非贪婪模式，即最小可能匹配。只要一发现匹配，就返回结果，不要往下检查。如果想将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var s = 'aaa';\ns.match(/a+?/) // [\"a\"]\n")])])]),t("p",[e._v("上面例子中，模式结尾添加了一个问号"),t("code",[e._v("/a+?/")]),e._v("，这时就改为非贪婪模式，一旦条件满足，就不再往下匹配，"),t("code",[e._v("+?")]),e._v("表示只要发现一个"),t("code",[e._v("a")]),e._v("，就不再往下匹配了。")]),e._v(" "),t("p",[e._v("除了非贪婪模式的加号（"),t("code",[e._v("+?")]),e._v("），还有非贪婪模式的星号（"),t("code",[e._v("*?")]),e._v("）和非贪婪模式的问号（"),t("code",[e._v("??")]),e._v("）。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("+?")]),e._v("：表示某个模式出现1次或多次，匹配时采用非贪婪模式。")]),e._v(" "),t("li",[t("code",[e._v("*?")]),e._v("：表示某个模式出现0次或多次，匹配时采用非贪婪模式。")]),e._v(" "),t("li",[t("code",[e._v("??")]),e._v("：表格某个模式出现0次或1次，匹配时采用非贪婪模式。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("'abb'.match(/ab*/) // [\"abb\"]\n'abb'.match(/ab*?/) // [\"a\"]\n\n'abb'.match(/ab?/) // [\"ab\"]\n'abb'.match(/ab??/) // [\"a\"]\n")])])]),t("p",[e._v("上面例子中，"),t("code",[e._v("/ab*/")]),e._v("表示如果"),t("code",[e._v("a")]),e._v("后面有多个"),t("code",[e._v("b")]),e._v("，那么匹配尽可能多的"),t("code",[e._v("b")]),e._v("；"),t("code",[e._v("/ab*?/")]),e._v("表示匹配尽可能少的"),t("code",[e._v("b")]),e._v("，也就是0个"),t("code",[e._v("b")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[e._v("#")]),e._v(" 修饰符")]),e._v(" "),t("p",[e._v("修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部。")]),e._v(" "),t("p",[e._v("修饰符可以单个使用，也可以多个一起使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 单个修饰符\nvar regex = /test/i;\n\n// 多个修饰符\nvar regex = /test/ig;\n")])])]),t("p",[t("strong",[e._v("（1）g 修饰符")])]),e._v(" "),t("p",[e._v("默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。"),t("code",[e._v("g")]),e._v("修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /b/;\nvar str = 'abba';\n\nregex.test(str); // true\nregex.test(str); // true\nregex.test(str); // true\n")])])]),t("p",[e._v("上面代码中，正则模式不含"),t("code",[e._v("g")]),e._v("修饰符，每次都是从字符串头部开始匹配。所以，连续做了三次匹配，都返回"),t("code",[e._v("true")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var regex = /b/g;\nvar str = 'abba';\n\nregex.test(str); // true\nregex.test(str); // true\nregex.test(str); // false\n")])])]),t("p",[e._v("上面代码中，正则模式含有"),t("code",[e._v("g")]),e._v("修饰符，每次都是从上一次匹配成功处，开始向后匹配。因为字符串"),t("code",[e._v("abba")]),e._v("只有两个"),t("code",[e._v("b")]),e._v("，所以前两次匹配结果为"),t("code",[e._v("true")]),e._v("，第三次匹配结果为"),t("code",[e._v("false")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("（2）i 修饰符")])]),e._v(" "),t("p",[e._v("默认情况下，正则对象区分字母的大小写，加上"),t("code",[e._v("i")]),e._v("修饰符以后表示忽略大小写（ignoreCase）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/abc/.test('ABC') // false\n/abc/i.test('ABC') // true\n")])])]),t("p",[e._v("上面代码表示，加了"),t("code",[e._v("i")]),e._v("修饰符以后，不考虑大小写，所以模式"),t("code",[e._v("abc")]),e._v("匹配字符串"),t("code",[e._v("ABC")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("（3）m 修饰符")])]),e._v(" "),t("p",[t("code",[e._v("m")]),e._v("修饰符表示多行模式（multiline），会修改"),t("code",[e._v("^")]),e._v("和"),t("code",[e._v("$")]),e._v("的行为。默认情况下（即不加"),t("code",[e._v("m")]),e._v("修饰符时），"),t("code",[e._v("^")]),e._v("和"),t("code",[e._v("$")]),e._v("匹配字符串的开始处和结尾处，加上"),t("code",[e._v("m")]),e._v("修饰符以后，"),t("code",[e._v("^")]),e._v("和"),t("code",[e._v("$")]),e._v("还会匹配行首和行尾，即"),t("code",[e._v("^")]),e._v("和"),t("code",[e._v("$")]),e._v("会识别换行符（"),t("code",[e._v("\\n")]),e._v("）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/world$/.test('hello world\\n') // false\n/world$/m.test('hello world\\n') // true\n")])])]),t("p",[e._v("上面的代码中，字符串结尾处有一个换行符。如果不加"),t("code",[e._v("m")]),e._v("修饰符，匹配不成功，因为字符串的结尾不是"),t("code",[e._v("world")]),e._v("；加上以后，"),t("code",[e._v("$")]),e._v("可以匹配行尾。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/^b/m.test('a\\nb') // true\n")])])]),t("p",[e._v("上面代码要求匹配行首的"),t("code",[e._v("b")]),e._v("，如果不加"),t("code",[e._v("m")]),e._v("修饰符，就相当于"),t("code",[e._v("b")]),e._v("只能处在字符串的开始处。加上"),t("code",[e._v("m")]),e._v("修饰符以后，换行符"),t("code",[e._v("\\n")]),e._v("也会被认为是一行的开始。")]),e._v(" "),t("h4",{attrs:{id:"组匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组匹配"}},[e._v("#")]),e._v(" 组匹配")]),e._v(" "),t("p",[t("strong",[e._v("（1）概述")])]),e._v(" "),t("p",[e._v("正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/fred+/.test('fredd') // true\n/(fred)+/.test('fredfred') // true\n")])])]),t("p",[e._v("上面代码中，第一个模式没有括号，结果"),t("code",[e._v("+")]),e._v("只表示重复字母"),t("code",[e._v("d")]),e._v("，第二个模式有括号，结果"),t("code",[e._v("+")]),e._v("就表示匹配"),t("code",[e._v("fred")]),e._v("这个词。")]),e._v(" "),t("p",[e._v("下面是另外一个分组捕获的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var m = 'abcabc'.match(/(.)b(.)/);\nm\n// ['abc', 'a', 'c']\n")])])]),t("p",[e._v("上面代码中，正则表达式"),t("code",[e._v("/(.)b(.)/")]),e._v("一共使用两个括号，第一个括号捕获"),t("code",[e._v("a")]),e._v("，第二个括号捕获"),t("code",[e._v("c")]),e._v("。")]),e._v(" "),t("p",[e._v("注意，使用组匹配时，不宜同时使用"),t("code",[e._v("g")]),e._v("修饰符，否则"),t("code",[e._v("match")]),e._v("方法不会捕获分组的内容。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var m = 'abcabc'.match(/(.)b(.)/g);\nm // ['abc', 'abc']\n")])])]),t("p",[e._v("上面代码使用带"),t("code",[e._v("g")]),e._v("修饰符的正则表达式，结果"),t("code",[e._v("match")]),e._v("方法只捕获了匹配整个表达式的部分。这时必须使用正则表达式的"),t("code",[e._v("exec")]),e._v("方法，配合循环，才能读到每一轮匹配的组捕获。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var str = \'abcabc\';\nvar reg = /(.)b(.)/g;\nwhile (true) {\n  var result = reg.exec(str);\n  if (!result) break;\n  console.log(result);\n}\n// ["abc", "a", "c"]\n// ["abc", "a", "c"]\n')])])]),t("p",[e._v("正则表达式内部，还可以用"),t("code",[e._v("\\n")]),e._v("引用括号匹配的内容，"),t("code",[e._v("n")]),e._v("是从1开始的自然数，表示对应顺序的括号。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/(.)b(.)\\1b\\2/.test("abcabc")\n// true\n')])])]),t("p",[e._v("上面的代码中，"),t("code",[e._v("\\1")]),e._v("表示第一个括号匹配的内容（即"),t("code",[e._v("a")]),e._v("），"),t("code",[e._v("\\2")]),e._v("表示第二个括号匹配的内容（即"),t("code",[e._v("c")]),e._v("）。")]),e._v(" "),t("p",[e._v("下面是另外一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/y(..)(.)\\2\\1/.test('yabccab') // true\n")])])]),t("p",[e._v("括号还可以嵌套。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/y((..)\\2)\\1/.test('yabababab') // true\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("\\1")]),e._v("指向外层括号，"),t("code",[e._v("\\2")]),e._v("指向内层括号。")]),e._v(" "),t("p",[e._v("组匹配非常有用，下面是一个匹配网页标签的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var tagName = /<([^>]+)>[^<]*<\\/\\1>/;\n\ntagName.exec(\"<b>bold</b>\")[1]\n// 'b'\n")])])]),t("p",[e._v("上面代码中，圆括号匹配尖括号之中的标签，而"),t("code",[e._v("\\1")]),e._v("就表示对应的闭合标签。")]),e._v(" "),t("p",[e._v("上面代码略加修改，就能捕获带有属性的标签。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var html = \'<b class="hello">Hello</b><i>world</i>\';\nvar tag = /<(\\w+)([^>]*)>(.*?)<\\/\\1>/g;\n\nvar match = tag.exec(html);\n\nmatch[1] // "b"\nmatch[2] // " class="hello""\nmatch[3] // "Hello"\n\nmatch = tag.exec(html);\n\nmatch[1] // "i"\nmatch[2] // ""\nmatch[3] // "world"\n')])])]),t("p",[t("strong",[e._v("（2）非捕获组")])]),e._v(" "),t("p",[t("code",[e._v("(?:x)")]),e._v("称为非捕获组（Non-capturing group），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号。")]),e._v(" "),t("p",[e._v("非捕获组的作用请考虑这样一个场景，假定需要匹配"),t("code",[e._v("foo")]),e._v("或者"),t("code",[e._v("foofoo")]),e._v("，正则表达式就应该写成"),t("code",[e._v("/(foo){1, 2}/")]),e._v("，但是这样会占用一个组匹配。这时，就可以使用非捕获组，将正则表达式改为"),t("code",[e._v("/(?:foo){1, 2}/")]),e._v("，它的作用与前一个正则是一样的，但是不会单独输出括号内部的内容。")]),e._v(" "),t("p",[e._v("请看下面的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var m = \'abc\'.match(/(?:.)b(.)/);\nm // ["abc", "c"]\n')])])]),t("p",[e._v("上面代码中的模式，一共使用了两个括号。其中第一个括号是非捕获组，所以最后返回的结果中没有第一个括号，只有第二个括号匹配的内容。")]),e._v(" "),t("p",[e._v("下面是用来分解网址的正则表达式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 正常匹配\nvar url = /(http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/;\n\nurl.exec(\'http://google.com/\');\n// ["http://google.com/", "http", "google.com", "/"]\n\n// 非捕获组匹配\nvar url = /(?:http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/;\n\nurl.exec(\'http://google.com/\');\n// ["http://google.com/", "google.com", "/"]\n')])])]),t("p",[e._v("上面的代码中，前一个正则表达式是正常匹配，第一个括号返回网络协议；后一个正则表达式是非捕获匹配，返回结果中不包括网络协议。")]),e._v(" "),t("p",[t("strong",[e._v("（3）先行断言")])]),e._v(" "),t("p",[t("code",[e._v("x(?=y)")]),e._v("称为先行断言（Positive look-ahead），"),t("code",[e._v("x")]),e._v("只有在"),t("code",[e._v("y")]),e._v("前面才匹配，"),t("code",[e._v("y")]),e._v("不会被计入返回结果。比如，要匹配后面跟着百分号的数字，可以写成"),t("code",[e._v("/\\d+(?=%)/")]),e._v("。")]),e._v(" "),t("p",[e._v("“先行断言”中，括号里的部分是不会返回的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var m = 'abc'.match(/b(?=c)/);\nm // [\"b\"]\n")])])]),t("p",[e._v("上面的代码使用了先行断言，"),t("code",[e._v("b")]),e._v("在"),t("code",[e._v("c")]),e._v("前面所以被匹配，但是括号对应的"),t("code",[e._v("c")]),e._v("不会被返回。")]),e._v(" "),t("p",[t("strong",[e._v("（4）先行否定断言")])]),e._v(" "),t("p",[t("code",[e._v("x(?!y)")]),e._v("称为先行否定断言（Negative look-ahead），"),t("code",[e._v("x")]),e._v("只有不在"),t("code",[e._v("y")]),e._v("前面才匹配，"),t("code",[e._v("y")]),e._v("不会被计入返回结果。比如，要匹配后面跟的不是百分号的数字，就要写成"),t("code",[e._v("/\\d+(?!%)/")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/\\d+(?!\\.)/.exec('3.14')\n// [\"14\"]\n")])])]),t("p",[e._v("上面代码中，正则表达式指定，只有不在小数点前面的数字才会被匹配，因此返回的结果就是"),t("code",[e._v("14")]),e._v("。")]),e._v(" "),t("p",[e._v("“先行否定断言”中，括号里的部分是不会返回的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var m = 'abd'.match(/b(?!c)/);\nm // ['b']\n")])])]),t("p",[e._v("上面的代码使用了先行否定断言，"),t("code",[e._v("b")]),e._v("不在"),t("code",[e._v("c")]),e._v("前面所以被匹配，而且括号对应的"),t("code",[e._v("d")]),e._v("不会被返回。")]),e._v(" "),t("h3",{attrs:{id:"参考链接-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-5"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Axel Rauschmayer, "),t("a",{attrs:{href:"http://www.2ality.com/2011/04/javascript-overview-of-regular.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript: an overview of the regular expression API"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Mozilla Developer Network, "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[e._v("Regular Expressions"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Axel Rauschmayer, "),t("a",{attrs:{href:"http://www.2ality.com/2013/08/regexp-g.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("The flag /g of JavaScript’s regular expressions"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Sam Hughes, "),t("a",{attrs:{href:"https://qntm.org/files/re/re.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Learn regular expressions in about 55 minutes"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"json-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-对象"}},[e._v("#")]),e._v(" JSON 对象")]),e._v(" "),t("h3",{attrs:{id:"json-格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-格式"}},[e._v("#")]),e._v(" JSON 格式")]),e._v(" "),t("p",[e._v("JSON 格式（JavaScript Object Notation 的缩写）是一种用于数据交换的文本格式，2001年由 Douglas Crockford 提出，目的是取代繁琐笨重的 XML 格式。")]),e._v(" "),t("p",[e._v("相比 XML 格式，JSON 格式有两个显著的优点：书写简单，一目了然；符合 JavaScript 原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON 迅速被接受，已经成为各大网站交换数据的标准格式，并被写入标准。")]),e._v(" "),t("p",[e._v("每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。")]),e._v(" "),t("p",[e._v("JSON 对值的类型和格式有严格的规定。")]),e._v(" "),t("blockquote",[t("ol",[t("li",[e._v("复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。")]),e._v(" "),t("li",[e._v("原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和"),t("code",[e._v("null")]),e._v("（不能使用"),t("code",[e._v("NaN")]),e._v(", "),t("code",[e._v("Infinity")]),e._v(", "),t("code",[e._v("-Infinity")]),e._v("和"),t("code",[e._v("undefined")]),e._v("）。")]),e._v(" "),t("li",[e._v("字符串必须使用双引号表示，不能使用单引号。")]),e._v(" "),t("li",[e._v("对象的键名必须放在双引号里面。")]),e._v(" "),t("li",[e._v("数组或对象最后一个成员的后面，不能加逗号。")])])]),e._v(" "),t("p",[e._v("以下都是合法的 JSON。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('["one", "two", "three"]\n\n{ "one": 1, "two": 2, "three": 3 }\n\n{"names": ["张三", "李四"] }\n\n[ { "name": "张三"}, {"name": "李四"} ]\n')])])]),t("p",[e._v("以下都是不合法的 JSON。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{ name: "张三", \'age\': 32 }  // 属性名必须使用双引号\n\n[32, 64, 128, 0xFFF] // 不能使用十六进制值\n\n{ "name": "张三", "age": undefined } // 不能使用 undefined\n\n{ "name": "张三",\n  "birthday": new Date(\'Fri, 26 Aug 2011 07:13:10 GMT\'),\n  "getName": function () {\n      return this.name;\n  }\n} // 属性值不能使用函数和日期对象\n')])])]),t("p",[e._v("注意，"),t("code",[e._v("null")]),e._v("、空数组和空对象都是合法的 JSON 值。")]),e._v(" "),t("h3",{attrs:{id:"json-对象-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-对象-2"}},[e._v("#")]),e._v(" JSON 对象")]),e._v(" "),t("p",[t("code",[e._v("JSON")]),e._v("对象是 JavaScript 的原生对象，用来处理 JSON 格式数据。它有两个静态方法："),t("code",[e._v("JSON.stringify()")]),e._v("和"),t("code",[e._v("JSON.parse()")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"json-stringify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify"}},[e._v("#")]),e._v(" JSON.stringify()")]),e._v(" "),t("h4",{attrs:{id:"基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),t("p",[t("code",[e._v("JSON.stringify()")]),e._v("方法用于将一个值转为 JSON 字符串。该字符串符合 JSON 格式，并且可以被"),t("code",[e._v("JSON.parse()")]),e._v("方法还原。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('JSON.stringify(\'abc\') // ""abc""\nJSON.stringify(1) // "1"\nJSON.stringify(false) // "false"\nJSON.stringify([]) // "[]"\nJSON.stringify({}) // "{}"\n\nJSON.stringify([1, "false", false])\n// \'[1,"false",false]\'\n\nJSON.stringify({ name: "张三" })\n// \'{"name":"张三"}\'\n')])])]),t("p",[e._v("上面代码将各种类型的值，转成 JSON 字符串。")]),e._v(" "),t("p",[e._v("注意，对于原始类型的字符串，转换结果会带双引号。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('JSON.stringify(\'foo\') === "foo" // false\nJSON.stringify(\'foo\') === "\\"foo\\"" // true\n')])])]),t("p",[e._v("上面代码中，字符串"),t("code",[e._v("foo")]),e._v("，被转成了"),t("code",[e._v('"\\"foo\\""')]),e._v("。这是因为将来还原的时候，内层双引号可以让 JavaScript 引擎知道，这是一个字符串，而不是其他类型的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('JSON.stringify(false) // "false"\nJSON.stringify(\'false\') // "\\"false\\""\n')])])]),t("p",[e._v("上面代码中，如果不是内层的双引号，将来还原的时候，引擎就无法知道原始值是布尔值还是字符串。")]),e._v(" "),t("p",[e._v("如果对象的属性是"),t("code",[e._v("undefined")]),e._v("、函数或 XML 对象，该属性会被"),t("code",[e._v("JSON.stringify()")]),e._v("过滤。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {\n  a: undefined,\n  b: function () {}\n};\n\nJSON.stringify(obj) // "{}"\n')])])]),t("p",[e._v("上面代码中，对象"),t("code",[e._v("obj")]),e._v("的"),t("code",[e._v("a")]),e._v("属性是"),t("code",[e._v("undefined")]),e._v("，而"),t("code",[e._v("b")]),e._v("属性是一个函数，结果都被"),t("code",[e._v("JSON.stringify")]),e._v("过滤。")]),e._v(" "),t("p",[e._v("如果数组的成员是"),t("code",[e._v("undefined")]),e._v("、函数或 XML 对象，则这些值被转成"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var arr = [undefined, function () {}];\nJSON.stringify(arr) // "[null,null]"\n')])])]),t("p",[e._v("上面代码中，数组"),t("code",[e._v("arr")]),e._v("的成员是"),t("code",[e._v("undefined")]),e._v("和函数，它们都被转成了"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("正则对象会被转成空对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('JSON.stringify(/foo/) // "{}"\n')])])]),t("p",[t("code",[e._v("JSON.stringify()")]),e._v("方法会忽略对象的不可遍历的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {};\nObject.defineProperties(obj, {\n  'foo': {\n    value: 1,\n    enumerable: true\n  },\n  'bar': {\n    value: 2,\n    enumerable: false\n  }\n});\n\nJSON.stringify(obj); // \"{\"foo\":1}\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("bar")]),e._v("是"),t("code",[e._v("obj")]),e._v("对象的不可遍历属性，"),t("code",[e._v("JSON.stringify")]),e._v("方法会忽略这个属性。")]),e._v(" "),t("h4",{attrs:{id:"第二个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二个参数"}},[e._v("#")]),e._v(" 第二个参数")]),e._v(" "),t("p",[t("code",[e._v("JSON.stringify()")]),e._v("方法还可以接受一个数组，作为第二个参数，指定参数对象的哪些属性需要转成字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = {\n  'prop1': 'value1',\n  'prop2': 'value2',\n  'prop3': 'value3'\n};\n\nvar selectedProperties = ['prop1', 'prop2'];\n\nJSON.stringify(obj, selectedProperties)\n// \"{\"prop1\":\"value1\",\"prop2\":\"value2\"}\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("JSON.stringify()")]),e._v("方法的第二个参数指定，只转"),t("code",[e._v("prop1")]),e._v("和"),t("code",[e._v("prop2")]),e._v("两个属性。")]),e._v(" "),t("p",[e._v("这个类似白名单的数组，只对对象的属性有效，对数组无效。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("JSON.stringify(['a', 'b'], ['0'])\n// \"[\"a\",\"b\"]\"\n\nJSON.stringify({0: 'a', 1: 'b'}, ['0'])\n// \"{\"0\":\"a\"}\"\n")])])]),t("p",[e._v("上面代码中，第二个参数指定 JSON 格式只转"),t("code",[e._v("0")]),e._v("号属性，实际上对数组是无效的，只对对象有效。")]),e._v(" "),t("p",[e._v("第二个参数还可以是一个函数，用来更改"),t("code",[e._v("JSON.stringify()")]),e._v("的返回值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function f(key, value) {\n  if (typeof value === "number") {\n    value = 2 * value;\n  }\n  return value;\n}\n\nJSON.stringify({ a: 1, b: 2 }, f)\n// \'{"a": 2,"b": 4}\'\n')])])]),t("p",[e._v("上面代码中的"),t("code",[e._v("f")]),e._v("函数，接受两个参数，分别是被转换的对象的键名和键值。如果键值是数值，就将它乘以"),t("code",[e._v("2")]),e._v("，否则就原样返回。")]),e._v(" "),t("p",[e._v("注意，这个处理函数是递归处理所有的键。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {a: {b: 1}};\n\nfunction f(key, value) {\n  console.log("["+ key +"]:" + value);\n  return value;\n}\n\nJSON.stringify(obj, f)\n// []:[object Object]\n// [a]:[object Object]\n// [b]:1\n// \'{"a":{"b":1}}\'\n')])])]),t("p",[e._v("上面代码中，对象"),t("code",[e._v("obj")]),e._v("一共会被"),t("code",[e._v("f")]),e._v("函数处理三次，输出的最后那行是"),t("code",[e._v("JSON.stringify()")]),e._v("的默认输出。第一次键名为空，键值是整个对象"),t("code",[e._v("obj")]),e._v("；第二次键名为"),t("code",[e._v("a")]),e._v("，键值是"),t("code",[e._v("{b: 1}")]),e._v("；第三次键名为"),t("code",[e._v("b")]),e._v("，键值为1。")]),e._v(" "),t("p",[e._v("递归处理中，每一次处理的对象，都是前一次返回的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {a: 1};\n\nfunction f(key, value) {\n  if (typeof value === \'object\') {\n    return {b: 2};\n  }\n  return value * 2;\n}\n\nJSON.stringify(obj, f)\n// "{"b": 4}"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("f")]),e._v("函数修改了对象"),t("code",[e._v("obj")]),e._v("，接着"),t("code",[e._v("JSON.stringify()")]),e._v("方法就递归处理修改后的对象"),t("code",[e._v("obj")]),e._v("。")]),e._v(" "),t("p",[e._v("如果处理函数返回"),t("code",[e._v("undefined")]),e._v("或没有返回值，则该属性会被忽略。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function f(key, value) {\n  if (typeof(value) === "string") {\n    return undefined;\n  }\n  return value;\n}\n\nJSON.stringify({ a: "abc", b: 123 }, f)\n// \'{"b": 123}\'\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("a")]),e._v("属性经过处理后，返回"),t("code",[e._v("undefined")]),e._v("，于是该属性被忽略了。")]),e._v(" "),t("h4",{attrs:{id:"第三个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三个参数"}},[e._v("#")]),e._v(" 第三个参数")]),e._v(" "),t("p",[t("code",[e._v("JSON.stringify()")]),e._v("还可以接受第三个参数，用于增加返回的 JSON 字符串的可读性。")]),e._v(" "),t("p",[e._v("默认返回的是单行字符串，对于大型的 JSON 对象，可读性非常差。第三个参数使得每个属性单独占据一行，并且将每个属性前面添加指定的前缀（不超过10个字符）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 默认输出\nJSON.stringify({ p1: 1, p2: 2 })\n// JSON.stringify({ p1: 1, p2: 2 })\n\n// 分行输出\nJSON.stringify({ p1: 1, p2: 2 }, null, \'\\t\')\n// {\n// \t"p1": 1,\n// \t"p2": 2\n// }\n')])])]),t("p",[e._v("上面例子中，第三个属性"),t("code",[e._v("\\t")]),e._v("在每个属性前面添加一个制表符，然后分行显示。")]),e._v(" "),t("p",[e._v("第三个属性如果是一个数字，则表示每个属性前面添加的空格（最多不超过10个）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('JSON.stringify({ p1: 1, p2: 2 }, null, 2);\n/*\n"{\n  "p1": 1,\n  "p2": 2\n}"\n*/\n')])])]),t("h4",{attrs:{id:"参数对象的-tojson-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数对象的-tojson-方法"}},[e._v("#")]),e._v(" 参数对象的 toJSON() 方法")]),e._v(" "),t("p",[e._v("如果参数对象有自定义的"),t("code",[e._v("toJSON()")]),e._v("方法，那么"),t("code",[e._v("JSON.stringify()")]),e._v("会使用这个方法的返回值作为参数，而忽略原对象的其他属性。")]),e._v(" "),t("p",[e._v("下面是一个普通的对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var user = {\n  firstName: \'三\',\n  lastName: \'张\',\n\n  get fullName(){\n    return this.lastName + this.firstName;\n  }\n};\n\nJSON.stringify(user)\n// "{"firstName":"三","lastName":"张","fullName":"张三"}"\n')])])]),t("p",[e._v("现在，为这个对象加上"),t("code",[e._v("toJSON()")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var user = {\n  firstName: \'三\',\n  lastName: \'张\',\n\n  get fullName(){\n    return this.lastName + this.firstName;\n  },\n\n  toJSON: function () {\n    return {\n      name: this.lastName + this.firstName\n    };\n  }\n};\n\nJSON.stringify(user)\n// "{"name":"张三"}"\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("JSON.stringify()")]),e._v("发现参数对象有"),t("code",[e._v("toJSON()")]),e._v("方法，就直接使用这个方法的返回值作为参数，而忽略原对象的其他参数。")]),e._v(" "),t("p",[t("code",[e._v("Date")]),e._v("对象就有一个自己的"),t("code",[e._v("toJSON()")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var date = new Date(\'2015-01-01\');\ndate.toJSON() // "2015-01-01T00:00:00.000Z"\nJSON.stringify(date) // ""2015-01-01T00:00:00.000Z""\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("JSON.stringify()")]),e._v("发现处理的是"),t("code",[e._v("Date")]),e._v("对象实例，就会调用这个实例对象的"),t("code",[e._v("toJSON()")]),e._v("方法，将该方法的返回值作为参数。")]),e._v(" "),t("p",[t("code",[e._v("toJSON()")]),e._v("方法的一个应用是，将正则对象自动转为字符串。因为"),t("code",[e._v("JSON.stringify()")]),e._v("默认不能转换正则对象，但是设置了"),t("code",[e._v("toJSON()")]),e._v("方法以后，就可以转换正则对象了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {\n  reg: /foo/\n};\n\n// 不设置 toJSON 方法时\nJSON.stringify(obj) // "{"reg":{}}"\n\n// 设置 toJSON 方法时\nRegExp.prototype.toJSON = RegExp.prototype.toString;\nJSON.stringify(/foo/) // ""/foo/""\n')])])]),t("p",[e._v("上面代码在正则对象的原型上面部署了"),t("code",[e._v("toJSON()")]),e._v("方法，将其指向"),t("code",[e._v("toString()")]),e._v("方法，因此转换成 JSON 格式时，正则对象就先调用"),t("code",[e._v("toJSON()")]),e._v("方法转为字符串，然后再被"),t("code",[e._v("JSON.stringify()")]),e._v("方法处理。")]),e._v(" "),t("h3",{attrs:{id:"json-parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-parse"}},[e._v("#")]),e._v(" JSON.parse()")]),e._v(" "),t("p",[t("code",[e._v("JSON.parse()")]),e._v("方法用于将 JSON 字符串转换成对应的值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("JSON.parse('{}') // {}\nJSON.parse('true') // true\nJSON.parse('\"foo\"') // \"foo\"\nJSON.parse('[1, 5, \"false\"]') // [1, 5, \"false\"]\nJSON.parse('null') // null\n\nvar o = JSON.parse('{\"name\": \"张三\"}');\no.name // 张三\n")])])]),t("p",[e._v("如果传入的字符串不是有效的 JSON 格式，"),t("code",[e._v("JSON.parse()")]),e._v("方法将报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("JSON.parse(\"'String'\") // illegal single quotes\n// SyntaxError: Unexpected token ILLEGAL\n")])])]),t("p",[e._v("上面代码中，双引号字符串中是一个单引号字符串，因为单引号字符串不符合 JSON 格式，所以报错。")]),e._v(" "),t("p",[e._v("为了处理解析错误，可以将"),t("code",[e._v("JSON.parse()")]),e._v("方法放在"),t("code",[e._v("try...catch")]),e._v("代码块中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("try {\n  JSON.parse(\"'String'\");\n} catch(e) {\n  console.log('parsing error');\n}\n")])])]),t("p",[t("code",[e._v("JSON.parse()")]),e._v("方法可以接受一个处理函数，作为第二个参数，用法与"),t("code",[e._v("JSON.stringify()")]),e._v("方法类似。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function f(key, value) {\n  if (key === 'a') {\n    return value + 10;\n  }\n  return value;\n}\n\nJSON.parse('{\"a\": 1, \"b\": 2}', f)\n// {a: 11, b: 2}\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("JSON.parse()")]),e._v("的第二个参数是一个函数，如果键名是"),t("code",[e._v("a")]),e._v("，该函数会将键值加上10。")]),e._v(" "),t("h3",{attrs:{id:"参考链接-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-6"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("MDN, "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Using_native_JSON",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using native JSON"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("MDN, "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON.parse"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Dr. Axel Rauschmayer, "),t("a",{attrs:{href:"http://www.2ality.com/2011/08/json-api.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript’s JSON API"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Jim Cowart, "),t("a",{attrs:{href:"http://freshbrewedcode.com/jimcowart/2013/01/29/what-you-might-not-know-about-json-stringify/",target:"_blank",rel:"noopener noreferrer"}},[e._v("What You Might Not Know About JSON.stringify()"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Marco Rogers, "),t("a",{attrs:{href:"https://docs.nodejitsu.com/articles/javascript-conventions/what-is-json/",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is JSON?"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=_.exports}}]);