(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{658:function(e,t,a){"use strict";a.r(t);var v=a(25),n=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[e._v("#")]),e._v(" DOM")]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("h3",{attrs:{id:"dom-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-2"}},[e._v("#")]),e._v(" DOM")]),e._v(" "),a("p",[e._v("DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。")]),e._v(" "),a("p",[e._v("浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。")]),e._v(" "),a("p",[e._v("DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。")]),e._v(" "),a("h3",{attrs:{id:"节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点"}},[e._v("#")]),e._v(" 节点")]),e._v(" "),a("p",[e._v("DOM 的最小组成单位叫做节点（node）。文档的树形结构（DOM 树），就是由各种不同类型的节点组成。每个节点可以看作是文档树的一片叶子。")]),e._v(" "),a("p",[e._v("节点的类型有七种。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Document")]),e._v("：整个文档树的顶层节点")]),e._v(" "),a("li",[a("code",[e._v("DocumentType")]),e._v("："),a("code",[e._v("doctype")]),e._v("标签（比如"),a("code",[e._v("<!DOCTYPE html>")]),e._v("）")]),e._v(" "),a("li",[a("code",[e._v("Element")]),e._v("：网页的各种HTML标签（比如"),a("code",[e._v("<body>")]),e._v("、"),a("code",[e._v("<a>")]),e._v("等）")]),e._v(" "),a("li",[a("code",[e._v("Attr")]),e._v("：网页元素的属性（比如"),a("code",[e._v('class="right"')]),e._v("）")]),e._v(" "),a("li",[a("code",[e._v("Text")]),e._v("：标签之间或标签包含的文本")]),e._v(" "),a("li",[a("code",[e._v("Comment")]),e._v("：注释")]),e._v(" "),a("li",[a("code",[e._v("DocumentFragment")]),e._v("：文档的片段")])]),e._v(" "),a("p",[e._v("浏览器提供一个原生的节点对象"),a("code",[e._v("Node")]),e._v("，上面这七种节点都继承了"),a("code",[e._v("Node")]),e._v("，因此具有一些共同的属性和方法。")]),e._v(" "),a("h3",{attrs:{id:"节点树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点树"}},[e._v("#")]),e._v(" 节点树")]),e._v(" "),a("p",[e._v("一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 DOM 树。它有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，又像一棵树。")]),e._v(" "),a("p",[e._v("浏览器原生提供"),a("code",[e._v("document")]),e._v("节点，代表整个文档。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document\n// 整个文档树\n")])])]),a("p",[e._v("文档的第一层有两个节点，第一个是文档类型节点（"),a("code",[e._v("<!doctype html>")]),e._v("），第二个是 HTML 网页的顶层容器标签"),a("code",[e._v("<html>")]),e._v("。后者构成了树结构的根节点（root node），其他 HTML 标签节点都是它的下级节点。")]),e._v(" "),a("p",[e._v("除了根节点，其他节点都有三种层级关系。")]),e._v(" "),a("ul",[a("li",[e._v("父节点关系（parentNode）：直接的那个上级节点")]),e._v(" "),a("li",[e._v("子节点关系（childNodes）：直接的下级节点")]),e._v(" "),a("li",[e._v("同级节点关系（sibling）：拥有同一个父节点的节点")])]),e._v(" "),a("p",[e._v("DOM 提供操作接口，用来获取这三种关系的节点。比如，子节点接口包括"),a("code",[e._v("firstChild")]),e._v("（第一个子节点）和"),a("code",[e._v("lastChild")]),e._v("（最后一个子节点）等属性，同级节点接口包括"),a("code",[e._v("nextSibling")]),e._v("（紧邻在后的那个同级节点）和"),a("code",[e._v("previousSibling")]),e._v("（紧邻在前的那个同级节点）属性。")]),e._v(" "),a("h2",{attrs:{id:"node-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-接口"}},[e._v("#")]),e._v(" Node 接口")]),e._v(" "),a("p",[e._v("所有 DOM 节点对象都继承了 Node 接口，拥有一些共同的属性和方法。这是 DOM 操作的基础。")]),e._v(" "),a("h3",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-nodetype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nodetype"}},[e._v("#")]),e._v(" Node.prototype.nodeType")]),e._v(" "),a("p",[a("code",[e._v("nodeType")]),e._v("属性返回一个整数值，表示节点的类型。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.nodeType // 9\n")])])]),a("p",[e._v("上面代码中，文档节点的类型值为9。")]),e._v(" "),a("p",[e._v("Node 对象定义了几个常量，对应这些类型值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.nodeType === Node.DOCUMENT_NODE // true\n")])])]),a("p",[e._v("上面代码中，文档节点的"),a("code",[e._v("nodeType")]),e._v("属性等于常量"),a("code",[e._v("Node.DOCUMENT_NODE")]),e._v("。")]),e._v(" "),a("p",[e._v("不同节点的"),a("code",[e._v("nodeType")]),e._v("属性值和对应的常量如下。")]),e._v(" "),a("ul",[a("li",[e._v("文档节点（document）：9，对应常量"),a("code",[e._v("Node.DOCUMENT_NODE")])]),e._v(" "),a("li",[e._v("元素节点（element）：1，对应常量"),a("code",[e._v("Node.ELEMENT_NODE")])]),e._v(" "),a("li",[e._v("属性节点（attr）：2，对应常量"),a("code",[e._v("Node.ATTRIBUTE_NODE")])]),e._v(" "),a("li",[e._v("文本节点（text）：3，对应常量"),a("code",[e._v("Node.TEXT_NODE")])]),e._v(" "),a("li",[e._v("文档片断节点（DocumentFragment）：11，对应常量"),a("code",[e._v("Node.DOCUMENT_FRAGMENT_NODE")])]),e._v(" "),a("li",[e._v("文档类型节点（DocumentType）：10，对应常量"),a("code",[e._v("Node.DOCUMENT_TYPE_NODE")])]),e._v(" "),a("li",[e._v("注释节点（Comment）：8，对应常量"),a("code",[e._v("Node.COMMENT_NODE")])])]),e._v(" "),a("p",[e._v("确定节点类型时，使用"),a("code",[e._v("nodeType")]),e._v("属性是常用方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var node = document.documentElement.firstChild;\nif (node.nodeType === Node.ELEMENT_NODE) {\n  console.log('该节点是元素节点');\n}\n")])])]),a("h4",{attrs:{id:"node-prototype-nodename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nodename"}},[e._v("#")]),e._v(" Node.prototype.nodeName")]),e._v(" "),a("p",[a("code",[e._v("nodeName")]),e._v("属性返回节点的名称。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="d1">hello world</div>\nvar div = document.getElementById(\'d1\');\ndiv.nodeName // "DIV"\n')])])]),a("p",[e._v("上面代码中，元素节点"),a("code",[e._v("<div>")]),e._v("的"),a("code",[e._v("nodeName")]),e._v("属性就是大写的标签名"),a("code",[e._v("DIV")]),e._v("。")]),e._v(" "),a("p",[e._v("不同节点的"),a("code",[e._v("nodeName")]),e._v("属性值如下。")]),e._v(" "),a("ul",[a("li",[e._v("文档节点（document）："),a("code",[e._v("#document")])]),e._v(" "),a("li",[e._v("元素节点（element）：大写的标签名")]),e._v(" "),a("li",[e._v("属性节点（attr）：属性的名称")]),e._v(" "),a("li",[e._v("文本节点（text）："),a("code",[e._v("#text")])]),e._v(" "),a("li",[e._v("文档片断节点（DocumentFragment）："),a("code",[e._v("#document-fragment")])]),e._v(" "),a("li",[e._v("文档类型节点（DocumentType）：文档的类型")]),e._v(" "),a("li",[e._v("注释节点（Comment）："),a("code",[e._v("#comment")])])]),e._v(" "),a("h4",{attrs:{id:"node-prototype-nodevalue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nodevalue"}},[e._v("#")]),e._v(" Node.prototype.nodeValue")]),e._v(" "),a("p",[a("code",[e._v("nodeValue")]),e._v("属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。")]),e._v(" "),a("p",[e._v("只有文本节点（text）、注释节点（comment）和属性节点（attr）有文本值，因此这三类节点的"),a("code",[e._v("nodeValue")]),e._v("可以返回结果，其他类型的节点一律返回"),a("code",[e._v("null")]),e._v("。同样的，也只有这三类节点可以设置"),a("code",[e._v("nodeValue")]),e._v("属性的值，其他类型的节点设置无效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="d1">hello world</div>\nvar div = document.getElementById(\'d1\');\ndiv.nodeValue // null\ndiv.firstChild.nodeValue // "hello world"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("div")]),e._v("是元素节点，"),a("code",[e._v("nodeValue")]),e._v("属性返回"),a("code",[e._v("null")]),e._v("。"),a("code",[e._v("div.firstChild")]),e._v("是文本节点，所以可以返回文本值。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-textcontent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-textcontent"}},[e._v("#")]),e._v(" Node.prototype.textContent")]),e._v(" "),a("p",[a("code",[e._v("textContent")]),e._v("属性返回当前节点和它的所有后代节点的文本内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <div id=\"divA\">This is <span>some</span> text</div>\n\ndocument.getElementById('divA').textContent\n// This is some text\n")])])]),a("p",[a("code",[e._v("textContent")]),e._v("属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。")]),e._v(" "),a("p",[e._v("该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。它还有一个好处，就是自动对 HTML 标签转义。这很适合用于用户提供的内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.getElementById('foo').textContent = '<p>GoodBye!</p>';\n")])])]),a("p",[e._v("上面代码在插入文本时，会将"),a("code",[e._v("<p>")]),e._v("标签解释为文本，而不会当作标签处理。")]),e._v(" "),a("p",[e._v("对于文本节点（text）、注释节点（comment）和属性节点（attr），"),a("code",[e._v("textContent")]),e._v("属性的值与"),a("code",[e._v("nodeValue")]),e._v("属性相同。对于其他类型的节点，该属性会将每个子节点（不包括注释节点）的内容连接在一起返回。如果一个节点没有子节点，则返回空字符串。")]),e._v(" "),a("p",[e._v("文档节点（document）和文档类型节点（doctype）的"),a("code",[e._v("textContent")]),e._v("属性为"),a("code",[e._v("null")]),e._v("。如果要读取整个文档的内容，可以使用"),a("code",[e._v("document.documentElement.textContent")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-baseuri"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-baseuri"}},[e._v("#")]),e._v(" Node.prototype.baseURI")]),e._v(" "),a("p",[a("code",[e._v("baseURI")]),e._v("属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 当前网页的网址为\n// http://www.example.com/index.html\ndocument.baseURI\n// "http://www.example.com/index.html"\n')])])]),a("p",[e._v("如果无法读到网页的 URL，"),a("code",[e._v("baseURI")]),e._v("属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[e._v("该属性的值一般由当前网址的 URL（即"),a("code",[e._v("window.location")]),e._v("属性）决定，但是可以使用 HTML 的"),a("code",[e._v("<base>")]),e._v("标签，改变该属性的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<base href="http://www.example.com/page.html">\n')])])]),a("p",[e._v("设置了以后，"),a("code",[e._v("baseURI")]),e._v("属性就返回"),a("code",[e._v("<base>")]),e._v("标签设置的值。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-ownerdocument"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-ownerdocument"}},[e._v("#")]),e._v(" Node.prototype.ownerDocument")]),e._v(" "),a("p",[a("code",[e._v("Node.ownerDocument")]),e._v("属性返回当前节点所在的顶层文档对象，即"),a("code",[e._v("document")]),e._v("对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var d = p.ownerDocument;\nd === document // true\n")])])]),a("p",[a("code",[e._v("document")]),e._v("对象本身的"),a("code",[e._v("ownerDocument")]),e._v("属性，返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-nextsibling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-nextsibling"}},[e._v("#")]),e._v(" Node.prototype.nextSibling")]),e._v(" "),a("p",[a("code",[e._v("Node.nextSibling")]),e._v("属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <div id=\"d1\">hello</div><div id=\"d2\">world</div>\nvar d1 = document.getElementById('d1');\nvar d2 = document.getElementById('d2');\n\nd1.nextSibling === d2 // true\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("d1.nextSibling")]),e._v("就是紧跟在"),a("code",[e._v("d1")]),e._v("后面的同级节点"),a("code",[e._v("d2")]),e._v("。")]),e._v(" "),a("p",[e._v("注意，该属性还包括文本节点和注释节点（"),a("code",[e._v("\x3c!-- comment --\x3e")]),e._v("）。因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。")]),e._v(" "),a("p",[a("code",[e._v("nextSibling")]),e._v("属性可以用来遍历所有子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var el = document.getElementById('div1').firstChild;\n\nwhile (el !== null) {\n  console.log(el.nodeName);\n  el = el.nextSibling;\n}\n")])])]),a("p",[e._v("上面代码遍历"),a("code",[e._v("div1")]),e._v("节点的所有子节点。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-previoussibling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-previoussibling"}},[e._v("#")]),e._v(" Node.prototype.previousSibling")]),e._v(" "),a("p",[a("code",[e._v("previousSibling")]),e._v("属性返回当前节点前面的、距离最近的一个同级节点。如果当前节点前面没有同级节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <div id=\"d1\">hello</div><div id=\"d2\">world</div>\nvar d1 = document.getElementById('d1');\nvar d2 = document.getElementById('d2');\n\nd2.previousSibling === d1 // true\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("d2.previousSibling")]),e._v("就是"),a("code",[e._v("d2")]),e._v("前面的同级节点"),a("code",[e._v("d1")]),e._v("。")]),e._v(" "),a("p",[e._v("注意，该属性还包括文本节点和注释节点。因此如果当前节点前面有空格，该属性会返回一个文本节点，内容为空格。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-parentnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-parentnode"}},[e._v("#")]),e._v(" Node.prototype.parentNode")]),e._v(" "),a("p",[a("code",[e._v("parentNode")]),e._v("属性返回当前节点的父节点。对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (node.parentNode) {\n  node.parentNode.removeChild(node);\n}\n")])])]),a("p",[e._v("上面代码中，通过"),a("code",[e._v("node.parentNode")]),e._v("属性将"),a("code",[e._v("node")]),e._v("节点从文档里面移除。")]),e._v(" "),a("p",[e._v("文档节点（document）和文档片段节点（documentfragment）的父节点都是"),a("code",[e._v("null")]),e._v("。另外，对于那些生成后还没插入 DOM 树的节点，父节点也是"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-parentelement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-parentelement"}},[e._v("#")]),e._v(" Node.prototype.parentElement")]),e._v(" "),a("p",[a("code",[e._v("parentElement")]),e._v("属性返回当前节点的父元素节点。如果当前节点没有父节点，或者父节点类型不是元素节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (node.parentElement) {\n  node.parentElement.style.color = 'red';\n}\n")])])]),a("p",[e._v("上面代码中，父元素节点的样式设定了红色。")]),e._v(" "),a("p",[e._v("由于父节点只可能是三种类型：元素节点、文档节点（document）和文档片段节点（documentfragment）。"),a("code",[e._v("parentElement")]),e._v("属性相当于把后两种父节点都排除了。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-firstchild-node-prototype-lastchild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-firstchild-node-prototype-lastchild"}},[e._v("#")]),e._v(" Node.prototype.firstChild，Node.prototype.lastChild")]),e._v(" "),a("p",[a("code",[e._v("firstChild")]),e._v("属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <p id="p1"><span>First span</span></p>\nvar p1 = document.getElementById(\'p1\');\np1.firstChild.nodeName // "SPAN"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("p")]),e._v("元素的第一个子节点是"),a("code",[e._v("span")]),e._v("元素。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("firstChild")]),e._v("返回的除了元素节点，还可能是文本节点或注释节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <p id="p1">\n//   <span>First span</span>\n//  </p>\nvar p1 = document.getElementById(\'p1\');\np1.firstChild.nodeName // "#text"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("p")]),e._v("元素与"),a("code",[e._v("span")]),e._v("元素之间有空白字符，这导致"),a("code",[e._v("firstChild")]),e._v("返回的是文本节点。")]),e._v(" "),a("p",[a("code",[e._v("lastChild")]),e._v("属性返回当前节点的最后一个子节点，如果当前节点没有子节点，则返回"),a("code",[e._v("null")]),e._v("。用法与"),a("code",[e._v("firstChild")]),e._v("属性相同。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-childnodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-childnodes"}},[e._v("#")]),e._v(" Node.prototype.childNodes")]),e._v(" "),a("p",[a("code",[e._v("childNodes")]),e._v("属性返回一个类似数组的对象（"),a("code",[e._v("NodeList")]),e._v("集合），成员包括当前节点的所有子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.querySelector('ul').childNodes;\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("children")]),e._v("就是"),a("code",[e._v("ul")]),e._v("元素的所有子节点。")]),e._v(" "),a("p",[e._v("使用该属性，可以遍历某个节点的所有子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var div = document.getElementById('div1');\nvar children = div.childNodes;\n\nfor (var i = 0; i < children.length; i++) {\n  // ...\n}\n")])])]),a("p",[e._v("文档节点（document）就有两个子节点：文档类型节点（docType）和 HTML 根元素节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.childNodes;\nfor (var i = 0; i < children.length; i++) {\n  console.log(children[i].nodeType);\n}\n// 10\n// 1\n")])])]),a("p",[e._v("上面代码中，文档节点的第一个子节点的类型是10（即文档类型节点），第二个子节点的类型是1（即元素节点）。")]),e._v(" "),a("p",[e._v("注意，除了元素节点，"),a("code",[e._v("childNodes")]),e._v("属性的返回值还包括文本节点和注释节点。如果当前节点不包括任何子节点，则返回一个空的"),a("code",[e._v("NodeList")]),e._v("集合。由于"),a("code",[e._v("NodeList")]),e._v("对象是一个动态集合，一旦子节点发生变化，立刻会反映在返回结果之中。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-isconnected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-isconnected"}},[e._v("#")]),e._v(" Node.prototype.isConnected")]),e._v(" "),a("p",[a("code",[e._v("isConnected")]),e._v("属性返回一个布尔值，表示当前节点是否在文档之中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = document.createElement('p');\ntest.isConnected // false\n\ndocument.body.appendChild(test);\ntest.isConnected // true\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("test")]),e._v("节点是脚本生成的节点，没有插入文档之前，"),a("code",[e._v("isConnected")]),e._v("属性返回"),a("code",[e._v("false")]),e._v("，插入之后返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-appendchild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-appendchild"}},[e._v("#")]),e._v(" Node.prototype.appendChild()")]),e._v(" "),a("p",[a("code",[e._v("appendChild()")]),e._v("方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。该方法的返回值就是插入文档的子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = document.createElement('p');\ndocument.body.appendChild(p);\n")])])]),a("p",[e._v("上面代码新建一个"),a("code",[e._v("<p>")]),e._v("节点，将其插入"),a("code",[e._v("document.body")]),e._v("的尾部。")]),e._v(" "),a("p",[e._v("如果参数节点是 DOM 已经存在的节点，"),a("code",[e._v("appendChild()")]),e._v("方法会将其从原来的位置，移动到新位置。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var div = document.getElementById('myDiv');\ndocument.body.appendChild(div);\n")])])]),a("p",[e._v("上面代码中，插入的是一个已经存在的节点"),a("code",[e._v("myDiv")]),e._v("，结果就是该节点会从原来的位置，移动到"),a("code",[e._v("document.body")]),e._v("的尾部。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("appendChild()")]),e._v("方法的参数是"),a("code",[e._v("DocumentFragment")]),e._v("节点，那么插入的是"),a("code",[e._v("DocumentFragment")]),e._v("的所有子节点，而不是"),a("code",[e._v("DocumentFragment")]),e._v("节点本身。返回值是一个空的"),a("code",[e._v("DocumentFragment")]),e._v("节点。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-haschildnodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-haschildnodes"}},[e._v("#")]),e._v(" Node.prototype.hasChildNodes()")]),e._v(" "),a("p",[a("code",[e._v("hasChildNodes")]),e._v("方法返回一个布尔值，表示当前节点是否有子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var foo = document.getElementById('foo');\n\nif (foo.hasChildNodes()) {\n  foo.removeChild(foo.childNodes[0]);\n}\n")])])]),a("p",[e._v("上面代码表示，如果"),a("code",[e._v("foo")]),e._v("节点有子节点，就移除第一个子节点。")]),e._v(" "),a("p",[e._v("注意，子节点包括所有类型的节点，并不仅仅是元素节点。哪怕节点只包含一个空格，"),a("code",[e._v("hasChildNodes")]),e._v("方法也会返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("判断一个节点有没有子节点，有许多种方法，下面是其中的三种。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node.hasChildNodes()")])]),e._v(" "),a("li",[a("code",[e._v("node.firstChild !== null")])]),e._v(" "),a("li",[a("code",[e._v("node.childNodes && node.childNodes.length > 0")])])]),e._v(" "),a("p",[a("code",[e._v("hasChildNodes")]),e._v("方法结合"),a("code",[e._v("firstChild")]),e._v("属性和"),a("code",[e._v("nextSibling")]),e._v("属性，可以遍历当前节点的所有后代节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function DOMComb(parent, callback) {\n  if (parent.hasChildNodes()) {\n    for (var node = parent.firstChild; node; node = node.nextSibling) {\n      DOMComb(node, callback);\n    }\n  }\n  callback(parent);\n}\n\n// 用法\nDOMComb(document.body, console.log)\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("DOMComb")]),e._v("函数的第一个参数是某个指定的节点，第二个参数是回调函数。这个回调函数会依次作用于指定节点，以及指定节点的所有后代节点。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-clonenode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-clonenode"}},[e._v("#")]),e._v(" Node.prototype.cloneNode()")]),e._v(" "),a("p",[a("code",[e._v("cloneNode")]),e._v("方法用于克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点。它的返回值是一个克隆出来的新节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var cloneUL = document.querySelector('ul').cloneNode(true);\n")])])]),a("p",[e._v("该方法有一些使用注意点。")]),e._v(" "),a("p",[e._v("（1）克隆一个节点，会拷贝该节点的所有属性，但是会丧失"),a("code",[e._v("addEventListener")]),e._v("方法和"),a("code",[e._v("on-")]),e._v("属性（即"),a("code",[e._v("node.onclick = fn")]),e._v("），添加在这个节点上的事件回调函数。")]),e._v(" "),a("p",[e._v("（2）该方法返回的节点不在文档之中，即没有任何父节点，必须使用诸如"),a("code",[e._v("Node.appendChild")]),e._v("这样的方法添加到文档之中。")]),e._v(" "),a("p",[e._v("（3）克隆一个节点之后，DOM 有可能出现两个有相同"),a("code",[e._v("id")]),e._v("属性（即"),a("code",[e._v('id="xxx"')]),e._v("）的网页元素，这时应该修改其中一个元素的"),a("code",[e._v("id")]),e._v("属性。如果原节点有"),a("code",[e._v("name")]),e._v("属性，可能也需要修改。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-insertbefore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-insertbefore"}},[e._v("#")]),e._v(" Node.prototype.insertBefore()")]),e._v(" "),a("p",[a("code",[e._v("insertBefore")]),e._v("方法用于将某个节点插入父节点内部的指定位置。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var insertedNode = parentNode.insertBefore(newNode, referenceNode);\n")])])]),a("p",[a("code",[e._v("insertBefore")]),e._v("方法接受两个参数，第一个参数是所要插入的节点"),a("code",[e._v("newNode")]),e._v("，第二个参数是父节点"),a("code",[e._v("parentNode")]),e._v("内部的一个子节点"),a("code",[e._v("referenceNode")]),e._v("。"),a("code",[e._v("newNode")]),e._v("将插在"),a("code",[e._v("referenceNode")]),e._v("这个子节点的前面。返回值是插入的新节点"),a("code",[e._v("newNode")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = document.createElement('p');\ndocument.body.insertBefore(p, document.body.firstChild);\n")])])]),a("p",[e._v("上面代码中，新建一个"),a("code",[e._v("<p>")]),e._v("节点，插在"),a("code",[e._v("document.body.firstChild")]),e._v("的前面，也就是成为"),a("code",[e._v("document.body")]),e._v("的第一个子节点。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("insertBefore")]),e._v("方法的第二个参数为"),a("code",[e._v("null")]),e._v("，则新节点将插在当前节点内部的最后位置，即变成最后一个子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = document.createElement('p');\ndocument.body.insertBefore(p, null);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("p")]),e._v("将成为"),a("code",[e._v("document.body")]),e._v("的最后一个子节点。这也说明"),a("code",[e._v("insertBefore")]),e._v("的第二个参数不能省略。")]),e._v(" "),a("p",[e._v("注意，如果所要插入的节点是当前 DOM 现有的节点，则该节点将从原有的位置移除，插入新的位置。")]),e._v(" "),a("p",[e._v("由于不存在"),a("code",[e._v("insertAfter")]),e._v("方法，如果新节点要插在父节点的某个子节点后面，可以用"),a("code",[e._v("insertBefore")]),e._v("方法结合"),a("code",[e._v("nextSibling")]),e._v("属性模拟。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("parent.insertBefore(s1, s2.nextSibling);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("parent")]),e._v("是父节点，"),a("code",[e._v("s1")]),e._v("是一个全新的节点，"),a("code",[e._v("s2")]),e._v("是可以将"),a("code",[e._v("s1")]),e._v("节点，插在"),a("code",[e._v("s2")]),e._v("节点的后面。如果"),a("code",[e._v("s2")]),e._v("是当前节点的最后一个子节点，则"),a("code",[e._v("s2.nextSibling")]),e._v("返回"),a("code",[e._v("null")]),e._v("，这时"),a("code",[e._v("s1")]),e._v("节点会插在当前节点的最后，变成当前节点的最后一个子节点，等于紧跟在"),a("code",[e._v("s2")]),e._v("的后面。")]),e._v(" "),a("p",[e._v("如果要插入的节点是"),a("code",[e._v("DocumentFragment")]),e._v("类型，那么插入的将是"),a("code",[e._v("DocumentFragment")]),e._v("的所有子节点，而不是"),a("code",[e._v("DocumentFragment")]),e._v("节点本身。返回值将是一个空的"),a("code",[e._v("DocumentFragment")]),e._v("节点。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-removechild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-removechild"}},[e._v("#")]),e._v(" Node.prototype.removeChild()")]),e._v(" "),a("p",[a("code",[e._v("removeChild")]),e._v("方法接受一个子节点作为参数，用于从当前节点移除该子节点。返回值是移除的子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var divA = document.getElementById('A');\ndivA.parentNode.removeChild(divA);\n")])])]),a("p",[e._v("上面代码移除了"),a("code",[e._v("divA")]),e._v("节点。注意，这个方法是在"),a("code",[e._v("divA")]),e._v("的父节点上调用的，不是在"),a("code",[e._v("divA")]),e._v("上调用的。")]),e._v(" "),a("p",[e._v("下面是如何移除当前节点的所有子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var element = document.getElementById('top');\nwhile (element.firstChild) {\n  element.removeChild(element.firstChild);\n}\n")])])]),a("p",[e._v("被移除的节点依然存在于内存之中，但不再是 DOM 的一部分。所以，一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。")]),e._v(" "),a("p",[e._v("如果参数节点不是当前节点的子节点，"),a("code",[e._v("removeChild")]),e._v("方法将报错。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-replacechild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-replacechild"}},[e._v("#")]),e._v(" Node.prototype.replaceChild()")]),e._v(" "),a("p",[a("code",[e._v("replaceChild")]),e._v("方法用于将一个新的节点，替换当前节点的某一个子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var replacedNode = parentNode.replaceChild(newChild, oldChild);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("replaceChild")]),e._v("方法接受两个参数，第一个参数"),a("code",[e._v("newChild")]),e._v("是用来替换的新节点，第二个参数"),a("code",[e._v("oldChild")]),e._v("是将要替换走的子节点。返回值是替换走的那个节点"),a("code",[e._v("oldChild")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var divA = document.getElementById('divA');\nvar newSpan = document.createElement('span');\nnewSpan.textContent = 'Hello World!';\ndivA.parentNode.replaceChild(newSpan, divA);\n")])])]),a("p",[e._v("上面代码是如何将指定节点"),a("code",[e._v("divA")]),e._v("替换走。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-contains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-contains"}},[e._v("#")]),e._v(" Node.prototype.contains()")]),e._v(" "),a("p",[a("code",[e._v("contains")]),e._v("方法返回一个布尔值，表示参数节点是否满足以下三个条件之一。")]),e._v(" "),a("ul",[a("li",[e._v("参数节点为当前节点。")]),e._v(" "),a("li",[e._v("参数节点为当前节点的子节点。")]),e._v(" "),a("li",[e._v("参数节点为当前节点的后代节点。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.contains(node)\n")])])]),a("p",[e._v("上面代码检查参数节点"),a("code",[e._v("node")]),e._v("，是否包含在当前文档之中。")]),e._v(" "),a("p",[e._v("注意，当前节点传入"),a("code",[e._v("contains")]),e._v("方法，返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("nodeA.contains(nodeA) // true\n")])])]),a("h4",{attrs:{id:"node-prototype-comparedocumentposition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-comparedocumentposition"}},[e._v("#")]),e._v(" Node.prototype.compareDocumentPosition()")]),e._v(" "),a("p",[a("code",[e._v("compareDocumentPosition")]),e._v("方法的用法，与"),a("code",[e._v("contains")]),e._v("方法完全一致，返回一个六个比特位的二进制值，表示参数节点与当前节点的关系。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("二进制值")]),e._v(" "),a("th",[e._v("十进制值")]),e._v(" "),a("th",[e._v("含义")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("000000")]),e._v(" "),a("td",[e._v("0")]),e._v(" "),a("td",[e._v("两个节点相同")])]),e._v(" "),a("tr",[a("td",[e._v("000001")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("两个节点不在同一个文档（即有一个节点不在当前文档）")])]),e._v(" "),a("tr",[a("td",[e._v("000010")]),e._v(" "),a("td",[e._v("2")]),e._v(" "),a("td",[e._v("参数节点在当前节点的前面")])]),e._v(" "),a("tr",[a("td",[e._v("000100")]),e._v(" "),a("td",[e._v("4")]),e._v(" "),a("td",[e._v("参数节点在当前节点的后面")])]),e._v(" "),a("tr",[a("td",[e._v("001000")]),e._v(" "),a("td",[e._v("8")]),e._v(" "),a("td",[e._v("参数节点包含当前节点")])]),e._v(" "),a("tr",[a("td",[e._v("010000")]),e._v(" "),a("td",[e._v("16")]),e._v(" "),a("td",[e._v("当前节点包含参数节点")])]),e._v(" "),a("tr",[a("td",[e._v("100000")]),e._v(" "),a("td",[e._v("32")]),e._v(" "),a("td",[e._v("浏览器内部使用")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <div id=\"mydiv\">\n//   <form><input id=\"test\" /></form>\n// </div>\n\nvar div = document.getElementById('mydiv');\nvar input = document.getElementById('test');\n\ndiv.compareDocumentPosition(input) // 20\ninput.compareDocumentPosition(div) // 10\n")])])]),a("p",[e._v("上面代码中，节点"),a("code",[e._v("div")]),e._v("包含节点"),a("code",[e._v("input")]),e._v("（二进制"),a("code",[e._v("010000")]),e._v("），而且节点"),a("code",[e._v("input")]),e._v("在节点"),a("code",[e._v("div")]),e._v("的后面（二进制"),a("code",[e._v("000100")]),e._v("），所以第一个"),a("code",[e._v("compareDocumentPosition")]),e._v("方法返回"),a("code",[e._v("20")]),e._v("（二进制"),a("code",[e._v("010100")]),e._v("，即"),a("code",[e._v("010000 + 000100")]),e._v("），第二个"),a("code",[e._v("compareDocumentPosition")]),e._v("方法返回"),a("code",[e._v("10")]),e._v("（二进制"),a("code",[e._v("001010")]),e._v("）。")]),e._v(" "),a("p",[e._v("由于"),a("code",[e._v("compareDocumentPosition")]),e._v("返回值的含义，定义在每一个比特位上，所以如果要检查某一种特定的含义，就需要使用比特位运算符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var head = document.head;\nvar body = document.body;\nif (head.compareDocumentPosition(body) & 4) {\n  console.log('文档结构正确');\n} else {\n  console.log('<body> 不能在 <head> 前面');\n}\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("compareDocumentPosition")]),e._v("的返回值与"),a("code",[e._v("4")]),e._v("（又称掩码）进行与运算（"),a("code",[e._v("&")]),e._v("），得到一个布尔值，表示"),a("code",[e._v("<head>")]),e._v("是否在"),a("code",[e._v("<body>")]),e._v("前面。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-isequalnode-node-prototype-issamenode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-isequalnode-node-prototype-issamenode"}},[e._v("#")]),e._v(" Node.prototype.isEqualNode()，Node.prototype.isSameNode()")]),e._v(" "),a("p",[a("code",[e._v("isEqualNode")]),e._v("方法返回一个布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p1 = document.createElement('p');\nvar p2 = document.createElement('p');\n\np1.isEqualNode(p2) // true\n")])])]),a("p",[a("code",[e._v("isSameNode")]),e._v("方法返回一个布尔值，表示两个节点是否为同一个节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p1 = document.createElement('p');\nvar p2 = document.createElement('p');\n\np1.isSameNode(p2) // false\np1.isSameNode(p1) // true\n")])])]),a("h4",{attrs:{id:"node-prototype-normalize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-normalize"}},[e._v("#")]),e._v(" Node.prototype.normalize()")]),e._v(" "),a("p",[a("code",[e._v("normalize")]),e._v("方法用于清理当前节点内部的所有文本节点（text）。它会去除空的文本节点，并且将毗邻的文本节点合并成一个，也就是说不存在空的文本节点，以及毗邻的文本节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var wrapper = document.createElement('div');\n\nwrapper.appendChild(document.createTextNode('Part 1 '));\nwrapper.appendChild(document.createTextNode('Part 2 '));\n\nwrapper.childNodes.length // 2\nwrapper.normalize();\nwrapper.childNodes.length // 1\n")])])]),a("p",[e._v("上面代码使用"),a("code",[e._v("normalize")]),e._v("方法之前，"),a("code",[e._v("wrapper")]),e._v("节点有两个毗邻的文本子节点。使用"),a("code",[e._v("normalize")]),e._v("方法之后，两个文本子节点被合并成一个。")]),e._v(" "),a("p",[e._v("该方法是"),a("code",[e._v("Text.splitText")]),e._v("的逆方法，可以查看《Text 节点对象》一章，了解更多内容。")]),e._v(" "),a("h4",{attrs:{id:"node-prototype-getrootnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-prototype-getrootnode"}},[e._v("#")]),e._v(" Node.prototype.getRootNode()")]),e._v(" "),a("p",[a("code",[e._v("getRootNode()")]),e._v("方法返回当前节点所在文档的根节点"),a("code",[e._v("document")]),e._v("，与"),a("code",[e._v("ownerDocument")]),e._v("属性的作用相同。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.firstChild.getRootNode() === document\n// true\ndocument.body.firstChild.getRootNode() === document.body.firstChild.ownerDocument\n// true\n")])])]),a("p",[e._v("该方法可用于"),a("code",[e._v("document")]),e._v("节点自身，这一点与"),a("code",[e._v("document.ownerDocument")]),e._v("不同。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.getRootNode() // document\ndocument.ownerDocument // null\n")])])]),a("h2",{attrs:{id:"nodelist-接口-htmlcollection接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-接口-htmlcollection接口"}},[e._v("#")]),e._v(" NodeList 接口，HTMLCollection接口")]),e._v(" "),a("p",[e._v("节点都是单个对象，有时需要一种数据结构，能够容纳多个节点。DOM 提供两种节点集合，用于容纳多个节点："),a("code",[e._v("NodeList")]),e._v("和"),a("code",[e._v("HTMLCollection")]),e._v("。")]),e._v(" "),a("p",[e._v("这两种集合都属于接口规范。许多 DOM 属性和方法，返回的结果是"),a("code",[e._v("NodeList")]),e._v("实例或"),a("code",[e._v("HTMLCollection")]),e._v("实例。主要区别是，"),a("code",[e._v("NodeList")]),e._v("可以包含各种类型的节点，"),a("code",[e._v("HTMLCollection")]),e._v("只能包含 HTML 元素节点。")]),e._v(" "),a("h3",{attrs:{id:"nodelist-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-接口"}},[e._v("#")]),e._v(" NodeList 接口")]),e._v(" "),a("h4",{attrs:{id:"概述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[a("code",[e._v("NodeList")]),e._v("实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到"),a("code",[e._v("NodeList")]),e._v("实例。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Node.childNodes")])]),e._v(" "),a("li",[a("code",[e._v("document.querySelectorAll()")]),e._v("等节点搜索方法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.childNodes instanceof NodeList // true\n")])])]),a("p",[a("code",[e._v("NodeList")]),e._v("实例很像数组，可以使用"),a("code",[e._v("length")]),e._v("属性和"),a("code",[e._v("forEach")]),e._v("方法。但是，它不是数组，不能使用"),a("code",[e._v("pop")]),e._v("或"),a("code",[e._v("push")]),e._v("之类数组特有的方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.body.childNodes;\n\nArray.isArray(children) // false\n\nchildren.length // 34\nchildren.forEach(console.log)\n")])])]),a("p",[e._v("上面代码中，NodeList 实例"),a("code",[e._v("children")]),e._v("不是数组，但是具有"),a("code",[e._v("length")]),e._v("属性和"),a("code",[e._v("forEach")]),e._v("方法。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("NodeList")]),e._v("实例要使用数组方法，可以将其转为真正的数组。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.body.childNodes;\nvar nodeArr = Array.prototype.slice.call(children);\n")])])]),a("p",[e._v("除了使用"),a("code",[e._v("forEach")]),e._v("方法遍历 NodeList 实例，还可以使用"),a("code",[e._v("for")]),e._v("循环。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.body.childNodes;\n\nfor (var i = 0; i < children.length; i++) {\n  var item = children[i];\n}\n")])])]),a("p",[e._v("注意，NodeList 实例可能是动态集合，也可能是静态集合。所谓动态集合就是一个活的集合，DOM 删除或新增一个相关节点，都会立刻反映在 NodeList 实例。目前，只有"),a("code",[e._v("Node.childNodes")]),e._v("返回的是一个动态集合，其他的 NodeList 都是静态集合。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.body.childNodes;\nchildren.length // 18\ndocument.body.appendChild(document.createElement('p'));\nchildren.length // 19\n")])])]),a("p",[e._v("上面代码中，文档增加一个子节点，NodeList 实例"),a("code",[e._v("children")]),e._v("的"),a("code",[e._v("length")]),e._v("属性就增加了1。")]),e._v(" "),a("h4",{attrs:{id:"nodelist-prototype-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-prototype-length"}},[e._v("#")]),e._v(" NodeList.prototype.length")]),e._v(" "),a("p",[a("code",[e._v("length")]),e._v("属性返回 NodeList 实例包含的节点数量。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.querySelectorAll('xxx').length\n// 0\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("document.querySelectorAll")]),e._v("返回一个 NodeList 集合。对于那些不存在的 HTML 标签，"),a("code",[e._v("length")]),e._v("属性返回"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"nodelist-prototype-foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-prototype-foreach"}},[e._v("#")]),e._v(" NodeList.prototype.forEach()")]),e._v(" "),a("p",[a("code",[e._v("forEach")]),e._v("方法用于遍历 NodeList 的所有成员。它接受一个回调函数作为参数，每一轮遍历就执行一次这个回调函数，用法与数组实例的"),a("code",[e._v("forEach")]),e._v("方法完全一致。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.body.childNodes;\nchildren.forEach(function f(item, i, list) {\n  // ...\n}, this);\n")])])]),a("p",[e._v("上面代码中，回调函数"),a("code",[e._v("f")]),e._v("的三个参数依次是当前成员、位置和当前 NodeList 实例。"),a("code",[e._v("forEach")]),e._v("方法的第二个参数，用于绑定回调函数内部的"),a("code",[e._v("this")]),e._v("，该参数可省略。")]),e._v(" "),a("h4",{attrs:{id:"nodelist-prototype-item"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-prototype-item"}},[e._v("#")]),e._v(" NodeList.prototype.item()")]),e._v(" "),a("p",[a("code",[e._v("item")]),e._v("方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.childNodes.item(0)\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("item(0)")]),e._v("返回第一个成员。")]),e._v(" "),a("p",[e._v("如果参数值大于实际长度，或者索引不合法（比如负数），"),a("code",[e._v("item")]),e._v("方法返回"),a("code",[e._v("null")]),e._v("。如果省略参数，"),a("code",[e._v("item")]),e._v("方法会报错。")]),e._v(" "),a("p",[e._v("所有类似数组的对象，都可以使用方括号运算符取出成员。一般情况下，都是使用方括号运算符，而不使用"),a("code",[e._v("item")]),e._v("方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.childNodes[0]\n")])])]),a("h4",{attrs:{id:"nodelist-prototype-keys-nodelist-prototype-values-nodelist-prototype-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelist-prototype-keys-nodelist-prototype-values-nodelist-prototype-entries"}},[e._v("#")]),e._v(" NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()")]),e._v(" "),a("p",[e._v("这三个方法都返回一个 ES6 的遍历器对象，可以通过"),a("code",[e._v("for...of")]),e._v("循环遍历获取每一个成员的信息。区别在于，"),a("code",[e._v("keys()")]),e._v("返回键名的遍历器，"),a("code",[e._v("values()")]),e._v("返回键值的遍历器，"),a("code",[e._v("entries()")]),e._v("返回的遍历器同时包含键名和键值的信息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var children = document.body.childNodes;\n\nfor (var key of children.keys()) {\n  console.log(key);\n}\n// 0\n// 1\n// 2\n// ...\n\nfor (var value of children.values()) {\n  console.log(value);\n}\n// #text\n// <script>\n// ...\n\nfor (var entry of children.entries()) {\n  console.log(entry);\n}\n// Array [ 0, #text ]\n// Array [ 1, <script> ]\n// ...\n")])])]),a("h3",{attrs:{id:"htmlcollection-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-接口"}},[e._v("#")]),e._v(" HTMLCollection 接口")]),e._v(" "),a("h4",{attrs:{id:"概述-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-3"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[a("code",[e._v("HTMLCollection")]),e._v("是一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。它的返回值是一个类似数组的对象，但是与"),a("code",[e._v("NodeList")]),e._v("接口不同，"),a("code",[e._v("HTMLCollection")]),e._v("没有"),a("code",[e._v("forEach")]),e._v("方法，只能使用"),a("code",[e._v("for")]),e._v("循环遍历。")]),e._v(" "),a("p",[e._v("返回"),a("code",[e._v("HTMLCollection")]),e._v("实例的，主要是一些"),a("code",[e._v("Document")]),e._v("对象的集合属性，比如"),a("code",[e._v("document.links")]),e._v("、"),a("code",[e._v("document.forms")]),e._v("、"),a("code",[e._v("document.images")]),e._v("等。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.links instanceof HTMLCollection // true\n")])])]),a("p",[a("code",[e._v("HTMLCollection")]),e._v("实例都是动态集合，节点的变化会实时反映在集合中。")]),e._v(" "),a("p",[e._v("如果元素节点有"),a("code",[e._v("id")]),e._v("或"),a("code",[e._v("name")]),e._v("属性，那么"),a("code",[e._v("HTMLCollection")]),e._v("实例上面，可以使用"),a("code",[e._v("id")]),e._v("属性或"),a("code",[e._v("name")]),e._v("属性引用该节点元素。如果没有对应的节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <img id="pic" src="http://example.com/foo.jpg">\n\nvar pic = document.getElementById(\'pic\');\ndocument.images.pic === pic // true\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("document.images")]),e._v("是一个"),a("code",[e._v("HTMLCollection")]),e._v("实例，可以通过"),a("code",[e._v("<img>")]),e._v("元素的"),a("code",[e._v("id")]),e._v("属性值，从"),a("code",[e._v("HTMLCollection")]),e._v("实例上取到这个元素。")]),e._v(" "),a("h4",{attrs:{id:"htmlcollection-prototype-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-prototype-length"}},[e._v("#")]),e._v(" HTMLCollection.prototype.length")]),e._v(" "),a("p",[a("code",[e._v("length")]),e._v("属性返回"),a("code",[e._v("HTMLCollection")]),e._v("实例包含的成员数量。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.links.length // 18\n")])])]),a("h4",{attrs:{id:"htmlcollection-prototype-item"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-prototype-item"}},[e._v("#")]),e._v(" HTMLCollection.prototype.item()")]),e._v(" "),a("p",[a("code",[e._v("item")]),e._v("方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var c = document.images;\nvar img0 = c.item(0);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("item(0)")]),e._v("表示返回0号位置的成员。由于方括号运算符也具有同样作用，而且使用更方便，所以一般情况下，总是使用方括号运算符。")]),e._v(" "),a("p",[e._v("如果参数值超出成员数量或者不合法（比如小于0），那么"),a("code",[e._v("item")]),e._v("方法返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"htmlcollection-prototype-nameditem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmlcollection-prototype-nameditem"}},[e._v("#")]),e._v(" HTMLCollection.prototype.namedItem()")]),e._v(" "),a("p",[a("code",[e._v("namedItem")]),e._v("方法的参数是一个字符串，表示"),a("code",[e._v("id")]),e._v("属性或"),a("code",[e._v("name")]),e._v("属性的值，返回当前集合中对应的元素节点。如果没有对应的节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <img id=\"pic\" src=\"http://example.com/foo.jpg\">\n\nvar pic = document.getElementById('pic');\ndocument.images.namedItem('pic') === pic // true\n")])])]),a("p",[a("code",[e._v("Collection.namedItem('value')")]),e._v("等同于"),a("code",[e._v("Collection['value']")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"parentnode-接口-childnode-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-接口-childnode-接口"}},[e._v("#")]),e._v(" ParentNode 接口，ChildNode 接口")]),e._v(" "),a("p",[e._v("节点对象除了继承 Node 接口以外，还拥有其他接口。"),a("code",[e._v("ParentNode")]),e._v("接口表示当前节点是一个父节点，提供一些处理子节点的方法。"),a("code",[e._v("ChildNode")]),e._v("接口表示当前节点是一个子节点，提供一些相关方法。")]),e._v(" "),a("h3",{attrs:{id:"parentnode-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-接口"}},[e._v("#")]),e._v(" ParentNode 接口")]),e._v(" "),a("p",[e._v("如果当前节点是父节点，就会混入了（mixin）"),a("code",[e._v("ParentNode")]),e._v("接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会拥有"),a("code",[e._v("ParentNode")]),e._v("接口。")]),e._v(" "),a("h4",{attrs:{id:"parentnode-children"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-children"}},[e._v("#")]),e._v(" ParentNode.children")]),e._v(" "),a("p",[a("code",[e._v("children")]),e._v("属性返回一个"),a("code",[e._v("HTMLCollection")]),e._v("实例，成员是当前节点的所有元素子节点。该属性只读。")]),e._v(" "),a("p",[e._v("下面是遍历某个节点的所有元素子节点的示例。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (var i = 0; i < el.children.length; i++) {\n  // ...\n}\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("children")]),e._v("属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。如果没有元素类型的子节点，返回值"),a("code",[e._v("HTMLCollection")]),e._v("实例的"),a("code",[e._v("length")]),e._v("属性为"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("p",[e._v("另外，"),a("code",[e._v("HTMLCollection")]),e._v("是动态集合，会实时反映 DOM 的任何变化。")]),e._v(" "),a("h4",{attrs:{id:"parentnode-firstelementchild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-firstelementchild"}},[e._v("#")]),e._v(" ParentNode.firstElementChild")]),e._v(" "),a("p",[a("code",[e._v("firstElementChild")]),e._v("属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.firstElementChild.nodeName\n// "HTML"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("document")]),e._v("节点的第一个元素子节点是"),a("code",[e._v("<HTML>")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"parentnode-lastelementchild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-lastelementchild"}},[e._v("#")]),e._v(" ParentNode.lastElementChild")]),e._v(" "),a("p",[a("code",[e._v("lastElementChild")]),e._v("属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.lastElementChild.nodeName\n// "HTML"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("document")]),e._v("节点的最后一个元素子节点是"),a("code",[e._v("<HTML>")]),e._v("（因为"),a("code",[e._v("document")]),e._v("只包含这一个元素子节点）。")]),e._v(" "),a("h4",{attrs:{id:"parentnode-childelementcount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-childelementcount"}},[e._v("#")]),e._v(" ParentNode.childElementCount")]),e._v(" "),a("p",[a("code",[e._v("childElementCount")]),e._v("属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.childElementCount // 13\n")])])]),a("h4",{attrs:{id:"parentnode-append-parentnode-prepend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parentnode-append-parentnode-prepend"}},[e._v("#")]),e._v(" ParentNode.append()，ParentNode.prepend()")]),e._v(" "),a("p",[a("strong",[e._v("（1）ParentNode.append()")])]),e._v(" "),a("p",[a("code",[e._v("append()")]),e._v("方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。")]),e._v(" "),a("p",[e._v("该方法不仅可以添加元素子节点（参数为元素节点），还可以添加文本子节点（参数为字符串）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var parent = document.body;\n\n// 添加元素子节点\nvar p = document.createElement('p');\nparent.append(p);\n\n// 添加文本子节点\nparent.append('Hello');\n\n// 添加多个元素子节点\nvar p1 = document.createElement('p');\nvar p2 = document.createElement('p');\nparent.append(p1, p2);\n\n// 添加元素子节点和文本子节点\nvar p = document.createElement('p');\nparent.append('Hello', p);\n")])])]),a("p",[e._v("该方法没有返回值。")]),e._v(" "),a("p",[e._v("注意，该方法与"),a("code",[e._v("Node.prototype.appendChild()")]),e._v("方法有三点不同。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("append()")]),e._v("允许字符串作为参数，"),a("code",[e._v("appendChild()")]),e._v("只允许子节点作为参数。")]),e._v(" "),a("li",[a("code",[e._v("append()")]),e._v("没有返回值，而"),a("code",[e._v("appendChild()")]),e._v("返回添加的子节点。")]),e._v(" "),a("li",[a("code",[e._v("append()")]),e._v("可以添加多个子节点和字符串（即允许多个参数），"),a("code",[e._v("appendChild()")]),e._v("只能添加一个节点（即只允许一个参数）。")])]),e._v(" "),a("p",[a("strong",[e._v("（2）ParentNode.prepend()")])]),e._v(" "),a("p",[a("code",[e._v("prepend()")]),e._v("方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。它的用法与"),a("code",[e._v("append()")]),e._v("方法完全一致，也是没有返回值。")]),e._v(" "),a("h3",{attrs:{id:"childnode-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#childnode-接口"}},[e._v("#")]),e._v(" ChildNode 接口")]),e._v(" "),a("p",[e._v("如果一个节点有父节点，那么该节点就拥有了"),a("code",[e._v("ChildNode")]),e._v("接口。")]),e._v(" "),a("h4",{attrs:{id:"childnode-remove"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#childnode-remove"}},[e._v("#")]),e._v(" ChildNode.remove()")]),e._v(" "),a("p",[a("code",[e._v("remove()")]),e._v("方法用于从父节点移除当前节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("el.remove()\n")])])]),a("p",[e._v("上面代码在 DOM 里面移除了"),a("code",[e._v("el")]),e._v("节点。")]),e._v(" "),a("h4",{attrs:{id:"childnode-before-childnode-after"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#childnode-before-childnode-after"}},[e._v("#")]),e._v(" ChildNode.before()，ChildNode.after()")]),e._v(" "),a("p",[a("strong",[e._v("（1）ChildNode.before()")])]),e._v(" "),a("p",[a("code",[e._v("before()")]),e._v("方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。")]),e._v(" "),a("p",[e._v("注意，该方法不仅可以插入元素节点，还可以插入文本节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = document.createElement('p');\nvar p1 = document.createElement('p');\n\n// 插入元素节点\nel.before(p);\n\n// 插入文本节点\nel.before('Hello');\n\n// 插入多个元素节点\nel.before(p, p1);\n\n// 插入元素节点和文本节点\nel.before(p, 'Hello');\n")])])]),a("p",[a("strong",[e._v("（2）ChildNode.after()")])]),e._v(" "),a("p",[a("code",[e._v("after()")]),e._v("方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。用法与"),a("code",[e._v("before")]),e._v("方法完全相同。")]),e._v(" "),a("h4",{attrs:{id:"childnode-replacewith"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#childnode-replacewith"}},[e._v("#")]),e._v(" ChildNode.replaceWith()")]),e._v(" "),a("p",[a("code",[e._v("replaceWith()")]),e._v("方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var span = document.createElement('span');\nel.replaceWith(span);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("el")]),e._v("节点将被"),a("code",[e._v("span")]),e._v("节点替换。")]),e._v(" "),a("h2",{attrs:{id:"document-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-节点"}},[e._v("#")]),e._v(" Document 节点")]),e._v(" "),a("h3",{attrs:{id:"概述-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-4"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[a("code",[e._v("document")]),e._v("节点对象代表整个文档，每张网页都有自己的"),a("code",[e._v("document")]),e._v("对象。"),a("code",[e._v("window.document")]),e._v("属性就指向这个对象。只要浏览器开始载入 HTML 文档，该对象就存在了，可以直接使用。")]),e._v(" "),a("p",[a("code",[e._v("document")]),e._v("对象有不同的办法可以获取。")]),e._v(" "),a("ul",[a("li",[e._v("正常的网页，直接使用"),a("code",[e._v("document")]),e._v("或"),a("code",[e._v("window.document")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("iframe")]),e._v("框架里面的网页，使用"),a("code",[e._v("iframe")]),e._v("节点的"),a("code",[e._v("contentDocument")]),e._v("属性。")]),e._v(" "),a("li",[e._v("Ajax 操作返回的文档，使用"),a("code",[e._v("XMLHttpRequest")]),e._v("对象的"),a("code",[e._v("responseXML")]),e._v("属性。")]),e._v(" "),a("li",[e._v("内部节点的"),a("code",[e._v("ownerDocument")]),e._v("属性。")])]),e._v(" "),a("p",[a("code",[e._v("document")]),e._v("对象继承了"),a("code",[e._v("EventTarget")]),e._v("接口和"),a("code",[e._v("Node")]),e._v("接口，并且混入（mixin）了"),a("code",[e._v("ParentNode")]),e._v("接口。这意味着，这些接口的方法都可以在"),a("code",[e._v("document")]),e._v("对象上调用。除此之外，"),a("code",[e._v("document")]),e._v("对象还有很多自己的属性和方法。")]),e._v(" "),a("h3",{attrs:{id:"属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),a("h4",{attrs:{id:"快捷方式属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快捷方式属性"}},[e._v("#")]),e._v(" 快捷方式属性")]),e._v(" "),a("p",[e._v("以下属性是指向文档内部的某个节点的快捷方式。")]),e._v(" "),a("p",[a("strong",[e._v("（1）document.defaultView")])]),e._v(" "),a("p",[a("code",[e._v("document.defaultView")]),e._v("属性返回"),a("code",[e._v("document")]),e._v("对象所属的"),a("code",[e._v("window")]),e._v("对象。如果当前文档不属于"),a("code",[e._v("window")]),e._v("对象，该属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.defaultView === window // true\n")])])]),a("p",[a("strong",[e._v("（2）document.doctype")])]),e._v(" "),a("p",[e._v("对于 HTML 文档来说，"),a("code",[e._v("document")]),e._v("对象一般有两个子节点。第一个子节点是"),a("code",[e._v("document.doctype")]),e._v("，指向"),a("code",[e._v("<DOCTYPE>")]),e._v("节点，即文档类型（Document Type Declaration，简写DTD）节点。HTML 的文档类型节点，一般写成"),a("code",[e._v("<!DOCTYPE html>")]),e._v("。如果网页没有声明 DTD，该属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var doctype = document.doctype;\ndoctype // "<!DOCTYPE html>"\ndoctype.name // "html"\n')])])]),a("p",[a("code",[e._v("document.firstChild")]),e._v("通常就返回这个节点。")]),e._v(" "),a("p",[a("strong",[e._v("（3）document.documentElement")])]),e._v(" "),a("p",[a("code",[e._v("document.documentElement")]),e._v("属性返回当前文档的根元素节点（root）。它通常是"),a("code",[e._v("document")]),e._v("节点的第二个子节点，紧跟在"),a("code",[e._v("document.doctype")]),e._v("节点后面。HTML网页的该属性，一般是"),a("code",[e._v("<html>")]),e._v("节点。")]),e._v(" "),a("p",[a("strong",[e._v("（4）document.body，document.head")])]),e._v(" "),a("p",[a("code",[e._v("document.body")]),e._v("属性指向"),a("code",[e._v("<body>")]),e._v("节点，"),a("code",[e._v("document.head")]),e._v("属性指向"),a("code",[e._v("<head>")]),e._v("节点。")]),e._v(" "),a("p",[e._v("这两个属性总是存在的，如果网页源码里面省略了"),a("code",[e._v("<head>")]),e._v("或"),a("code",[e._v("<body>")]),e._v("，浏览器会自动创建。另外，这两个属性是可写的，如果改写它们的值，相当于移除所有子节点。")]),e._v(" "),a("p",[a("strong",[e._v("（5）document.scrollingElement")])]),e._v(" "),a("p",[a("code",[e._v("document.scrollingElement")]),e._v("属性返回文档的滚动元素。也就是说，当文档整体滚动时，到底是哪个元素在滚动。")]),e._v(" "),a("p",[e._v("标准模式下，这个属性返回的文档的根元素"),a("code",[e._v("document.documentElement")]),e._v("（即"),a("code",[e._v("<html>")]),e._v("）。兼容（quirk）模式下，返回的是"),a("code",[e._v("<body>")]),e._v("元素，如果该元素不存在，返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 页面滚动到浏览器顶部\ndocument.scrollingElement.scrollTop = 0;\n")])])]),a("p",[a("strong",[e._v("（6）document.activeElement")])]),e._v(" "),a("p",[a("code",[e._v("document.activeElement")]),e._v("属性返回获得当前焦点（focus）的 DOM 元素。通常，这个属性返回的是"),a("code",[e._v("<input>")]),e._v("、"),a("code",[e._v("<textarea>")]),e._v("、"),a("code",[e._v("<select>")]),e._v("等表单元素，如果当前没有焦点元素，返回"),a("code",[e._v("<body>")]),e._v("元素或"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("（7）document.fullscreenElement")])]),e._v(" "),a("p",[a("code",[e._v("document.fullscreenElement")]),e._v("属性返回当前以全屏状态展示的 DOM 元素。如果不是全屏状态，该属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (document.fullscreenElement.nodeName == 'VIDEO') {\n  console.log('全屏播放视频');\n}\n")])])]),a("p",[e._v("上面代码中，通过"),a("code",[e._v("document.fullscreenElement")]),e._v("可以知道"),a("code",[e._v("<video>")]),e._v("元素有没有处在全屏状态，从而判断用户行为。")]),e._v(" "),a("h4",{attrs:{id:"节点集合属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点集合属性"}},[e._v("#")]),e._v(" 节点集合属性")]),e._v(" "),a("p",[e._v("以下属性返回一个"),a("code",[e._v("HTMLCollection")]),e._v("实例，表示文档内部特定元素的集合。这些集合都是动态的，原节点有任何变化，立刻会反映在集合中。")]),e._v(" "),a("p",[a("strong",[e._v("（1）document.links")])]),e._v(" "),a("p",[a("code",[e._v("document.links")]),e._v("属性返回当前文档所有设定了"),a("code",[e._v("href")]),e._v("属性的"),a("code",[e._v("<a>")]),e._v("及"),a("code",[e._v("<area>")]),e._v("节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 打印文档所有的链接\nvar links = document.links;\nfor(var i = 0; i < links.length; i++) {\n  console.log(links[i]);\n}\n")])])]),a("p",[a("strong",[e._v("（2）document.forms")])]),e._v(" "),a("p",[a("code",[e._v("document.forms")]),e._v("属性返回所有"),a("code",[e._v("<form>")]),e._v("表单节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var selectForm = document.forms[0];\n")])])]),a("p",[e._v("上面代码获取文档第一个表单。")]),e._v(" "),a("p",[e._v("除了使用位置序号，"),a("code",[e._v("id")]),e._v("属性和"),a("code",[e._v("name")]),e._v("属性也可以用来引用表单。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/* HTML 代码如下\n  <form name="foo" id="bar"></form>\n*/\ndocument.forms[0] === document.forms.foo // true\ndocument.forms.bar === document.forms.foo // true\n')])])]),a("p",[a("strong",[e._v("（3）document.images")])]),e._v(" "),a("p",[a("code",[e._v("document.images")]),e._v("属性返回页面所有"),a("code",[e._v("<img>")]),e._v("图片节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var imglist = document.images;\n\nfor(var i = 0; i < imglist.length; i++) {\n  if (imglist[i].src === 'banner.gif') {\n    // ...\n  }\n}\n")])])]),a("p",[e._v("上面代码在所有"),a("code",[e._v("img")]),e._v("标签中，寻找某张图片。")]),e._v(" "),a("p",[a("strong",[e._v("（4）document.embeds，document.plugins")])]),e._v(" "),a("p",[a("code",[e._v("document.embeds")]),e._v("属性和"),a("code",[e._v("document.plugins")]),e._v("属性，都返回所有"),a("code",[e._v("<embed>")]),e._v("节点。")]),e._v(" "),a("p",[a("strong",[e._v("（5）document.scripts")])]),e._v(" "),a("p",[a("code",[e._v("document.scripts")]),e._v("属性返回所有"),a("code",[e._v("<script>")]),e._v("节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var scripts = document.scripts;\nif (scripts.length !== 0 ) {\n  console.log('当前网页有脚本');\n}\n")])])]),a("p",[a("strong",[e._v("（6）document.styleSheets")])]),e._v(" "),a("p",[a("code",[e._v("document.styleSheets")]),e._v("属性返回网页内嵌或引入的 CSS 样式表集合，详细介绍请看《CSS 操作》一章。")]),e._v(" "),a("p",[a("strong",[e._v("（7）小结")])]),e._v(" "),a("p",[e._v("除了"),a("code",[e._v("document.styleSheets")]),e._v("属性，以上的其他集合属性返回的都是"),a("code",[e._v("HTMLCollection")]),e._v("实例。"),a("code",[e._v("document.styleSheets")]),e._v("属性返回的是"),a("code",[e._v("StyleSheetList")]),e._v("实例。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.links instanceof HTMLCollection // true\ndocument.images instanceof HTMLCollection // true\ndocument.forms instanceof HTMLCollection // true\ndocument.embeds instanceof HTMLCollection // true\ndocument.scripts instanceof HTMLCollection // true\n")])])]),a("p",[a("code",[e._v("HTMLCollection")]),e._v("实例是类似数组的对象，所以上面这些属性都有"),a("code",[e._v("length")]),e._v("属性，都可以使用方括号运算符引用成员。如果成员有"),a("code",[e._v("id")]),e._v("或"),a("code",[e._v("name")]),e._v("属性，还可以用这两个属性的值，在"),a("code",[e._v("HTMLCollection")]),e._v("实例上引用到这个成员。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <form name="myForm">\ndocument.myForm === document.forms.myForm // true\n')])])]),a("h4",{attrs:{id:"文档静态信息属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档静态信息属性"}},[e._v("#")]),e._v(" 文档静态信息属性")]),e._v(" "),a("p",[e._v("以下属性返回文档信息。")]),e._v(" "),a("p",[a("strong",[e._v("（1）document.documentURI，document.URL")])]),e._v(" "),a("p",[a("code",[e._v("document.documentURI")]),e._v("属性和"),a("code",[e._v("document.URL")]),e._v("属性都返回一个字符串，表示当前文档的网址。不同之处是它们继承自不同的接口，"),a("code",[e._v("documentURI")]),e._v("继承自"),a("code",[e._v("Document")]),e._v("接口，可用于所有文档；"),a("code",[e._v("URL")]),e._v("继承自"),a("code",[e._v("HTMLDocument")]),e._v("接口，只能用于 HTML 文档。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.URL\n// http://www.example.com/about\n\ndocument.documentURI === document.URL\n// true\n")])])]),a("p",[e._v("如果文档的锚点（"),a("code",[e._v("#anchor")]),e._v("）变化，这两个属性都会跟着变化。")]),e._v(" "),a("p",[a("strong",[e._v("（2）document.domain")])]),e._v(" "),a("p",[a("code",[e._v("document.domain")]),e._v("属性返回当前文档的域名，不包含协议和端口。比如，网页的网址是"),a("code",[e._v("http://www.example.com:80/hello.html")]),e._v("，那么"),a("code",[e._v("document.domain")]),e._v("属性就等于"),a("code",[e._v("www.example.com")]),e._v("。如果无法获取域名，该属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("document.domain")]),e._v("基本上是一个只读属性，只有一种情况除外。次级域名的网页，可以把"),a("code",[e._v("document.domain")]),e._v("设为对应的上级域名。比如，当前域名是"),a("code",[e._v("a.sub.example.com")]),e._v("，则"),a("code",[e._v("document.domain")]),e._v("属性可以设置为"),a("code",[e._v("sub.example.com")]),e._v("，也可以设为"),a("code",[e._v("example.com")]),e._v("。修改后，"),a("code",[e._v("document.domain")]),e._v("相同的两个网页，可以读取对方的资源，比如设置的 Cookie。")]),e._v(" "),a("p",[e._v("另外，设置"),a("code",[e._v("document.domain")]),e._v("会导致端口被改成"),a("code",[e._v("null")]),e._v("。因此，如果通过设置"),a("code",[e._v("document.domain")]),e._v("来进行通信，双方网页都必须设置这个值，才能保证端口相同。")]),e._v(" "),a("p",[a("strong",[e._v("（3）document.location")])]),e._v(" "),a("p",[a("code",[e._v("Location")]),e._v("对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过"),a("code",[e._v("window.location")]),e._v("和"),a("code",[e._v("document.location")]),e._v("属性，可以拿到这个对象。")]),e._v(" "),a("p",[e._v("关于这个对象的详细介绍，请看《浏览器模型》部分的《Location 对象》章节。")]),e._v(" "),a("p",[a("strong",[e._v("（4）document.lastModified")])]),e._v(" "),a("p",[a("code",[e._v("document.lastModified")]),e._v("属性返回一个字符串，表示当前文档最后修改的时间。不同浏览器的返回值，日期格式是不一样的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.lastModified\n// "03/07/2018 11:18:27"\n')])])]),a("p",[e._v("注意，"),a("code",[e._v("document.lastModified")]),e._v("属性的值是字符串，所以不能直接用来比较。"),a("code",[e._v("Date.parse")]),e._v("方法将其转为"),a("code",[e._v("Date")]),e._v("实例，才能比较两个网页。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var lastVisitedDate = Date.parse('01/01/2018');\nif (Date.parse(document.lastModified) > lastVisitedDate) {\n  console.log('网页已经变更');\n}\n")])])]),a("p",[e._v("如果页面上有 JavaScript 生成的内容，"),a("code",[e._v("document.lastModified")]),e._v("属性返回的总是当前时间。")]),e._v(" "),a("p",[a("strong",[e._v("（5）document.title")])]),e._v(" "),a("p",[a("code",[e._v("document.title")]),e._v("属性返回当前文档的标题。默认情况下，返回"),a("code",[e._v("<title>")]),e._v("节点的值。但是该属性是可写的，一旦被修改，就返回修改后的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.title = '新标题';\ndocument.title // \"新标题\"\n")])])]),a("p",[a("strong",[e._v("（6）document.characterSet")])]),e._v(" "),a("p",[a("code",[e._v("document.characterSet")]),e._v("属性返回当前文档的编码，比如"),a("code",[e._v("UTF-8")]),e._v("、"),a("code",[e._v("ISO-8859-1")]),e._v("等等。")]),e._v(" "),a("p",[a("strong",[e._v("（7）document.referrer")])]),e._v(" "),a("p",[a("code",[e._v("document.referrer")]),e._v("属性返回一个字符串，表示当前文档的访问者来自哪里。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.referrer\n// "https://example.com/path"\n')])])]),a("p",[e._v("如果无法获取来源，或者用户直接键入网址而不是从其他网页点击进入，"),a("code",[e._v("document.referrer")]),e._v("返回一个空字符串。")]),e._v(" "),a("p",[a("code",[e._v("document.referrer")]),e._v("的值，总是与 HTTP 头信息的"),a("code",[e._v("Referer")]),e._v("字段保持一致。但是，"),a("code",[e._v("document.referrer")]),e._v("的拼写有两个"),a("code",[e._v("r")]),e._v("，而头信息的"),a("code",[e._v("Referer")]),e._v("字段只有一个"),a("code",[e._v("r")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("（8）document.dir")])]),e._v(" "),a("p",[a("code",[e._v("document.dir")]),e._v("返回一个字符串，表示文字方向。它只有两个可能的值："),a("code",[e._v("rtl")]),e._v("表示文字从右到左，阿拉伯文是这种方式；"),a("code",[e._v("ltr")]),e._v("表示文字从左到右，包括英语和汉语在内的大多数文字采用这种方式。")]),e._v(" "),a("p",[a("strong",[e._v("（9）document.compatMode")])]),e._v(" "),a("p",[a("code",[e._v("compatMode")]),e._v("属性返回浏览器处理文档的模式，可能的值为"),a("code",[e._v("BackCompat")]),e._v("（向后兼容模式）和"),a("code",[e._v("CSS1Compat")]),e._v("（严格模式）。")]),e._v(" "),a("p",[e._v("一般来说，如果网页代码的第一行设置了明确的"),a("code",[e._v("DOCTYPE")]),e._v("（比如"),a("code",[e._v("<!doctype html>")]),e._v("），"),a("code",[e._v("document.compatMode")]),e._v("的值都为"),a("code",[e._v("CSS1Compat")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"文档状态属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档状态属性"}},[e._v("#")]),e._v(" 文档状态属性")]),e._v(" "),a("p",[a("strong",[e._v("（1）document.hidden")])]),e._v(" "),a("p",[a("code",[e._v("document.hidden")]),e._v("属性返回一个布尔值，表示当前页面是否可见。如果窗口最小化、浏览器切换了 Tab，都会导致导致页面不可见，使得"),a("code",[e._v("document.hidden")]),e._v("返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("这个属性是 Page Visibility API 引入的，一般都是配合这个 API 使用。")]),e._v(" "),a("p",[a("strong",[e._v("（2）document.visibilityState")])]),e._v(" "),a("p",[a("code",[e._v("document.visibilityState")]),e._v("返回文档的可见状态。")]),e._v(" "),a("p",[e._v("它的值有四种可能。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("code",[e._v("visible")]),e._v("：页面可见。注意，页面可能是部分可见，即不是焦点窗口，前面被其他窗口部分挡住了。")]),e._v(" "),a("li",[a("code",[e._v("hidden")]),e._v("：页面不可见，有可能窗口最小化，或者浏览器切换到了另一个 Tab。")]),e._v(" "),a("li",[a("code",[e._v("prerender")]),e._v("：页面处于正在渲染状态，对于用户来说，该页面不可见。")]),e._v(" "),a("li",[a("code",[e._v("unloaded")]),e._v("：页面从内存里面卸载了。")])])]),e._v(" "),a("p",[e._v("这个属性可以用在页面加载时，防止加载某些资源；或者页面不可见时，停掉一些页面功能。")]),e._v(" "),a("p",[a("strong",[e._v("（3）document.readyState")])]),e._v(" "),a("p",[a("code",[e._v("document.readyState")]),e._v("属性返回当前文档的状态，共有三种可能的值。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("loading")]),e._v("：加载 HTML 代码阶段（尚未完成解析）")]),e._v(" "),a("li",[a("code",[e._v("interactive")]),e._v("：加载外部资源阶段")]),e._v(" "),a("li",[a("code",[e._v("complete")]),e._v("：加载完成")])]),e._v(" "),a("p",[e._v("这个属性变化的过程如下。")]),e._v(" "),a("ol",[a("li",[e._v("浏览器开始解析 HTML 文档，"),a("code",[e._v("document.readyState")]),e._v("属性等于"),a("code",[e._v("loading")]),e._v("。")]),e._v(" "),a("li",[e._v("浏览器遇到 HTML 文档中的"),a("code",[e._v("<script>")]),e._v("元素，并且没有"),a("code",[e._v("async")]),e._v("或"),a("code",[e._v("defer")]),e._v("属性，就暂停解析，开始执行脚本，这时"),a("code",[e._v("document.readyState")]),e._v("属性还是等于"),a("code",[e._v("loading")]),e._v("。")]),e._v(" "),a("li",[e._v("HTML 文档解析完成，"),a("code",[e._v("document.readyState")]),e._v("属性变成"),a("code",[e._v("interactive")]),e._v("。")]),e._v(" "),a("li",[e._v("浏览器等待图片、样式表、字体文件等外部资源加载完成，一旦全部加载完成，"),a("code",[e._v("document.readyState")]),e._v("属性变成"),a("code",[e._v("complete")]),e._v("。")])]),e._v(" "),a("p",[e._v("下面的代码用来检查网页是否加载成功。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 基本检查\nif (document.readyState === 'complete') {\n  // ...\n}\n\n// 轮询检查\nvar interval = setInterval(function() {\n  if (document.readyState === 'complete') {\n    clearInterval(interval);\n    // ...\n  }\n}, 100);\n")])])]),a("p",[e._v("另外，每次状态变化都会触发一个"),a("code",[e._v("readystatechange")]),e._v("事件。")]),e._v(" "),a("h4",{attrs:{id:"document-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-cookie"}},[e._v("#")]),e._v(" document.cookie")]),e._v(" "),a("p",[a("code",[e._v("document.cookie")]),e._v("属性用来操作浏览器 Cookie，详见《浏览器模型》部分的《Cookie》章节。")]),e._v(" "),a("h4",{attrs:{id:"document-designmode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-designmode"}},[e._v("#")]),e._v(" document.designMode")]),e._v(" "),a("p",[a("code",[e._v("document.designMode")]),e._v("属性控制当前文档是否可编辑。该属性只有两个值"),a("code",[e._v("on")]),e._v("和"),a("code",[e._v("off")]),e._v("，默认值为"),a("code",[e._v("off")]),e._v("。一旦设为"),a("code",[e._v("on")]),e._v("，用户就可以编辑整个文档的内容。")]),e._v(" "),a("p",[e._v("下面代码打开"),a("code",[e._v("iframe")]),e._v("元素内部文档的"),a("code",[e._v("designMode")]),e._v("属性，就能将其变为一个所见即所得的编辑器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <iframe id=\"editor\" src=\"about:blank\"></iframe>\nvar editor = document.getElementById('editor');\neditor.contentDocument.designMode = 'on';\n")])])]),a("h4",{attrs:{id:"document-currentscript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-currentscript"}},[e._v("#")]),e._v(" document.currentScript")]),e._v(" "),a("p",[a("code",[e._v("document.currentScript")]),e._v("属性只用在"),a("code",[e._v("<script>")]),e._v("元素的内嵌脚本或加载的外部脚本之中，返回当前脚本所在的那个 DOM 节点，即"),a("code",[e._v("<script>")]),e._v("元素的 DOM 节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script id=\"foo\">\n  console.log(\n    document.currentScript === document.getElementById('foo')\n  ); // true\n<\/script>\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("document.currentScript")]),e._v("就是"),a("code",[e._v("<script>")]),e._v("元素节点。")]),e._v(" "),a("h4",{attrs:{id:"document-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-implementation"}},[e._v("#")]),e._v(" document.implementation")]),e._v(" "),a("p",[a("code",[e._v("document.implementation")]),e._v("属性返回一个"),a("code",[e._v("DOMImplementation")]),e._v("对象。该对象有三个方法，主要用于创建独立于当前文档的新的 Document 对象。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("DOMImplementation.createDocument()")]),e._v("：创建一个 XML 文档。")]),e._v(" "),a("li",[a("code",[e._v("DOMImplementation.createHTMLDocument()")]),e._v("：创建一个 HTML 文档。")]),e._v(" "),a("li",[a("code",[e._v("DOMImplementation.createDocumentType()")]),e._v("：创建一个 DocumentType 对象。")])]),e._v(" "),a("p",[e._v("下面是创建 HTML 文档的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var doc = document.implementation.createHTMLDocument('Title');\nvar p = doc.createElement('p');\np.innerHTML = 'hello world';\ndoc.body.appendChild(p);\n\ndocument.replaceChild(\n  doc.documentElement,\n  document.documentElement\n);\n")])])]),a("p",[e._v("上面代码中，第一步生成一个新的 HTML 文档"),a("code",[e._v("doc")]),e._v("，然后用它的根元素"),a("code",[e._v("document.documentElement")]),e._v("替换掉"),a("code",[e._v("document.documentElement")]),e._v("。这会使得当前文档的内容全部消失，变成"),a("code",[e._v("hello world")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),a("h4",{attrs:{id:"document-open-document-close"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-open-document-close"}},[e._v("#")]),e._v(" document.open()，document.close()")]),e._v(" "),a("p",[a("code",[e._v("document.open")]),e._v("方法清除当前文档所有内容，使得文档处于可写状态，供"),a("code",[e._v("document.write")]),e._v("方法写入内容。")]),e._v(" "),a("p",[a("code",[e._v("document.close")]),e._v("方法用来关闭"),a("code",[e._v("document.open()")]),e._v("打开的文档。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.open();\ndocument.write('hello world');\ndocument.close();\n")])])]),a("h4",{attrs:{id:"document-write-document-writeln"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-write-document-writeln"}},[e._v("#")]),e._v(" document.write()，document.writeln()")]),e._v(" "),a("p",[a("code",[e._v("document.write")]),e._v("方法用于向当前文档写入内容。")]),e._v(" "),a("p",[e._v("在网页的首次渲染阶段，只要页面没有关闭写入（即没有执行"),a("code",[e._v("document.close()")]),e._v("），"),a("code",[e._v("document.write")]),e._v("写入的内容就会追加在已有内容的后面。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 页面显示“helloworld”\ndocument.open();\ndocument.write('hello');\ndocument.write('world');\ndocument.close();\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("document.write")]),e._v("会当作 HTML 代码解析，不会转义。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.write('<p>hello world</p>');\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("document.write")]),e._v("会将"),a("code",[e._v("<p>")]),e._v("当作 HTML 标签解释。")]),e._v(" "),a("p",[e._v("如果页面已经解析完成（"),a("code",[e._v("DOMContentLoaded")]),e._v("事件发生之后），再调用"),a("code",[e._v("write")]),e._v("方法，它会先调用"),a("code",[e._v("open")]),e._v("方法，擦除当前文档所有内容，然后再写入。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.addEventListener('DOMContentLoaded', function (event) {\n  document.write('<p>Hello World!</p>');\n});\n\n// 等同于\ndocument.addEventListener('DOMContentLoaded', function (event) {\n  document.open();\n  document.write('<p>Hello World!</p>');\n  document.close();\n});\n")])])]),a("p",[e._v("如果在页面渲染过程中调用"),a("code",[e._v("write")]),e._v("方法，并不会自动调用"),a("code",[e._v("open")]),e._v("方法。（可以理解成，"),a("code",[e._v("open")]),e._v("方法已调用，但"),a("code",[e._v("close")]),e._v("方法还未调用。）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<html>\n<body>\nhello\n<script type="text/javascript">\n  document.write("world")\n<\/script>\n</body>\n</html>\n')])])]),a("p",[e._v("在浏览器打开上面网页，将会显示"),a("code",[e._v("hello world")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("document.write")]),e._v("是 JavaScript 语言标准化之前就存在的方法，现在完全有更符合标准的方法向文档写入内容（比如对"),a("code",[e._v("innerHTML")]),e._v("属性赋值）。所以，除了某些特殊情况，应该尽量避免使用"),a("code",[e._v("document.write")]),e._v("这个方法。")]),e._v(" "),a("p",[a("code",[e._v("document.writeln")]),e._v("方法与"),a("code",[e._v("write")]),e._v("方法完全一致，除了会在输出内容的尾部添加换行符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.write(1);\ndocument.write(2);\n// 12\n\ndocument.writeln(1);\ndocument.writeln(2);\n// 1\n// 2\n//\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("writeln")]),e._v("方法添加的是 ASCII 码的换行符，渲染成 HTML 网页时不起作用，即在网页上显示不出换行。网页上的换行，必须显式写入"),a("code",[e._v("<br>")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"document-queryselector-document-queryselectorall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-queryselector-document-queryselectorall"}},[e._v("#")]),e._v(" document.querySelector()，document.querySelectorAll()")]),e._v(" "),a("p",[a("code",[e._v("document.querySelector")]),e._v("方法接受一个 CSS 选择器作为参数，返回匹配该选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var el1 = document.querySelector('.myclass');\nvar el2 = document.querySelector('#myParent > [ng-click]');\n")])])]),a("p",[a("code",[e._v("document.querySelectorAll")]),e._v("方法与"),a("code",[e._v("querySelector")]),e._v("用法类似，区别是返回一个"),a("code",[e._v("NodeList")]),e._v("对象，包含所有匹配给定选择器的节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("elementList = document.querySelectorAll('.myclass');\n")])])]),a("p",[e._v("这两个方法的参数，可以是逗号分隔的多个 CSS 选择器，返回匹配其中一个选择器的元素节点，这与 CSS 选择器的规则是一致的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var matches = document.querySelectorAll('div.note, div.alert');\n")])])]),a("p",[e._v("上面代码返回"),a("code",[e._v("class")]),e._v("属性是"),a("code",[e._v("note")]),e._v("或"),a("code",[e._v("alert")]),e._v("的"),a("code",[e._v("div")]),e._v("元素。")]),e._v(" "),a("p",[e._v("这两个方法都支持复杂的 CSS 选择器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 选中 data-foo-bar 属性等于 someval 的元素\ndocument.querySelectorAll('[data-foo-bar=\"someval\"]');\n\n// 选中 myForm 表单中所有不通过验证的元素\ndocument.querySelectorAll('#myForm :invalid');\n\n// 选中div元素，那些 class 含 ignore 的除外\ndocument.querySelectorAll('DIV:not(.ignore)');\n\n// 同时选中 div，a，script 三类元素\ndocument.querySelectorAll('DIV, A, SCRIPT');\n")])])]),a("p",[e._v("但是，它们不支持 CSS 伪元素的选择器（比如"),a("code",[e._v(":first-line")]),e._v("和"),a("code",[e._v(":first-letter")]),e._v("）和伪类的选择器（比如"),a("code",[e._v(":link")]),e._v("和"),a("code",[e._v(":visited")]),e._v("），即无法选中伪元素和伪类。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("querySelectorAll")]),e._v("方法的参数是字符串"),a("code",[e._v("*")]),e._v("，则会返回文档中的所有元素节点。另外，"),a("code",[e._v("querySelectorAll")]),e._v("的返回结果不是动态集合，不会实时反映元素节点的变化。")]),e._v(" "),a("p",[e._v("最后，这两个方法除了定义在"),a("code",[e._v("document")]),e._v("对象上，还定义在元素节点上，即在元素节点上也可以调用。")]),e._v(" "),a("h4",{attrs:{id:"document-getelementsbytagname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-getelementsbytagname"}},[e._v("#")]),e._v(" document.getElementsByTagName()")]),e._v(" "),a("p",[a("code",[e._v("document.getElementsByTagName()")]),e._v("方法搜索 HTML 标签名，返回符合条件的元素。它的返回值是一个类似数组对象（"),a("code",[e._v("HTMLCollection")]),e._v("实例），可以实时反映 HTML 文档的变化。如果没有任何匹配的元素，就返回一个空集。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var paras = document.getElementsByTagName('p');\nparas instanceof HTMLCollection // true\n")])])]),a("p",[e._v("上面代码返回当前文档的所有"),a("code",[e._v("p")]),e._v("元素节点。")]),e._v(" "),a("p",[e._v("HTML 标签名是大小写不敏感的，因此"),a("code",[e._v("getElementsByTagName()")]),e._v("方法的参数也是大小写不敏感的。另外，返回结果中，各个成员的顺序就是它们在文档中出现的顺序。")]),e._v(" "),a("p",[e._v("如果传入"),a("code",[e._v("*")]),e._v("，就可以返回文档中所有 HTML 元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var allElements = document.getElementsByTagName('*');\n")])])]),a("p",[e._v("注意，元素节点本身也定义了"),a("code",[e._v("getElementsByTagName")]),e._v("方法，返回该元素的后代元素中符合条件的元素。也就是说，这个方法不仅可以在"),a("code",[e._v("document")]),e._v("对象上调用，也可以在任何元素节点上调用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var firstPara = document.getElementsByTagName('p')[0];\nvar spans = firstPara.getElementsByTagName('span');\n")])])]),a("p",[e._v("上面代码选中第一个"),a("code",[e._v("p")]),e._v("元素内部的所有"),a("code",[e._v("span")]),e._v("元素。")]),e._v(" "),a("h4",{attrs:{id:"document-getelementsbyclassname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-getelementsbyclassname"}},[e._v("#")]),e._v(" document.getElementsByClassName()")]),e._v(" "),a("p",[a("code",[e._v("document.getElementsByClassName()")]),e._v("方法返回一个类似数组的对象（"),a("code",[e._v("HTMLCollection")]),e._v("实例），包括了所有"),a("code",[e._v("class")]),e._v("名字符合指定条件的元素，元素的变化实时反映在返回结果中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var elements = document.getElementsByClassName(names);\n")])])]),a("p",[e._v("由于"),a("code",[e._v("class")]),e._v("是保留字，所以 JavaScript 一律使用"),a("code",[e._v("className")]),e._v("表示 CSS 的"),a("code",[e._v("class")]),e._v("。")]),e._v(" "),a("p",[e._v("参数可以是多个"),a("code",[e._v("class")]),e._v("，它们之间使用空格分隔。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var elements = document.getElementsByClassName('foo bar');\n")])])]),a("p",[e._v("上面代码返回同时具有"),a("code",[e._v("foo")]),e._v("和"),a("code",[e._v("bar")]),e._v("两个"),a("code",[e._v("class")]),e._v("的元素，"),a("code",[e._v("foo")]),e._v("和"),a("code",[e._v("bar")]),e._v("的顺序不重要。")]),e._v(" "),a("p",[e._v("注意，正常模式下，CSS 的"),a("code",[e._v("class")]),e._v("是大小写敏感的。（"),a("code",[e._v("quirks mode")]),e._v("下，大小写不敏感。）")]),e._v(" "),a("p",[e._v("与"),a("code",[e._v("getElementsByTagName()")]),e._v("方法一样，"),a("code",[e._v("getElementsByClassName()")]),e._v("方法不仅可以在"),a("code",[e._v("document")]),e._v("对象上调用，也可以在任何元素节点上调用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 非document对象上调用\nvar elements = rootElement.getElementsByClassName(names);\n")])])]),a("h4",{attrs:{id:"document-getelementsbyname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-getelementsbyname"}},[e._v("#")]),e._v(" document.getElementsByName()")]),e._v(" "),a("p",[a("code",[e._v("document.getElementsByName()")]),e._v("方法用于选择拥有"),a("code",[e._v("name")]),e._v("属性的 HTML 元素（比如"),a("code",[e._v("<form>")]),e._v("、"),a("code",[e._v("<radio>")]),e._v("、"),a("code",[e._v("<img>")]),e._v("、"),a("code",[e._v("<frame>")]),e._v("、"),a("code",[e._v("<embed>")]),e._v("和"),a("code",[e._v("<object>")]),e._v("等），返回一个类似数组的的对象（"),a("code",[e._v("NodeList")]),e._v("实例），因为"),a("code",[e._v("name")]),e._v("属性相同的元素可能不止一个。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 表单为 <form name="x"></form>\nvar forms = document.getElementsByName(\'x\');\nforms[0].tagName // "FORM"\n')])])]),a("h4",{attrs:{id:"document-getelementbyid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-getelementbyid"}},[e._v("#")]),e._v(" document.getElementById()")]),e._v(" "),a("p",[a("code",[e._v("document.getElementById()")]),e._v("方法返回匹配指定"),a("code",[e._v("id")]),e._v("属性的元素节点。如果没有发现匹配的节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var elem = document.getElementById('para1');\n")])])]),a("p",[e._v("注意，该方法的参数是大小写敏感的。比如，如果某个节点的"),a("code",[e._v("id")]),e._v("属性是"),a("code",[e._v("main")]),e._v("，那么"),a("code",[e._v("document.getElementById('Main')")]),e._v("将返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("document.getElementById()")]),e._v("方法与"),a("code",[e._v("document.querySelector()")]),e._v("方法都能获取元素节点，不同之处是"),a("code",[e._v("document.querySelector()")]),e._v("方法的参数使用 CSS 选择器语法，"),a("code",[e._v("document.getElementById()")]),e._v("方法的参数是元素的"),a("code",[e._v("id")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.getElementById('myElement')\ndocument.querySelector('#myElement')\n")])])]),a("p",[e._v("上面代码中，两个方法都能选中"),a("code",[e._v("id")]),e._v("为"),a("code",[e._v("myElement")]),e._v("的元素，但是"),a("code",[e._v("document.getElementById()")]),e._v("比"),a("code",[e._v("document.querySelector()")]),e._v("效率高得多。")]),e._v(" "),a("p",[e._v("另外，这个方法只能在"),a("code",[e._v("document")]),e._v("对象上使用，不能在其他元素节点上使用。")]),e._v(" "),a("h4",{attrs:{id:"document-elementfrompoint-document-elementsfrompoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-elementfrompoint-document-elementsfrompoint"}},[e._v("#")]),e._v(" document.elementFromPoint()，document.elementsFromPoint()")]),e._v(" "),a("p",[a("code",[e._v("document.elementFromPoint()")]),e._v("方法返回位于页面指定位置最上层的元素节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var element = document.elementFromPoint(50, 50);\n")])])]),a("p",[e._v("上面代码选中在"),a("code",[e._v("(50, 50)")]),e._v("这个坐标位置的最上层的那个 HTML 元素。")]),e._v(" "),a("p",[a("code",[e._v("elementFromPoint")]),e._v("方法的两个参数，依次是相对于当前视口左上角的横坐标和纵坐标，单位是像素。如果位于该位置的 HTML 元素不可返回（比如文本框的滚动条），则返回它的父元素（比如文本框）。如果坐标值无意义（比如负值或超过视口大小），则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("document.elementsFromPoint()")]),e._v("返回一个数组，成员是位于指定坐标（相对于视口）的所有元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var elements = document.elementsFromPoint(x, y);\n")])])]),a("h4",{attrs:{id:"document-createelement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createelement"}},[e._v("#")]),e._v(" document.createElement()")]),e._v(" "),a("p",[a("code",[e._v("document.createElement")]),e._v("方法用来生成元素节点，并返回该节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var newDiv = document.createElement('div');\n")])])]),a("p",[a("code",[e._v("createElement")]),e._v("方法的参数为元素的标签名，即元素节点的"),a("code",[e._v("tagName")]),e._v("属性，对于 HTML 网页大小写不敏感，即参数为"),a("code",[e._v("div")]),e._v("或"),a("code",[e._v("DIV")]),e._v("返回的是同一种节点。如果参数里面包含尖括号（即"),a("code",[e._v("<")]),e._v("和"),a("code",[e._v(">")]),e._v("）会报错。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.createElement('<div>');\n// DOMException: The tag name provided ('<div>') is not a valid name\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("document.createElement")]),e._v("的参数可以是自定义的标签名。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.createElement('foo');\n")])])]),a("h4",{attrs:{id:"document-createtextnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createtextnode"}},[e._v("#")]),e._v(" document.createTextNode()")]),e._v(" "),a("p",[a("code",[e._v("document.createTextNode")]),e._v("方法用来生成文本节点（"),a("code",[e._v("Text")]),e._v("实例），并返回该节点。它的参数是文本节点的内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var newDiv = document.createElement('div');\nvar newContent = document.createTextNode('Hello');\nnewDiv.appendChild(newContent);\n")])])]),a("p",[e._v("上面代码新建一个"),a("code",[e._v("div")]),e._v("节点和一个文本节点，然后将文本节点插入"),a("code",[e._v("div")]),e._v("节点。")]),e._v(" "),a("p",[e._v("这个方法可以确保返回的节点，被浏览器当作文本渲染，而不是当作 HTML 代码渲染。因此，可以用来展示用户的输入，避免 XSS 攻击。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var div = document.createElement('div');\ndiv.appendChild(document.createTextNode('<span>Foo & bar</span>'));\nconsole.log(div.innerHTML)\n// &lt;span&gt;Foo &amp; bar&lt;/span&gt;\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("createTextNode")]),e._v("方法对大于号和小于号进行转义，从而保证即使用户输入的内容包含恶意代码，也能正确显示。")]),e._v(" "),a("p",[e._v("需要注意的是，该方法不对单引号和双引号转义，所以不能用来对 HTML 属性赋值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function escapeHtml(str) {\n  var div = document.createElement('div');\n  div.appendChild(document.createTextNode(str));\n  return div.innerHTML;\n};\n\nvar userWebsite = '\" onmouseover=\"alert(\\'derp\\')\" \"';\nvar profileLink = '<a href=\"' + escapeHtml(userWebsite) + '\">Bob</a>';\nvar div = document.getElementById('target');\ndiv.innerHTML = profileLink;\n// <a href=\"\" onmouseover=\"alert('derp')\" \"\">Bob</a>\n")])])]),a("p",[e._v("上面代码中，由于"),a("code",[e._v("createTextNode")]),e._v("方法不转义双引号，导致"),a("code",[e._v("onmouseover")]),e._v("方法被注入了代码。")]),e._v(" "),a("h4",{attrs:{id:"document-createattribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createattribute"}},[e._v("#")]),e._v(" document.createAttribute()")]),e._v(" "),a("p",[a("code",[e._v("document.createAttribute")]),e._v("方法生成一个新的属性节点（"),a("code",[e._v("Attr")]),e._v("实例），并返回它。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var attribute = document.createAttribute(name);\n")])])]),a("p",[a("code",[e._v("document.createAttribute")]),e._v("方法的参数"),a("code",[e._v("name")]),e._v("，是属性的名称。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var node = document.getElementById('div1');\n\nvar a = document.createAttribute('my_attrib');\na.value = 'newVal';\n\nnode.setAttributeNode(a);\n// 或者\nnode.setAttribute('my_attrib', 'newVal');\n")])])]),a("p",[e._v("上面代码为"),a("code",[e._v("div1")]),e._v("节点，插入一个值为"),a("code",[e._v("newVal")]),e._v("的"),a("code",[e._v("my_attrib")]),e._v("属性。")]),e._v(" "),a("h4",{attrs:{id:"document-createcomment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createcomment"}},[e._v("#")]),e._v(" document.createComment()")]),e._v(" "),a("p",[a("code",[e._v("document.createComment")]),e._v("方法生成一个新的注释节点，并返回该节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var CommentNode = document.createComment(data);\n")])])]),a("p",[a("code",[e._v("document.createComment")]),e._v("方法的参数是一个字符串，会成为注释节点的内容。")]),e._v(" "),a("h4",{attrs:{id:"document-createdocumentfragment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createdocumentfragment"}},[e._v("#")]),e._v(" document.createDocumentFragment()")]),e._v(" "),a("p",[a("code",[e._v("document.createDocumentFragment")]),e._v("方法生成一个空的文档片段对象（"),a("code",[e._v("DocumentFragment")]),e._v("实例）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var docFragment = document.createDocumentFragment();\n")])])]),a("p",[a("code",[e._v("DocumentFragment")]),e._v("是一个存在于内存的 DOM 片段，不属于当前文档，常常用来生成一段较复杂的 DOM 结构，然后再插入当前文档。这样做的好处在于，因为"),a("code",[e._v("DocumentFragment")]),e._v("不属于当前文档，对它的任何改动，都不会引发网页的重新渲染，比直接修改当前文档的 DOM 有更好的性能表现。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var docfrag = document.createDocumentFragment();\n\n[1, 2, 3, 4].forEach(function (e) {\n  var li = document.createElement('li');\n  li.textContent = e;\n  docfrag.appendChild(li);\n});\n\nvar element  = document.getElementById('ul');\nelement.appendChild(docfrag);\n")])])]),a("p",[e._v("上面代码中，文档片断"),a("code",[e._v("docfrag")]),e._v("包含四个"),a("code",[e._v("<li>")]),e._v("节点，这些子节点被一次性插入了当前文档。")]),e._v(" "),a("h4",{attrs:{id:"document-createevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createevent"}},[e._v("#")]),e._v(" document.createEvent()")]),e._v(" "),a("p",[a("code",[e._v("document.createEvent")]),e._v("方法生成一个事件对象（"),a("code",[e._v("Event")]),e._v("实例），该对象可以被"),a("code",[e._v("element.dispatchEvent")]),e._v("方法使用，触发指定事件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var event = document.createEvent(type);\n")])])]),a("p",[a("code",[e._v("document.createEvent")]),e._v("方法的参数是事件类型，比如"),a("code",[e._v("UIEvents")]),e._v("、"),a("code",[e._v("MouseEvents")]),e._v("、"),a("code",[e._v("MutationEvents")]),e._v("、"),a("code",[e._v("HTMLEvents")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var event = document.createEvent('Event');\nevent.initEvent('build', true, true);\ndocument.addEventListener('build', function (e) {\n  console.log(e.type); // \"build\"\n}, false);\ndocument.dispatchEvent(event);\n")])])]),a("p",[e._v("上面代码新建了一个名为"),a("code",[e._v("build")]),e._v("的事件实例，然后触发该事件。")]),e._v(" "),a("h4",{attrs:{id:"document-addeventlistener-document-removeeventlistener-document-dispatchevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-addeventlistener-document-removeeventlistener-document-dispatchevent"}},[e._v("#")]),e._v(" document.addEventListener()，document.removeEventListener()，document.dispatchEvent()")]),e._v(" "),a("p",[e._v("这三个方法用于处理"),a("code",[e._v("document")]),e._v("节点的事件。它们都继承自"),a("code",[e._v("EventTarget")]),e._v("接口，详细介绍参见《EventTarget 接口》一章。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 添加事件监听函数\ndocument.addEventListener('click', listener, false);\n\n// 移除事件监听函数\ndocument.removeEventListener('click', listener, false);\n\n// 触发事件\nvar event = new Event('click');\ndocument.dispatchEvent(event);\n")])])]),a("h4",{attrs:{id:"document-hasfocus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-hasfocus"}},[e._v("#")]),e._v(" document.hasFocus()")]),e._v(" "),a("p",[a("code",[e._v("document.hasFocus")]),e._v("方法返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var focused = document.hasFocus();\n")])])]),a("p",[e._v("注意，有焦点的文档必定被激活（active），反之不成立，激活的文档未必有焦点。比如，用户点击按钮，从当前窗口跳出一个新窗口，该新窗口就是激活的，但是不拥有焦点。")]),e._v(" "),a("h4",{attrs:{id:"document-adoptnode-document-importnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-adoptnode-document-importnode"}},[e._v("#")]),e._v(" document.adoptNode()，document.importNode()")]),e._v(" "),a("p",[a("code",[e._v("document.adoptNode")]),e._v("方法将某个节点及其子节点，从原来所在的文档或"),a("code",[e._v("DocumentFragment")]),e._v("里面移除，归属当前"),a("code",[e._v("document")]),e._v("对象，返回插入后的新节点。插入的节点对象的"),a("code",[e._v("ownerDocument")]),e._v("属性，会变成当前的"),a("code",[e._v("document")]),e._v("对象，而"),a("code",[e._v("parentNode")]),e._v("属性是"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var node = document.adoptNode(externalNode);\ndocument.appendChild(node);\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("document.adoptNode")]),e._v("方法只是改变了节点的归属，并没有将这个节点插入新的文档树。所以，还要再用"),a("code",[e._v("appendChild")]),e._v("方法或"),a("code",[e._v("insertBefore")]),e._v("方法，将新节点插入当前文档树。")]),e._v(" "),a("p",[a("code",[e._v("document.importNode")]),e._v("方法则是从原来所在的文档或"),a("code",[e._v("DocumentFragment")]),e._v("里面，拷贝某个节点及其子节点，让它们归属当前"),a("code",[e._v("document")]),e._v("对象。拷贝的节点对象的"),a("code",[e._v("ownerDocument")]),e._v("属性，会变成当前的"),a("code",[e._v("document")]),e._v("对象，而"),a("code",[e._v("parentNode")]),e._v("属性是"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var node = document.importNode(externalNode, deep);\n")])])]),a("p",[a("code",[e._v("document.importNode")]),e._v("方法的第一个参数是外部节点，第二个参数是一个布尔值，表示对外部节点是深拷贝还是浅拷贝，默认是浅拷贝（false）。虽然第二个参数是可选的，但是建议总是保留这个参数，并设为"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("document.importNode")]),e._v("方法只是拷贝外部节点，这时该节点的父节点是"),a("code",[e._v("null")]),e._v("。下一步还必须将这个节点插入当前文档树。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var iframe = document.getElementsByTagName('iframe')[0];\nvar oldNode = iframe.contentWindow.document.getElementById('myNode');\nvar newNode = document.importNode(oldNode, true);\ndocument.getElementById(\"container\").appendChild(newNode);\n")])])]),a("p",[e._v("上面代码从"),a("code",[e._v("iframe")]),e._v("窗口，拷贝一个指定节点"),a("code",[e._v("myNode")]),e._v("，插入当前文档。")]),e._v(" "),a("h4",{attrs:{id:"document-createnodeiterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createnodeiterator"}},[e._v("#")]),e._v(" document.createNodeIterator()")]),e._v(" "),a("p",[a("code",[e._v("document.createNodeIterator")]),e._v("方法返回一个子节点遍历器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var nodeIterator = document.createNodeIterator(\n  document.body,\n  NodeFilter.SHOW_ELEMENT\n);\n")])])]),a("p",[e._v("上面代码返回"),a("code",[e._v("<body>")]),e._v("元素子节点的遍历器。")]),e._v(" "),a("p",[a("code",[e._v("document.createNodeIterator")]),e._v("方法第一个参数为所要遍历的根节点，第二个参数为所要遍历的节点类型，这里指定为元素节点（"),a("code",[e._v("NodeFilter.SHOW_ELEMENT")]),e._v("）。几种主要的节点类型写法如下。")]),e._v(" "),a("ul",[a("li",[e._v("所有节点：NodeFilter.SHOW_ALL")]),e._v(" "),a("li",[e._v("元素节点：NodeFilter.SHOW_ELEMENT")]),e._v(" "),a("li",[e._v("文本节点：NodeFilter.SHOW_TEXT")]),e._v(" "),a("li",[e._v("评论节点：NodeFilter.SHOW_COMMENT")])]),e._v(" "),a("p",[a("code",[e._v("document.createNodeIterator")]),e._v("方法返回一个“遍历器”对象（"),a("code",[e._v("NodeFilter")]),e._v("实例）。该实例的"),a("code",[e._v("nextNode()")]),e._v("方法和"),a("code",[e._v("previousNode()")]),e._v("方法，可以用来遍历所有子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var nodeIterator = document.createNodeIterator(document.body);\nvar pars = [];\nvar currentNode;\n\nwhile (currentNode = nodeIterator.nextNode()) {\n  pars.push(currentNode);\n}\n")])])]),a("p",[e._v("上面代码中，使用遍历器的"),a("code",[e._v("nextNode")]),e._v("方法，将根节点的所有子节点，依次读入一个数组。"),a("code",[e._v("nextNode")]),e._v("方法先返回遍历器的内部指针所在的节点，然后会将指针移向下一个节点。所有成员遍历完成后，返回"),a("code",[e._v("null")]),e._v("。"),a("code",[e._v("previousNode")]),e._v("方法则是先将指针移向上一个节点，然后返回该节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var nodeIterator = document.createNodeIterator(\n  document.body,\n  NodeFilter.SHOW_ELEMENT\n);\n\nvar currentNode = nodeIterator.nextNode();\nvar previousNode = nodeIterator.previousNode();\n\ncurrentNode === previousNode // true\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("currentNode")]),e._v("和"),a("code",[e._v("previousNode")]),e._v("都指向同一个的节点。")]),e._v(" "),a("p",[e._v("注意，遍历器返回的第一个节点，总是根节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("pars[0] === document.body // true\n")])])]),a("h4",{attrs:{id:"document-createtreewalker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-createtreewalker"}},[e._v("#")]),e._v(" document.createTreeWalker()")]),e._v(" "),a("p",[a("code",[e._v("document.createTreeWalker")]),e._v("方法返回一个 DOM 的子树遍历器。它与"),a("code",[e._v("document.createNodeIterator")]),e._v("方法基本是类似的，区别在于它返回的是"),a("code",[e._v("TreeWalker")]),e._v("实例，后者返回的是"),a("code",[e._v("NodeIterator")]),e._v("实例。另外，它的第一个节点不是根节点。")]),e._v(" "),a("p",[a("code",[e._v("document.createTreeWalker")]),e._v("方法的第一个参数是所要遍历的根节点，第二个参数指定所要遍历的节点类型（与"),a("code",[e._v("document.createNodeIterator")]),e._v("方法的第二个参数相同）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var treeWalker = document.createTreeWalker(\n  document.body,\n  NodeFilter.SHOW_ELEMENT\n);\n\nvar nodeList = [];\n\nwhile(treeWalker.nextNode()) {\n  nodeList.push(treeWalker.currentNode);\n}\n")])])]),a("p",[e._v("上面代码遍历"),a("code",[e._v("<body>")]),e._v("节点下属的所有元素节点，将它们插入"),a("code",[e._v("nodeList")]),e._v("数组。")]),e._v(" "),a("h4",{attrs:{id:"document-execcommand-document-querycommandsupported-document-querycommandenabled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-execcommand-document-querycommandsupported-document-querycommandenabled"}},[e._v("#")]),e._v(" document.execCommand()，document.queryCommandSupported()，document.queryCommandEnabled()")]),e._v(" "),a("p",[a("strong",[e._v("（1）document.execCommand()")])]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("document.designMode")]),e._v("属性设为"),a("code",[e._v("on")]),e._v("，那么整个文档用户可编辑；如果元素的"),a("code",[e._v("contenteditable")]),e._v("属性设为"),a("code",[e._v("true")]),e._v("，那么该元素可编辑。这两种情况下，可以使用"),a("code",[e._v("document.execCommand()")]),e._v("方法，改变内容的样式，比如"),a("code",[e._v("document.execCommand('bold')")]),e._v("会使得字体加粗。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.execCommand(command, showDefaultUI, input)\n")])])]),a("p",[e._v("该方法接受三个参数。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("command")]),e._v("：字符串，表示所要实施的样式。")]),e._v(" "),a("li",[a("code",[e._v("showDefaultUI")]),e._v("：布尔值，表示是否要使用默认的用户界面，建议总是设为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("input")]),e._v("：字符串，表示该样式的辅助内容，比如生成超级链接时，这个参数就是所要链接的网址。如果第二个参数设为"),a("code",[e._v("true")]),e._v("，那么浏览器会弹出提示框，要求用户在提示框输入该参数。但是，不是所有浏览器都支持这样做，为了兼容性，还是需要自己部署获取这个参数的方式。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var url = window.prompt('请输入网址');\n\nif (url) {\n  document.execCommand('createlink', false, url);\n}\n")])])]),a("p",[e._v("上面代码中，先提示用户输入所要链接的网址，然后手动生成超级链接。注意，第二个参数是"),a("code",[e._v("false")]),e._v("，表示此时不需要自动弹出提示框。")]),e._v(" "),a("p",[a("code",[e._v("document.execCommand()")]),e._v("的返回值是一个布尔值。如果为"),a("code",[e._v("false")]),e._v("，表示这个方法无法生效。")]),e._v(" "),a("p",[e._v("这个方法大部分情况下，只对选中的内容生效。如果有多个内容可编辑区域，那么只对当前焦点所在的元素生效。")]),e._v(" "),a("p",[a("code",[e._v("document.execCommand()")]),e._v("方法可以执行的样式改变有很多种，下面是其中的一些：bold、insertLineBreak、selectAll、createLink、insertOrderedList、subscript、delete、insertUnorderedList、superscript、formatBlock、insertParagraph、undo、forwardDelete、insertText、unlink、insertImage、italic、unselect、insertHTML、redo。这些值都可以用作第一个参数，它们的含义不难从字面上看出来。")]),e._v(" "),a("p",[a("strong",[e._v("（2）document.queryCommandSupported()")])]),e._v(" "),a("p",[a("code",[e._v("document.queryCommandSupported()")]),e._v("方法返回一个布尔值，表示浏览器是否支持"),a("code",[e._v("document.execCommand()")]),e._v("的某个命令。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (document.queryCommandSupported('SelectAll')) {\n  console.log('浏览器支持选中可编辑区域的所有内容');\n}\n")])])]),a("p",[a("strong",[e._v("（3）document.queryCommandEnabled()")])]),e._v(" "),a("p",[a("code",[e._v("document.queryCommandEnabled()")]),e._v("方法返回一个布尔值，表示当前是否可用"),a("code",[e._v("document.execCommand()")]),e._v("的某个命令。比如，"),a("code",[e._v("bold")]),e._v("（加粗）命令只有存在文本选中时才可用，如果没有选中文本，就不可用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <input type=\"button\" value=\"Copy\" onclick=\"doCopy()\">\n\nfunction doCopy(){\n  // 浏览器是否支持 copy 命令（选中内容复制到剪贴板）\n  if (document.queryCommandSupported('copy')) {\n    copyText('你好');\n  }else{\n    console.log('浏览器不支持');\n  }\n}\n\nfunction copyText(text) {\n  var input = document.createElement('textarea');\n  document.body.appendChild(input);\n  input.value = text;\n  input.focus();\n  input.select();\n\n  // 当前是否有选中文字\n  if (document.queryCommandEnabled('copy')) {\n    var success = document.execCommand('copy');\n    input.remove();\n    console.log('Copy Ok');\n  } else {\n    console.log('queryCommandEnabled is false');\n  }\n}\n")])])]),a("p",[e._v("上面代码中，先判断浏览器是否支持"),a("code",[e._v("copy")]),e._v("命令（允许可编辑区域的选中内容，复制到剪贴板），如果支持，就新建一个临时文本框，里面写入内容“你好”，并将其选中。然后，判断是否选中成功，如果成功，就将“你好”复制到剪贴板，再删除那个临时文本框。")]),e._v(" "),a("h4",{attrs:{id:"document-getselection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-getselection"}},[e._v("#")]),e._v(" document.getSelection()")]),e._v(" "),a("p",[e._v("这个方法指向"),a("code",[e._v("window.getSelection()")]),e._v("，参见"),a("code",[e._v("window")]),e._v("对象一节的介绍。")]),e._v(" "),a("h2",{attrs:{id:"element-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-节点"}},[e._v("#")]),e._v(" Element 节点")]),e._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),a("p",[a("code",[e._v("Element")]),e._v("节点对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个"),a("code",[e._v("Element")]),e._v("节点对象（以下简称元素节点）。")]),e._v(" "),a("p",[e._v("元素节点的"),a("code",[e._v("nodeType")]),e._v("属性都是"),a("code",[e._v("1")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = document.querySelector('p');\np.nodeName // \"P\"\np.nodeType // 1\n")])])]),a("p",[a("code",[e._v("Element")]),e._v("对象继承了"),a("code",[e._v("Node")]),e._v("接口，因此"),a("code",[e._v("Node")]),e._v("的属性和方法在"),a("code",[e._v("Element")]),e._v("对象都存在。")]),e._v(" "),a("p",[e._v("此外，不同的 HTML 元素对应的元素节点是不一样的，浏览器使用不同的构造函数，生成不同的元素节点，比如"),a("code",[e._v("<a>")]),e._v("元素的构造函数是"),a("code",[e._v("HTMLAnchorElement()")]),e._v("，"),a("code",[e._v("<button>")]),e._v("是"),a("code",[e._v("HTMLButtonElement()")]),e._v("。因此，元素节点不是一种对象，而是许多种对象，这些对象除了继承"),a("code",[e._v("Element")]),e._v("对象的属性和方法，还有各自独有的属性和方法。")]),e._v(" "),a("h3",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),a("h4",{attrs:{id:"元素特性的相关属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素特性的相关属性"}},[e._v("#")]),e._v(" 元素特性的相关属性")]),e._v(" "),a("p",[a("strong",[e._v("（1）Element.id")])]),e._v(" "),a("p",[a("code",[e._v("Element.id")]),e._v("属性返回指定元素的"),a("code",[e._v("id")]),e._v("属性，该属性可读写。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为 <p id="foo">\nvar p = document.querySelector(\'p\');\np.id // "foo"\n')])])]),a("p",[e._v("注意，"),a("code",[e._v("id")]),e._v("属性的值是大小写敏感，即浏览器能正确识别"),a("code",[e._v('<p id="foo">')]),e._v("和"),a("code",[e._v('<p id="FOO">')]),e._v("这两个元素的"),a("code",[e._v("id")]),e._v("属性，但是最好不要这样命名。")]),e._v(" "),a("p",[a("strong",[e._v("（2）Element.tagName")])]),e._v(" "),a("p",[a("code",[e._v("Element.tagName")]),e._v("属性返回指定元素的大写标签名，与"),a("code",[e._v("nodeName")]),e._v("属性的值相等。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML代码为\n// <span id="myspan">Hello</span>\nvar span = document.getElementById(\'myspan\');\nspan.id // "myspan"\nspan.tagName // "SPAN"\n')])])]),a("p",[a("strong",[e._v("（3）Element.dir")])]),e._v(" "),a("p",[a("code",[e._v("Element.dir")]),e._v("属性用于读写当前元素的文字方向，可能是从左到右（"),a("code",[e._v('"ltr"')]),e._v("），也可能是从右到左（"),a("code",[e._v('"rtl"')]),e._v("）。")]),e._v(" "),a("p",[a("strong",[e._v("（4）Element.accessKey")])]),e._v(" "),a("p",[a("code",[e._v("Element.accessKey")]),e._v("属性用于读写分配给当前元素的快捷键。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <button accesskey="h" id="btn">点击</button>\nvar btn = document.getElementById(\'btn\');\nbtn.accessKey // "h"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("btn")]),e._v("元素的快捷键是"),a("code",[e._v("h")]),e._v("，按下"),a("code",[e._v("Alt + h")]),e._v("就能将焦点转移到它上面。")]),e._v(" "),a("p",[a("strong",[e._v("（5）Element.draggable")])]),e._v(" "),a("p",[a("code",[e._v("Element.draggable")]),e._v("属性返回一个布尔值，表示当前元素是否可拖动。该属性可读写。")]),e._v(" "),a("p",[a("strong",[e._v("（6）Element.lang")])]),e._v(" "),a("p",[a("code",[e._v("Element.lang")]),e._v("属性返回当前元素的语言设置。该属性可读写。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <html lang="en">\ndocument.documentElement.lang // "en"\n')])])]),a("p",[a("strong",[e._v("（7）Element.tabIndex")])]),e._v(" "),a("p",[a("code",[e._v("Element.tabIndex")]),e._v("属性返回一个整数，表示当前元素在 Tab 键遍历时的顺序。该属性可读写。")]),e._v(" "),a("p",[a("code",[e._v("tabIndex")]),e._v("属性值如果是负值（通常是"),a("code",[e._v("-1")]),e._v("），则 Tab 键不会遍历到该元素。如果是正整数，则按照顺序，从小到大遍历。如果两个元素的"),a("code",[e._v("tabIndex")]),e._v("属性的正整数值相同，则按照出现的顺序遍历。遍历完所有"),a("code",[e._v("tabIndex")]),e._v("为正整数的元素以后，再遍历所有"),a("code",[e._v("tabIndex")]),e._v("等于"),a("code",[e._v("0")]),e._v("、或者属性值是非法值、或者没有"),a("code",[e._v("tabIndex")]),e._v("属性的元素，顺序为它们在网页中出现的顺序。")]),e._v(" "),a("p",[a("strong",[e._v("（8）Element.title")])]),e._v(" "),a("p",[a("code",[e._v("Element.title")]),e._v("属性用来读写当前元素的 HTML 属性"),a("code",[e._v("title")]),e._v("。该属性通常用来指定，鼠标悬浮时弹出的文字提示框。")]),e._v(" "),a("h4",{attrs:{id:"元素状态的相关属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素状态的相关属性"}},[e._v("#")]),e._v(" 元素状态的相关属性")]),e._v(" "),a("p",[a("strong",[e._v("（1）Element.hidden")])]),e._v(" "),a("p",[a("code",[e._v("Element.hidden")]),e._v("属性返回一个布尔值，表示当前 HTML 元素的"),a("code",[e._v("hidden")]),e._v("属性的值。该属性可读写，用来控制当前元素是否可见。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var btn = document.getElementById('btn');\nvar mydiv = document.getElementById('mydiv');\n\nbtn.addEventListener('click', function () {\n  mydiv.hidden = !mydiv.hidden;\n}, false);\n")])])]),a("p",[e._v("注意，该属性与 CSS 设置是互相独立的。CSS 对当前元素可见性的设置，"),a("code",[e._v("Element.hidden")]),e._v("并不能反映出来。也就是说，这个属性并不能用来判断当前元素的实际可见性。")]),e._v(" "),a("p",[e._v("CSS 设置的优先级高于"),a("code",[e._v("Element.hidden")]),e._v("。如果 CSS 指定了该元素不可见（"),a("code",[e._v("display: none")]),e._v("）或可见（"),a("code",[e._v("visibility: visible")]),e._v("），那么"),a("code",[e._v("Element.hidden")]),e._v("并不能改变该元素实际的可见性。换言之，这个属性只在 CSS 没有明确设定当前元素的可见性时才有效。")]),e._v(" "),a("p",[a("strong",[e._v("（2）Element.contentEditable，Element.isContentEditable")])]),e._v(" "),a("p",[e._v("HTML 元素可以设置"),a("code",[e._v("contentEditable")]),e._v("属性，使得元素的内容可以编辑。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<div contenteditable>123</div>\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("<div>")]),e._v("元素有"),a("code",[e._v("contenteditable")]),e._v("属性，因此用户可以在网页上编辑这个区块的内容。")]),e._v(" "),a("p",[a("code",[e._v("Element.contentEditable")]),e._v("属性返回一个字符串，表示是否设置了"),a("code",[e._v("contenteditable")]),e._v("属性，有三种可能的值。该属性可写。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v('"true"')]),e._v("：元素内容可编辑")]),e._v(" "),a("li",[a("code",[e._v('"false"')]),e._v("：元素内容不可编辑")]),e._v(" "),a("li",[a("code",[e._v('"inherit"')]),e._v("：元素是否可编辑，继承了父元素的设置")])]),e._v(" "),a("p",[a("code",[e._v("Element.isContentEditable")]),e._v("属性返回一个布尔值，同样表示是否设置了"),a("code",[e._v("contenteditable")]),e._v("属性。该属性只读。")]),e._v(" "),a("h4",{attrs:{id:"element-attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-attributes"}},[e._v("#")]),e._v(" Element.attributes")]),e._v(" "),a("p",[a("code",[e._v("Element.attributes")]),e._v("属性返回一个类似数组的对象，成员是当前元素节点的所有属性节点，详见《属性的操作》一章。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p = document.querySelector('p');\nvar attrs = p.attributes;\n\nfor (var i = attrs.length - 1; i >= 0; i--) {\n  console.log(attrs[i].name + '->' + attrs[i].value);\n}\n")])])]),a("p",[e._v("上面代码遍历"),a("code",[e._v("p")]),e._v("元素的所有属性。")]),e._v(" "),a("h4",{attrs:{id:"element-classname-element-classlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-classname-element-classlist"}},[e._v("#")]),e._v(" Element.className，Element.classList")]),e._v(" "),a("p",[a("code",[e._v("className")]),e._v("属性用来读写当前元素节点的"),a("code",[e._v("class")]),e._v("属性。它的值是一个字符串，每个"),a("code",[e._v("class")]),e._v("之间用空格分割。")]),e._v(" "),a("p",[a("code",[e._v("classList")]),e._v("属性返回一个类似数组的对象，当前元素节点的每个"),a("code",[e._v("class")]),e._v("就是这个对象的一个成员。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码 <div class="one two three" id="myDiv"></div>\nvar div = document.getElementById(\'myDiv\');\n\ndiv.className\n// "one two three"\n\ndiv.classList\n// {\n//   0: "one"\n//   1: "two"\n//   2: "three"\n//   length: 3\n// }\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("className")]),e._v("属性返回一个空格分隔的字符串，而"),a("code",[e._v("classList")]),e._v("属性指向一个类似数组的对象，该对象的"),a("code",[e._v("length")]),e._v("属性（只读）返回当前元素的"),a("code",[e._v("class")]),e._v("数量。")]),e._v(" "),a("p",[a("code",[e._v("classList")]),e._v("对象有下列方法。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("add()")]),e._v("：增加一个 class。")]),e._v(" "),a("li",[a("code",[e._v("remove()")]),e._v("：移除一个 class。")]),e._v(" "),a("li",[a("code",[e._v("contains()")]),e._v("：检查当前元素是否包含某个 class。")]),e._v(" "),a("li",[a("code",[e._v("toggle()")]),e._v("：将某个 class 移入或移出当前元素。")]),e._v(" "),a("li",[a("code",[e._v("item()")]),e._v("：返回指定索引位置的 class。")]),e._v(" "),a("li",[a("code",[e._v("toString()")]),e._v("：将 class 的列表转为字符串。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var div = document.getElementById('myDiv');\n\ndiv.classList.add('myCssClass');\ndiv.classList.add('foo', 'bar');\ndiv.classList.remove('myCssClass');\ndiv.classList.toggle('myCssClass'); // 如果 myCssClass 不存在就加入，否则移除\ndiv.classList.contains('myCssClass'); // 返回 true 或者 false\ndiv.classList.item(0); // 返回第一个 Class\ndiv.classList.toString();\n")])])]),a("p",[e._v("下面比较一下，"),a("code",[e._v("className")]),e._v("和"),a("code",[e._v("classList")]),e._v("在添加和删除某个 class 时的写法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var foo = document.getElementById('foo');\n\n// 添加class\nfoo.className += 'bold';\nfoo.classList.add('bold');\n\n// 删除class\nfoo.classList.remove('bold');\nfoo.className = foo.className.replace(/^bold$/, '');\n")])])]),a("p",[a("code",[e._v("toggle")]),e._v("方法可以接受一个布尔值，作为第二个参数。如果为"),a("code",[e._v("true")]),e._v("，则添加该属性；如果为"),a("code",[e._v("false")]),e._v("，则去除该属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("el.classList.toggle('abc', boolValue);\n\n// 等同于\nif (boolValue) {\n  el.classList.add('abc');\n} else {\n  el.classList.remove('abc');\n}\n")])])]),a("h4",{attrs:{id:"element-dataset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-dataset"}},[e._v("#")]),e._v(" Element.dataset")]),e._v(" "),a("p",[e._v("网页元素可以自定义"),a("code",[e._v("data-")]),e._v("属性，用来添加数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div data-timestamp="1522907809292"></div>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("<div>")]),e._v("元素有一个自定义的"),a("code",[e._v("data-timestamp")]),e._v("属性，用来为该元素添加一个时间戳。")]),e._v(" "),a("p",[a("code",[e._v("Element.dataset")]),e._v("属性返回一个对象，可以从这个对象读写"),a("code",[e._v("data-")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// <article\n//   id="foo"\n//   data-columns="3"\n//   data-index-number="12314"\n//   data-parent="cars">\n//   ...\n// </article>\nvar article = document.getElementById(\'foo\');\narticle.dataset.columns // "3"\narticle.dataset.indexNumber // "12314"\narticle.dataset.parent // "cars"\n')])])]),a("p",[e._v("注意，"),a("code",[e._v("dataset")]),e._v("上面的各个属性返回都是字符串。")]),e._v(" "),a("p",[e._v("HTML 代码中，"),a("code",[e._v("data-")]),e._v("属性的属性名，只能包含英文字母、数字、连词线（"),a("code",[e._v("-")]),e._v("）、点（"),a("code",[e._v(".")]),e._v("）、冒号（"),a("code",[e._v(":")]),e._v("）和下划线（"),a("code",[e._v("_")]),e._v("）。它们转成 JavaScript 对应的"),a("code",[e._v("dataset")]),e._v("属性名，规则如下。")]),e._v(" "),a("ul",[a("li",[e._v("开头的"),a("code",[e._v("data-")]),e._v("会省略。")]),e._v(" "),a("li",[e._v("如果连词线后面跟了一个英文字母，那么连词线会取消，该字母变成大写。")]),e._v(" "),a("li",[e._v("其他字符不变。")])]),e._v(" "),a("p",[e._v("因此，"),a("code",[e._v("data-abc-def")]),e._v("对应"),a("code",[e._v("dataset.abcDef")]),e._v("，"),a("code",[e._v("data-abc-1")]),e._v("对应"),a("code",[e._v('dataset["abc-1"]')]),e._v("。")]),e._v(" "),a("p",[e._v("除了使用"),a("code",[e._v("dataset")]),e._v("读写"),a("code",[e._v("data-")]),e._v("属性，也可以使用"),a("code",[e._v("Element.getAttribute()")]),e._v("和"),a("code",[e._v("Element.setAttribute()")]),e._v("，通过完整的属性名读写这些属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mydiv = document.getElementById('mydiv');\n\nmydiv.dataset.foo = 'bar';\nmydiv.getAttribute('data-foo') // \"bar\"\n")])])]),a("h4",{attrs:{id:"element-innerhtml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-innerhtml"}},[e._v("#")]),e._v(" Element.innerHTML")]),e._v(" "),a("p",[a("code",[e._v("Element.innerHTML")]),e._v("属性返回一个字符串，等同于该元素包含的所有 HTML 代码。该属性可读写，常用来设置某个节点的内容。它能改写所有元素节点的内容，包括"),a("code",[e._v("<HTML>")]),e._v("和"),a("code",[e._v("<body>")]),e._v("元素。")]),e._v(" "),a("p",[e._v("如果将"),a("code",[e._v("innerHTML")]),e._v("属性设为空，等于删除所有它包含的所有节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("el.innerHTML = '';\n")])])]),a("p",[e._v("上面代码等于将"),a("code",[e._v("el")]),e._v("节点变成了一个空节点，"),a("code",[e._v("el")]),e._v("原来包含的节点被全部删除。")]),e._v(" "),a("p",[e._v("注意，读取属性值的时候，如果文本节点包含"),a("code",[e._v("&")]),e._v("、小于号（"),a("code",[e._v("<")]),e._v("）和大于号（"),a("code",[e._v(">")]),e._v("），"),a("code",[e._v("innerHTML")]),e._v("属性会将它们转为实体形式"),a("code",[e._v("&")]),e._v("、"),a("code",[e._v("<")]),e._v("、"),a("code",[e._v(">")]),e._v("。如果想得到原文，建议使用"),a("code",[e._v("element.textContent")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML代码如下 <p id=\"para\"> 5 > 3 </p>\ndocument.getElementById('para').innerHTML\n// 5 &gt; 3\n")])])]),a("p",[e._v("写入的时候，如果插入的文本包含 HTML 标签，会被解析成为节点对象插入 DOM。注意，如果文本之中含有"),a("code",[e._v("<script>")]),e._v("标签，虽然可以生成"),a("code",[e._v("script")]),e._v("节点，但是插入的代码不会执行。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name = \"<script>alert('haha')<\/script>\";\nel.innerHTML = name;\n")])])]),a("p",[e._v("上面代码将脚本插入内容，脚本并不会执行。但是，"),a("code",[e._v("innerHTML")]),e._v("还是有安全风险的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var name = "<img src=x onerror=alert(1)>";\nel.innerHTML = name;\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("alert")]),e._v("方法是会执行的。因此为了安全考虑，如果插入的是文本，最好用"),a("code",[e._v("textContent")]),e._v("属性代替"),a("code",[e._v("innerHTML")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"element-outerhtml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-outerhtml"}},[e._v("#")]),e._v(" Element.outerHTML")]),e._v(" "),a("p",[a("code",[e._v("Element.outerHTML")]),e._v("属性返回一个字符串，表示当前元素节点的所有 HTML 代码，包括该元素本身和所有子元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <div id=\"d\"><p>Hello</p></div>\nvar d = document.getElementById('d');\nd.outerHTML\n// '<div id=\"d\"><p>Hello</p></div>'\n")])])]),a("p",[a("code",[e._v("outerHTML")]),e._v("属性是可读写的，对它进行赋值，等于替换掉当前元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="container"><div id="d">Hello</div></div>\nvar container = document.getElementById(\'container\');\nvar d = document.getElementById(\'d\');\ncontainer.firstChild.nodeName // "DIV"\nd.nodeName // "DIV"\n\nd.outerHTML = \'<p>Hello</p>\';\ncontainer.firstChild.nodeName // "P"\nd.nodeName // "DIV"\n')])])]),a("p",[e._v("上面代码中，变量"),a("code",[e._v("d")]),e._v("代表子节点，它的"),a("code",[e._v("outerHTML")]),e._v("属性重新赋值以后，内层的"),a("code",[e._v("div")]),e._v("元素就不存在了，被"),a("code",[e._v("p")]),e._v("元素替换了。但是，变量"),a("code",[e._v("d")]),e._v("依然指向原来的"),a("code",[e._v("div")]),e._v("元素，这表示被替换的"),a("code",[e._v("DIV")]),e._v("元素还存在于内存中。")]),e._v(" "),a("p",[e._v("注意，如果一个节点没有父节点，设置"),a("code",[e._v("outerHTML")]),e._v("属性会报错。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var div = document.createElement('div');\ndiv.outerHTML = '<p>test</p>';\n// DOMException: This element has no parent node.\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("div")]),e._v("元素没有父节点，设置"),a("code",[e._v("outerHTML")]),e._v("属性会报错。")]),e._v(" "),a("h4",{attrs:{id:"element-clientheight-element-clientwidth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-clientheight-element-clientwidth"}},[e._v("#")]),e._v(" Element.clientHeight，Element.clientWidth")]),e._v(" "),a("p",[a("code",[e._v("Element.clientHeight")]),e._v("属性返回一个整数值，表示元素节点的 CSS 高度（单位像素），只对块级元素生效，对于行内元素返回"),a("code",[e._v("0")]),e._v("。如果块级元素没有设置 CSS 高度，则返回实际高度。")]),e._v(" "),a("p",[e._v("除了元素本身的高度，它还包括"),a("code",[e._v("padding")]),e._v("部分，但是不包括"),a("code",[e._v("border")]),e._v("、"),a("code",[e._v("margin")]),e._v("。如果有水平滚动条，还要减去水平滚动条的高度。注意，这个值始终是整数，如果是小数会被四舍五入。")]),e._v(" "),a("p",[a("code",[e._v("Element.clientWidth")]),e._v("属性返回元素节点的 CSS 宽度，同样只对块级元素有效，也是只包括元素本身的宽度和"),a("code",[e._v("padding")]),e._v("，如果有垂直滚动条，还要减去垂直滚动条的宽度。")]),e._v(" "),a("p",[a("code",[e._v("document.documentElement")]),e._v("的"),a("code",[e._v("clientHeight")]),e._v("属性，返回当前视口的高度（即浏览器窗口的高度），等同于"),a("code",[e._v("window.innerHeight")]),e._v("属性减去水平滚动条的高度（如果有的话）。"),a("code",[e._v("document.body")]),e._v("的高度则是网页的实际高度。一般来说，"),a("code",[e._v("document.body.clientHeight")]),e._v("大于"),a("code",[e._v("document.documentElement.clientHeight")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 视口高度\ndocument.documentElement.clientHeight\n\n// 网页总高度\ndocument.body.clientHeight\n")])])]),a("h4",{attrs:{id:"element-clientleft-element-clienttop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-clientleft-element-clienttop"}},[e._v("#")]),e._v(" Element.clientLeft，Element.clientTop")]),e._v(" "),a("p",[a("code",[e._v("Element.clientLeft")]),e._v("属性等于元素节点左边框（left border）的宽度（单位像素），不包括左侧的"),a("code",[e._v("padding")]),e._v("和"),a("code",[e._v("margin")]),e._v("。如果没有设置左边框，或者是行内元素（"),a("code",[e._v("display: inline")]),e._v("），该属性返回"),a("code",[e._v("0")]),e._v("。该属性总是返回整数值，如果是小数，会四舍五入。")]),e._v(" "),a("p",[a("code",[e._v("Element.clientTop")]),e._v("属性等于网页元素顶部边框的宽度（单位像素），其他特点都与"),a("code",[e._v("clientLeft")]),e._v("相同。")]),e._v(" "),a("h4",{attrs:{id:"element-scrollheight-element-scrollwidth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-scrollheight-element-scrollwidth"}},[e._v("#")]),e._v(" Element.scrollHeight，Element.scrollWidth")]),e._v(" "),a("p",[a("code",[e._v("Element.scrollHeight")]),e._v("属性返回一个整数值（小数会四舍五入），表示当前元素的总高度（单位像素），包括溢出容器、当前不可见的部分。它包括"),a("code",[e._v("padding")]),e._v("，但是不包括"),a("code",[e._v("border")]),e._v("、"),a("code",[e._v("margin")]),e._v("以及水平滚动条的高度（如果有水平滚动条的话），还包括伪元素（"),a("code",[e._v("::before")]),e._v("或"),a("code",[e._v("::after")]),e._v("）的高度。")]),e._v(" "),a("p",[a("code",[e._v("Element.scrollWidth")]),e._v("属性表示当前元素的总宽度（单位像素），其他地方都与"),a("code",[e._v("scrollHeight")]),e._v("属性类似。这两个属性只读。")]),e._v(" "),a("p",[e._v("整张网页的总高度可以从"),a("code",[e._v("document.documentElement")]),e._v("或"),a("code",[e._v("document.body")]),e._v("上读取。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 返回网页的总高度\ndocument.documentElement.scrollHeight\ndocument.body.scrollHeight\n")])])]),a("p",[e._v("注意，如果元素节点的内容出现溢出，即使溢出的内容是隐藏的，"),a("code",[e._v("scrollHeight")]),e._v("属性仍然返回元素的总高度。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="myDiv" style="height: 200px; overflow: hidden;">...<div>\ndocument.getElementById(\'myDiv\').scrollHeight // 356\n')])])]),a("p",[e._v("上面代码中，即使"),a("code",[e._v("myDiv")]),e._v("元素的 CSS 高度只有200像素，且溢出部分不可见，但是"),a("code",[e._v("scrollHeight")]),e._v("仍然会返回该元素的原始高度。")]),e._v(" "),a("h4",{attrs:{id:"element-scrollleft-element-scrolltop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-scrollleft-element-scrolltop"}},[e._v("#")]),e._v(" Element.scrollLeft，Element.scrollTop")]),e._v(" "),a("p",[a("code",[e._v("Element.scrollLeft")]),e._v("属性表示当前元素的水平滚动条向右侧滚动的像素数量，"),a("code",[e._v("Element.scrollTop")]),e._v("属性表示当前元素的垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素，这两个属性总是等于0。")]),e._v(" "),a("p",[e._v("如果要查看整张网页的水平的和垂直的滚动距离，要从"),a("code",[e._v("document.documentElement")]),e._v("元素上读取。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.documentElement.scrollLeft\ndocument.documentElement.scrollTop\n")])])]),a("p",[e._v("这两个属性都可读写，设置该属性的值，会导致浏览器将当前元素自动滚动到相应的位置。")]),e._v(" "),a("h4",{attrs:{id:"element-offsetparent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-offsetparent"}},[e._v("#")]),e._v(" Element.offsetParent")]),e._v(" "),a("p",[a("code",[e._v("Element.offsetParent")]),e._v("属性返回最靠近当前元素的、并且 CSS 的"),a("code",[e._v("position")]),e._v("属性不等于"),a("code",[e._v("static")]),e._v("的上层元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div style="position: absolute;">\n  <p>\n    <span>Hello</span>\n  </p>\n</div>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("span")]),e._v("元素的"),a("code",[e._v("offsetParent")]),e._v("属性就是"),a("code",[e._v("div")]),e._v("元素。")]),e._v(" "),a("p",[e._v("该属性主要用于确定子元素位置偏移的计算基准，"),a("code",[e._v("Element.offsetTop")]),e._v("和"),a("code",[e._v("Element.offsetLeft")]),e._v("就是"),a("code",[e._v("offsetParent")]),e._v("元素计算的。")]),e._v(" "),a("p",[e._v("如果该元素是不可见的（"),a("code",[e._v("display")]),e._v("属性为"),a("code",[e._v("none")]),e._v("），或者位置是固定的（"),a("code",[e._v("position")]),e._v("属性为"),a("code",[e._v("fixed")]),e._v("），则"),a("code",[e._v("offsetParent")]),e._v("属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div style="position: absolute;">\n  <p>\n    <span style="display: none;">Hello</span>\n  </p>\n</div>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("span")]),e._v("元素的"),a("code",[e._v("offsetParent")]),e._v("属性是"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[e._v("如果某个元素的所有上层节点的"),a("code",[e._v("position")]),e._v("属性都是"),a("code",[e._v("static")]),e._v("，则"),a("code",[e._v("Element.offsetParent")]),e._v("属性指向"),a("code",[e._v("<body>")]),e._v("元素。")]),e._v(" "),a("h4",{attrs:{id:"element-offsetheight-element-offsetwidth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-offsetheight-element-offsetwidth"}},[e._v("#")]),e._v(" Element.offsetHeight，Element.offsetWidth")]),e._v(" "),a("p",[a("code",[e._v("Element.offsetHeight")]),e._v("属性返回一个整数，表示元素的 CSS 垂直高度（单位像素），包括元素本身的高度、padding 和 border，以及水平滚动条的高度（如果存在滚动条）。")]),e._v(" "),a("p",[a("code",[e._v("Element.offsetWidth")]),e._v("属性表示元素的 CSS 水平宽度（单位像素），其他都与"),a("code",[e._v("Element.offsetHeight")]),e._v("一致。")]),e._v(" "),a("p",[e._v("这两个属性都是只读属性，只比"),a("code",[e._v("Element.clientHeight")]),e._v("和"),a("code",[e._v("Element.clientWidth")]),e._v("多了边框的高度或宽度。如果元素的 CSS 设为不可见（比如"),a("code",[e._v("display: none;")]),e._v("），则返回"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"element-offsetleft-element-offsettop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-offsetleft-element-offsettop"}},[e._v("#")]),e._v(" Element.offsetLeft，Element.offsetTop")]),e._v(" "),a("p",[a("code",[e._v("Element.offsetLeft")]),e._v("返回当前元素左上角相对于"),a("code",[e._v("Element.offsetParent")]),e._v("节点的水平位移，"),a("code",[e._v("Element.offsetTop")]),e._v("返回垂直位移，单位为像素。通常，这两个值是指相对于父节点的位移。")]),e._v(" "),a("p",[e._v("下面的代码可以算出元素左上角相对于整张网页的坐标。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getElementPosition(e) {\n  var x = 0;\n  var y = 0;\n  while (e !== null)  {\n    x += e.offsetLeft;\n    y += e.offsetTop;\n    e = e.offsetParent;\n  }\n  return {x: x, y: y};\n}\n")])])]),a("h4",{attrs:{id:"element-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-style"}},[e._v("#")]),e._v(" Element.style")]),e._v(" "),a("p",[e._v("每个元素节点都有"),a("code",[e._v("style")]),e._v("用来读写该元素的行内样式信息，具体介绍参见《CSS 操作》一章。")]),e._v(" "),a("h4",{attrs:{id:"element-children-element-childelementcount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-children-element-childelementcount"}},[e._v("#")]),e._v(" Element.children，Element.childElementCount")]),e._v(" "),a("p",[a("code",[e._v("Element.children")]),e._v("属性返回一个类似数组的对象（"),a("code",[e._v("HTMLCollection")]),e._v("实例），包括当前元素节点的所有子元素。如果当前元素没有子元素，则返回的对象包含零个成员。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (para.children.length) {\n  var children = para.children;\n    for (var i = 0; i < children.length; i++) {\n      // ...\n    }\n}\n")])])]),a("p",[e._v("上面代码遍历了"),a("code",[e._v("para")]),e._v("元素的所有子元素。")]),e._v(" "),a("p",[e._v("这个属性与"),a("code",[e._v("Node.childNodes")]),e._v("属性的区别是，它只包括元素类型的子节点，不包括其他类型的子节点。")]),e._v(" "),a("p",[a("code",[e._v("Element.childElementCount")]),e._v("属性返回当前元素节点包含的子元素节点的个数，与"),a("code",[e._v("Element.children.length")]),e._v("的值相同。")]),e._v(" "),a("h4",{attrs:{id:"element-firstelementchild-element-lastelementchild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-firstelementchild-element-lastelementchild"}},[e._v("#")]),e._v(" Element.firstElementChild，Element.lastElementChild")]),e._v(" "),a("p",[a("code",[e._v("Element.firstElementChild")]),e._v("属性返回当前元素的第一个元素子节点，"),a("code",[e._v("Element.lastElementChild")]),e._v("返回最后一个元素子节点。")]),e._v(" "),a("p",[e._v("如果没有元素子节点，这两个属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"element-nextelementsibling-element-previouselementsibling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-nextelementsibling-element-previouselementsibling"}},[e._v("#")]),e._v(" Element.nextElementSibling，Element.previousElementSibling")]),e._v(" "),a("p",[a("code",[e._v("Element.nextElementSibling")]),e._v("属性返回当前元素节点的后一个同级元素节点，如果没有则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="div-01">Here is div-01</div>\n// <div id="div-02">Here is div-02</div>\nvar el = document.getElementById(\'div-01\');\nel.nextElementSibling\n// <div id="div-02">Here is div-02</div>\n')])])]),a("p",[a("code",[e._v("Element.previousElementSibling")]),e._v("属性返回当前元素节点的前一个同级元素节点，如果没有则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),a("h4",{attrs:{id:"属性相关方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性相关方法"}},[e._v("#")]),e._v(" 属性相关方法")]),e._v(" "),a("p",[e._v("元素节点提供六个方法，用来操作属性。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("getAttribute()")]),e._v("：读取某个属性的值")]),e._v(" "),a("li",[a("code",[e._v("getAttributeNames()")]),e._v("：返回当前元素的所有属性名")]),e._v(" "),a("li",[a("code",[e._v("setAttribute()")]),e._v("：写入属性值")]),e._v(" "),a("li",[a("code",[e._v("hasAttribute()")]),e._v("：某个属性是否存在")]),e._v(" "),a("li",[a("code",[e._v("hasAttributes()")]),e._v("：当前元素是否有属性")]),e._v(" "),a("li",[a("code",[e._v("removeAttribute()")]),e._v("：删除属性")])]),e._v(" "),a("p",[e._v("这些方法的介绍请看《属性的操作》一章。")]),e._v(" "),a("h4",{attrs:{id:"element-queryselector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-queryselector"}},[e._v("#")]),e._v(" Element.querySelector()")]),e._v(" "),a("p",[a("code",[e._v("Element.querySelector")]),e._v("方法接受 CSS 选择器作为参数，返回父元素的第一个匹配的子元素。如果没有找到匹配的子元素，就返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var content = document.getElementById('content');\nvar el = content.querySelector('p');\n")])])]),a("p",[e._v("上面代码返回"),a("code",[e._v("content")]),e._v("节点的第一个"),a("code",[e._v("p")]),e._v("元素。")]),e._v(" "),a("p",[a("code",[e._v("Element.querySelector")]),e._v("方法可以接受任何复杂的 CSS 选择器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.querySelector(\"style[type='text/css'], style:not([type])\");\n")])])]),a("p",[e._v("注意，这个方法无法选中伪元素。")]),e._v(" "),a("p",[e._v("它可以接受多个选择器，它们之间使用逗号分隔。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.querySelector('div, p')\n")])])]),a("p",[e._v("上面代码返回"),a("code",[e._v("element")]),e._v("的第一个"),a("code",[e._v("div")]),e._v("或"),a("code",[e._v("p")]),e._v("子元素。")]),e._v(" "),a("p",[e._v("需要注意的是，浏览器执行"),a("code",[e._v("querySelector")]),e._v("方法时，是先在全局范围内搜索给定的 CSS 选择器，然后过滤出哪些属于当前元素的子元素。因此，会有一些违反直觉的结果，下面是一段 HTML 代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div>\n<blockquote id="outer">\n  <p>Hello</p>\n  <div id="inner">\n    <p>World</p>\n  </div>\n</blockquote>\n</div>\n')])])]),a("p",[e._v("那么，像下面这样查询的话，实际上返回的是第一个"),a("code",[e._v("p")]),e._v("元素，而不是第二个。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var outer = document.getElementById('outer');\nouter.querySelector('div p')\n// <p>Hello</p>\n")])])]),a("h4",{attrs:{id:"element-queryselectorall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-queryselectorall"}},[e._v("#")]),e._v(" Element.querySelectorAll()")]),e._v(" "),a("p",[a("code",[e._v("Element.querySelectorAll")]),e._v("方法接受 CSS 选择器作为参数，返回一个"),a("code",[e._v("NodeList")]),e._v("实例，包含所有匹配的子元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var el = document.querySelector('#test');\nvar matches = el.querySelectorAll('div.highlighted > p');\n")])])]),a("p",[e._v("该方法的执行机制与"),a("code",[e._v("querySelector")]),e._v("方法相同，也是先在全局范围内查找，再过滤出当前元素的子元素。因此，选择器实际上针对整个文档的。")]),e._v(" "),a("p",[e._v("它也可以接受多个 CSS 选择器，它们之间使用逗号分隔。如果选择器里面有伪元素的选择器，则总是返回一个空的"),a("code",[e._v("NodeList")]),e._v("实例。")]),e._v(" "),a("h4",{attrs:{id:"element-getelementsbyclassname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-getelementsbyclassname"}},[e._v("#")]),e._v(" Element.getElementsByClassName()")]),e._v(" "),a("p",[a("code",[e._v("Element.getElementsByClassName")]),e._v("方法返回一个"),a("code",[e._v("HTMLCollection")]),e._v("实例，成员是当前元素节点的所有具有指定 class 的子元素节点。该方法与"),a("code",[e._v("document.getElementsByClassName")]),e._v("方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.getElementsByClassName('red test');\n")])])]),a("p",[e._v("注意，该方法的参数大小写敏感。")]),e._v(" "),a("p",[e._v("由于"),a("code",[e._v("HTMLCollection")]),e._v("实例是一个活的集合，"),a("code",[e._v("document")]),e._v("对象的任何变化会立刻反应到实例，下面的代码不会生效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="example">\n//   <p class="foo"></p>\n//   <p class="foo"></p>\n// </div>\nvar element = document.getElementById(\'example\');\nvar matches = element.getElementsByClassName(\'foo\');\n\nfor (var i = 0; i< matches.length; i++) {\n  matches[i].classList.remove(\'foo\');\n  matches.item(i).classList.add(\'bar\');\n}\n// 执行后，HTML 代码如下\n// <div id="example">\n//   <p></p>\n//   <p class="foo bar"></p>\n// </div>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("matches")]),e._v("集合的第一个成员，一旦被拿掉 class 里面的"),a("code",[e._v("foo")]),e._v("，就会立刻从"),a("code",[e._v("matches")]),e._v("里面消失，导致出现上面的结果。")]),e._v(" "),a("h4",{attrs:{id:"element-getelementsbytagname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-getelementsbytagname"}},[e._v("#")]),e._v(" Element.getElementsByTagName()")]),e._v(" "),a("p",[a("code",[e._v("Element.getElementsByTagName()")]),e._v("方法返回一个"),a("code",[e._v("HTMLCollection")]),e._v("实例，成员是当前节点的所有匹配指定标签名的子元素节点。该方法与"),a("code",[e._v("document.getElementsByClassName()")]),e._v("方法的用法类似，只是搜索范围不是整个文档，而是当前元素节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var table = document.getElementById('forecast-table');\nvar cells = table.getElementsByTagName('td');\n")])])]),a("p",[e._v("注意，该方法的参数是大小写不敏感的，因为 HTML 标签名也是大小写不敏感。")]),e._v(" "),a("h4",{attrs:{id:"element-closest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-closest"}},[e._v("#")]),e._v(" Element.closest()")]),e._v(" "),a("p",[a("code",[e._v("Element.closest")]),e._v("方法接受一个 CSS 选择器作为参数，返回匹配该选择器的、最接近当前节点的一个祖先节点（包括当前节点本身）。如果没有任何节点匹配 CSS 选择器，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <article>\n//   <div id="div-01">Here is div-01\n//     <div id="div-02">Here is div-02\n//       <div id="div-03">Here is div-03</div>\n//     </div>\n//   </div>\n// </article>\n\nvar div03 = document.getElementById(\'div-03\');\n\n// div-03 最近的祖先节点\ndiv03.closest("#div-02") // div-02\ndiv03.closest("div div") // div-03\ndiv03.closest("article > div") //div-01\ndiv03.closest(":not(div)") // article\n')])])]),a("p",[e._v("上面代码中，由于"),a("code",[e._v("closest")]),e._v("方法将当前节点也考虑在内，所以第二个"),a("code",[e._v("closest")]),e._v("方法返回"),a("code",[e._v("div-03")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"element-matches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-matches"}},[e._v("#")]),e._v(" Element.matches()")]),e._v(" "),a("p",[a("code",[e._v("Element.matches")]),e._v("方法返回一个布尔值，表示当前元素是否匹配给定的 CSS 选择器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (el.matches('.someClass')) {\n  console.log('Match!');\n}\n")])])]),a("h4",{attrs:{id:"事件相关方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件相关方法"}},[e._v("#")]),e._v(" 事件相关方法")]),e._v(" "),a("p",[e._v("以下三个方法与"),a("code",[e._v("Element")]),e._v("节点的事件相关。这些方法都继承自"),a("code",[e._v("EventTarget")]),e._v("接口，详见相关章节。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Element.addEventListener()")]),e._v("：添加事件的回调函数")]),e._v(" "),a("li",[a("code",[e._v("Element.removeEventListener()")]),e._v("：移除事件监听函数")]),e._v(" "),a("li",[a("code",[e._v("Element.dispatchEvent()")]),e._v("：触发事件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.addEventListener('click', listener, false);\nelement.removeEventListener('click', listener, false);\n\nvar event = new Event('click');\nelement.dispatchEvent(event);\n")])])]),a("h4",{attrs:{id:"element-scrollintoview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-scrollintoview"}},[e._v("#")]),e._v(" Element.scrollIntoView()")]),e._v(" "),a("p",[a("code",[e._v("Element.scrollIntoView")]),e._v("方法滚动当前元素，进入浏览器的可见区域，类似于设置"),a("code",[e._v("window.location.hash")]),e._v("的效果。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("el.scrollIntoView(); // 等同于el.scrollIntoView(true)\nel.scrollIntoView(false);\n")])])]),a("p",[e._v("该方法可以接受一个布尔值作为参数。如果为"),a("code",[e._v("true")]),e._v("，表示元素的顶部与当前区域的可见部分的顶部对齐（前提是当前区域可滚动）；如果为"),a("code",[e._v("false")]),e._v("，表示元素的底部与当前区域的可见部分的尾部对齐（前提是当前区域可滚动）。如果没有提供该参数，默认为"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"element-getboundingclientrect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-getboundingclientrect"}},[e._v("#")]),e._v(" Element.getBoundingClientRect()")]),e._v(" "),a("p",[a("code",[e._v("Element.getBoundingClientRect")]),e._v("方法返回一个对象，提供当前元素节点的大小、位置等信息，基本上就是 CSS 盒状模型的所有信息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var rect = obj.getBoundingClientRect();\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("getBoundingClientRect")]),e._v("方法返回的"),a("code",[e._v("rect")]),e._v("对象，具有以下属性（全部为只读）。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v("：元素左上角相对于视口的横坐标")]),e._v(" "),a("li",[a("code",[e._v("y")]),e._v("：元素左上角相对于视口的纵坐标")]),e._v(" "),a("li",[a("code",[e._v("height")]),e._v("：元素高度")]),e._v(" "),a("li",[a("code",[e._v("width")]),e._v("：元素宽度")]),e._v(" "),a("li",[a("code",[e._v("left")]),e._v("：元素左上角相对于视口的横坐标，与"),a("code",[e._v("x")]),e._v("属性相等")]),e._v(" "),a("li",[a("code",[e._v("right")]),e._v("：元素右边界相对于视口的横坐标（等于"),a("code",[e._v("x + width")]),e._v("）")]),e._v(" "),a("li",[a("code",[e._v("top")]),e._v("：元素顶部相对于视口的纵坐标，与"),a("code",[e._v("y")]),e._v("属性相等")]),e._v(" "),a("li",[a("code",[e._v("bottom")]),e._v("：元素底部相对于视口的纵坐标（等于"),a("code",[e._v("y + height")]),e._v("）")])]),e._v(" "),a("p",[e._v("由于元素相对于视口（viewport）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。如果想得到绝对位置，可以将"),a("code",[e._v("left")]),e._v("属性加上"),a("code",[e._v("window.scrollX")]),e._v("，"),a("code",[e._v("top")]),e._v("属性加上"),a("code",[e._v("window.scrollY")]),e._v("。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("getBoundingClientRect")]),e._v("方法的所有属性，都把边框（"),a("code",[e._v("border")]),e._v("属性）算作元素的一部分。也就是说，都是从边框外缘的各个点来计算。因此，"),a("code",[e._v("width")]),e._v("和"),a("code",[e._v("height")]),e._v("包括了元素本身 + "),a("code",[e._v("padding")]),e._v(" + "),a("code",[e._v("border")]),e._v("。")]),e._v(" "),a("p",[e._v("另外，上面的这些属性，都是继承自原型的属性，"),a("code",[e._v("Object.keys")]),e._v("会返回一个空数组，这一点也需要注意。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var rect = document.body.getBoundingClientRect();\nObject.keys(rect) // []\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("rect")]),e._v("对象没有自身属性，而"),a("code",[e._v("Object.keys")]),e._v("方法只返回对象自身的属性，所以返回了一个空数组。")]),e._v(" "),a("h4",{attrs:{id:"element-getclientrects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-getclientrects"}},[e._v("#")]),e._v(" Element.getClientRects()")]),e._v(" "),a("p",[a("code",[e._v("Element.getClientRects")]),e._v("方法返回一个类似数组的对象，里面是当前元素在页面上形成的所有矩形（所以方法名中的"),a("code",[e._v("Rect")]),e._v("用的是复数）。每个矩形都有"),a("code",[e._v("bottom")]),e._v("、"),a("code",[e._v("height")]),e._v("、"),a("code",[e._v("left")]),e._v("、"),a("code",[e._v("right")]),e._v("、"),a("code",[e._v("top")]),e._v("和"),a("code",[e._v("width")]),e._v("六个属性，表示它们相对于视口的四个坐标，以及本身的高度和宽度。")]),e._v(" "),a("p",[e._v("对于盒状元素（比如"),a("code",[e._v("<div>")]),e._v("和"),a("code",[e._v("<p>")]),e._v("），该方法返回的对象中只有该元素一个成员。对于行内元素（比如"),a("code",[e._v("<span>")]),e._v("、"),a("code",[e._v("<a>")]),e._v("、"),a("code",[e._v("<em>")]),e._v("），该方法返回的对象有多少个成员，取决于该元素在页面上占据多少行。这是它和"),a("code",[e._v("Element.getBoundingClientRect()")]),e._v("方法的主要区别，后者对于行内元素总是返回一个矩形。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<span id="inline">Hello World Hello World Hello World</span>\n')])])]),a("p",[e._v("上面代码是一个行内元素"),a("code",[e._v("<span>")]),e._v("，如果它在页面上占据三行，"),a("code",[e._v("getClientRects")]),e._v("方法返回的对象就有三个成员，如果它在页面上占据一行，"),a("code",[e._v("getClientRects")]),e._v("方法返回的对象就只有一个成员。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var el = document.getElementById('inline');\nel.getClientRects().length // 3\nel.getClientRects()[0].left // 8\nel.getClientRects()[0].right // 113.908203125\nel.getClientRects()[0].bottom // 31.200000762939453\nel.getClientRects()[0].height // 23.200000762939453\nel.getClientRects()[0].width // 105.908203125\n")])])]),a("p",[e._v("这个方法主要用于判断行内元素是否换行，以及行内元素的每一行的位置偏移。")]),e._v(" "),a("p",[e._v("注意，如果行内元素包括换行符，那么该方法会把换行符考虑在内。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<span id="inline">\n  Hello World\n  Hello World\n  Hello World\n</span>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("<span>")]),e._v("节点内部有三个换行符，即使 HTML 语言忽略换行符，将它们显示为一行，"),a("code",[e._v("getClientRects()")]),e._v("方法依然会返回三个成员。如果行宽设置得特别窄，上面的"),a("code",[e._v("<span>")]),e._v("元素显示为6行，那么就会返回六个成员。")]),e._v(" "),a("h4",{attrs:{id:"element-insertadjacentelement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-insertadjacentelement"}},[e._v("#")]),e._v(" Element.insertAdjacentElement()")]),e._v(" "),a("p",[a("code",[e._v("Element.insertAdjacentElement")]),e._v("方法在相对于当前元素的指定位置，插入一个新的节点。该方法返回被插入的节点，如果插入失败，返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.insertAdjacentElement(position, element);\n")])])]),a("p",[a("code",[e._v("Element.insertAdjacentElement")]),e._v("方法一共可以接受两个参数，第一个参数是一个字符串，表示插入的位置，第二个参数是将要插入的节点。第一个参数只可以取如下的值。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("beforebegin")]),e._v("：当前元素之前")]),e._v(" "),a("li",[a("code",[e._v("afterbegin")]),e._v("：当前元素内部的第一个子节点前面")]),e._v(" "),a("li",[a("code",[e._v("beforeend")]),e._v("：当前元素内部的最后一个子节点后面")]),e._v(" "),a("li",[a("code",[e._v("afterend")]),e._v("：当前元素之后")])]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("beforebegin")]),e._v("和"),a("code",[e._v("afterend")]),e._v("这两个值，只在当前节点有父节点时才会生效。如果当前节点是由脚本创建的，没有父节点，那么插入会失败。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var p1 = document.createElement('p')\nvar p2 = document.createElement('p')\np1.insertAdjacentElement('afterend', p2) // null\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("p1")]),e._v("没有父节点，所以插入"),a("code",[e._v("p2")]),e._v("到它后面就失败了。")]),e._v(" "),a("p",[e._v("如果插入的节点是一个文档里现有的节点，它会从原有位置删除，放置到新的位置。")]),e._v(" "),a("h4",{attrs:{id:"element-insertadjacenthtml-element-insertadjacenttext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-insertadjacenthtml-element-insertadjacenttext"}},[e._v("#")]),e._v(" Element.insertAdjacentHTML()，Element.insertAdjacentText()")]),e._v(" "),a("p",[a("code",[e._v("Element.insertAdjacentHTML")]),e._v("方法用于将一个 HTML 字符串，解析生成 DOM 结构，插入相对于当前节点的指定位置。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.insertAdjacentHTML(position, text);\n")])])]),a("p",[e._v("该方法接受两个参数，第一个是一个表示指定位置的字符串，第二个是待解析的 HTML 字符串。第一个参数只能设置下面四个值之一。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("beforebegin")]),e._v("：当前元素之前")]),e._v(" "),a("li",[a("code",[e._v("afterbegin")]),e._v("：当前元素内部的第一个子节点前面")]),e._v(" "),a("li",[a("code",[e._v("beforeend")]),e._v("：当前元素内部的最后一个子节点后面")]),e._v(" "),a("li",[a("code",[e._v("afterend")]),e._v("：当前元素之后")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码：<div id="one">one</div>\nvar d1 = document.getElementById(\'one\');\nd1.insertAdjacentHTML(\'afterend\', \'<div id="two">two</div>\');\n// 执行后的 HTML 代码：\n// <div id="one">one</div><div id="two">two</div>\n')])])]),a("p",[e._v("该方法只是在现有的 DOM 结构里面插入节点，这使得它的执行速度比"),a("code",[e._v("innerHTML")]),e._v("方法快得多。")]),e._v(" "),a("p",[e._v("注意，该方法不会转义 HTML 字符串，这导致它不能用来插入用户输入的内容，否则会有安全风险。")]),e._v(" "),a("p",[a("code",[e._v("Element.insertAdjacentText")]),e._v("方法在相对于当前节点的指定位置，插入一个文本节点，用法与"),a("code",[e._v("Element.insertAdjacentHTML")]),e._v("方法完全一致。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码：<div id=\"one\">one</div>\nvar d1 = document.getElementById('one');\nd1.insertAdjacentText('afterend', 'two');\n// 执行后的 HTML 代码：\n// <div id=\"one\">one</div>two\n")])])]),a("h4",{attrs:{id:"element-remove"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-remove"}},[e._v("#")]),e._v(" Element.remove()")]),e._v(" "),a("p",[a("code",[e._v("Element.remove")]),e._v("方法继承自 ChildNode 接口，用于将当前元素节点从它的父节点移除。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var el = document.getElementById('mydiv');\nel.remove();\n")])])]),a("p",[e._v("上面代码将"),a("code",[e._v("el")]),e._v("节点从 DOM 树里面移除。")]),e._v(" "),a("h4",{attrs:{id:"element-focus-element-blur"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-focus-element-blur"}},[e._v("#")]),e._v(" Element.focus()，Element.blur()")]),e._v(" "),a("p",[a("code",[e._v("Element.focus")]),e._v("方法用于将当前页面的焦点，转移到指定元素上。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.getElementById('my-span').focus();\n")])])]),a("p",[e._v("该方法可以接受一个对象作为参数。参数对象的"),a("code",[e._v("preventScroll")]),e._v("属性是一个布尔值，指定是否将当前元素停留在原始位置，而不是滚动到可见区域。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getFocus() {\n  document.getElementById('btn').focus({preventScroll:false});\n}\n")])])]),a("p",[e._v("上面代码会让"),a("code",[e._v("btn")]),e._v("元素获得焦点，并滚动到可见区域。")]),e._v(" "),a("p",[e._v("最后，从"),a("code",[e._v("document.activeElement")]),e._v("属性可以得到当前获得焦点的元素。")]),e._v(" "),a("p",[a("code",[e._v("Element.blur")]),e._v("方法用于将焦点从当前元素移除。")]),e._v(" "),a("h4",{attrs:{id:"element-click"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-click"}},[e._v("#")]),e._v(" Element.click()")]),e._v(" "),a("p",[a("code",[e._v("Element.click")]),e._v("方法用于在当前元素上模拟一次鼠标点击，相当于触发了"),a("code",[e._v("click")]),e._v("事件。")]),e._v(" "),a("h3",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),a("ul",[a("li",[e._v("Craig Buckler，"),a("a",{attrs:{href:"https://www.sitepoint.com/how-to-translate-from-dom-to-svg-coordinates-and-back-again/",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Translate from DOM to SVG Coordinates and Back Again"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"属性的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的操作"}},[e._v("#")]),e._v(" 属性的操作")]),e._v(" "),a("p",[e._v("HTML 元素包括标签名和若干个键值对，这个键值对就称为“属性”（attribute）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a id="test" href="http://www.example.com">\n  链接\n</a>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("a")]),e._v("元素包括两个属性："),a("code",[e._v("id")]),e._v("属性和"),a("code",[e._v("href")]),e._v("属性。")]),e._v(" "),a("p",[e._v("属性本身是一个对象（"),a("code",[e._v("Attr")]),e._v("对象），但是实际上，这个对象极少使用。一般都是通过元素节点对象（"),a("code",[e._v("HTMlElement")]),e._v("对象）来操作属性。本章介绍如何操作这些属性。")]),e._v(" "),a("h3",{attrs:{id:"element-attributes-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-attributes-属性"}},[e._v("#")]),e._v(" Element.attributes 属性")]),e._v(" "),a("p",[e._v("元素对象有一个"),a("code",[e._v("attributes")]),e._v("属性，返回一个类似数组的动态对象，成员是该元素标签的所有属性节点对象，属性的实时变化都会反映在这个节点对象上。其他类型的节点对象，虽然也有"),a("code",[e._v("attributes")]),e._v("属性，但返回的都是"),a("code",[e._v("null")]),e._v("，因此可以把这个属性视为元素对象独有的。")]),e._v(" "),a("p",[e._v("单个属性可以通过序号引用，也可以通过属性名引用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <body bgcolor="yellow" onload="">\ndocument.body.attributes[0]\ndocument.body.attributes.bgcolor\ndocument.body.attributes[\'ONLOAD\']\n')])])]),a("p",[e._v("注意，上面代码的三种方法，返回的都是属性节点对象，而不是属性值。")]),e._v(" "),a("p",[e._v("属性节点对象有"),a("code",[e._v("name")]),e._v("和"),a("code",[e._v("value")]),e._v("属性，对应该属性的属性名和属性值，等同于"),a("code",[e._v("nodeName")]),e._v("属性和"),a("code",[e._v("nodeValue")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML代码为\n// <div id="mydiv">\nvar n = document.getElementById(\'mydiv\');\n\nn.attributes[0].name // "id"\nn.attributes[0].nodeName // "id"\n\nn.attributes[0].value // "mydiv"\nn.attributes[0].nodeValue // "mydiv"\n')])])]),a("p",[e._v("下面代码可以遍历一个元素节点的所有属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var para = document.getElementsByTagName('p')[0];\nvar result = document.getElementById('result');\n\nif (para.hasAttributes()) {\n  var attrs = para.attributes;\n  var output = '';\n  for(var i = attrs.length - 1; i >= 0; i--) {\n    output += attrs[i].name + '->' + attrs[i].value;\n  }\n  result.textContent = output;\n} else {\n  result.textContent = 'No attributes to show';\n}\n")])])]),a("h3",{attrs:{id:"元素的标准属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素的标准属性"}},[e._v("#")]),e._v(" 元素的标准属性")]),e._v(" "),a("p",[e._v("HTML 元素的标准属性（即在标准中定义的属性），会自动成为元素节点对象的属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var a = document.getElementById(\'test\');\na.id // "test"\na.href // "http://www.example.com/"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("a")]),e._v("元素标签的属性"),a("code",[e._v("id")]),e._v("和"),a("code",[e._v("href")]),e._v("，自动成为节点对象的属性。")]),e._v(" "),a("p",[e._v("这些属性都是可写的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var img = document.getElementById('myImage');\nimg.src = 'http://www.example.com/image.jpg';\n")])])]),a("p",[e._v("上面的写法，会立刻替换掉"),a("code",[e._v("img")]),e._v("对象的"),a("code",[e._v("src")]),e._v("属性，即会显示另外一张图片。")]),e._v(" "),a("p",[e._v("这种修改属性的方法，常常用于添加表单的属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var f = document.forms[0];\nf.action = 'submit.php';\nf.method = 'POST';\n")])])]),a("p",[e._v("上面代码为表单添加提交网址和提交方法。")]),e._v(" "),a("p",[e._v("注意，这种用法虽然可以读写属性，但是无法删除属性，"),a("code",[e._v("delete")]),e._v("运算符在这里不会生效。")]),e._v(" "),a("p",[e._v("HTML 元素的属性名是大小写不敏感的，但是 JavaScript 对象的属性名是大小写敏感的。转换规则是，转为 JavaScript 属性名时，一律采用小写。如果属性名包括多个单词，则采用骆驼拼写法，即从第二个单词开始，每个单词的首字母采用大写，比如"),a("code",[e._v("onClick")]),e._v("。")]),e._v(" "),a("p",[e._v("有些 HTML 属性名是 JavaScript 的保留字，转为 JavaScript 属性时，必须改名。主要是以下两个。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("for")]),e._v("属性改为"),a("code",[e._v("htmlFor")])]),e._v(" "),a("li",[a("code",[e._v("class")]),e._v("属性改为"),a("code",[e._v("className")])])]),e._v(" "),a("p",[e._v("另外，HTML 属性值一般都是字符串，但是 JavaScript 属性会自动转换类型。比如，将字符串"),a("code",[e._v("true")]),e._v("转为布尔值，将"),a("code",[e._v("onClick")]),e._v("的值转为一个函数，将"),a("code",[e._v("style")]),e._v("属性的值转为一个"),a("code",[e._v("CSSStyleDeclaration")]),e._v("对象。因此，可以对这些属性赋予各种类型的值。")]),e._v(" "),a("h3",{attrs:{id:"属性操作的标准方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性操作的标准方法"}},[e._v("#")]),e._v(" 属性操作的标准方法")]),e._v(" "),a("h4",{attrs:{id:"概述-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-5"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("元素节点提供六个方法，用来操作属性。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("getAttribute()")])]),e._v(" "),a("li",[a("code",[e._v("getAttributeNames()")])]),e._v(" "),a("li",[a("code",[e._v("setAttribute()")])]),e._v(" "),a("li",[a("code",[e._v("hasAttribute()")])]),e._v(" "),a("li",[a("code",[e._v("hasAttributes()")])]),e._v(" "),a("li",[a("code",[e._v("removeAttribute()")])])]),e._v(" "),a("p",[e._v("这有几点注意。")]),e._v(" "),a("p",[e._v("（1）适用性")]),e._v(" "),a("p",[e._v("这六个方法对所有属性（包括用户自定义的属性）都适用。")]),e._v(" "),a("p",[e._v("（2）返回值")]),e._v(" "),a("p",[a("code",[e._v("getAttribute()")]),e._v("只返回字符串，不会返回其他类型的值。")]),e._v(" "),a("p",[e._v("（3）属性名")]),e._v(" "),a("p",[e._v("这些方法只接受属性的标准名称，不用改写保留字，比如"),a("code",[e._v("for")]),e._v("和"),a("code",[e._v("class")]),e._v("都可以直接使用。另外，这些方法对于属性名是大小写不敏感的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var image = document.images[0];\nimage.setAttribute('class', 'myImage');\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("setAttribute")]),e._v("方法直接使用"),a("code",[e._v("class")]),e._v("作为属性名，不用写成"),a("code",[e._v("className")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"element-getattribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-getattribute"}},[e._v("#")]),e._v(" Element.getAttribute()")]),e._v(" "),a("p",[a("code",[e._v("Element.getAttribute")]),e._v("方法返回当前元素节点的指定属性。如果指定属性不存在，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为\n// <div id="div1" align="left">\nvar div = document.getElementById(\'div1\');\ndiv.getAttribute(\'align\') // "left"\n')])])]),a("h4",{attrs:{id:"element-getattributenames"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-getattributenames"}},[e._v("#")]),e._v(" Element.getAttributeNames()")]),e._v(" "),a("p",[a("code",[e._v("Element.getAttributeNames()")]),e._v("返回一个数组，成员是当前元素的所有属性的名字。如果当前元素没有任何属性，则返回一个空数组。使用"),a("code",[e._v("Element.attributes")]),e._v("属性，也可以拿到同样的结果，唯一的区别是它返回的是类似数组的对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mydiv = document.getElementById('mydiv');\n\nmydiv.getAttributeNames().forEach(function (key) {\n  var value = mydiv.getAttribute(key);\n  console.log(key, value);\n})\n")])])]),a("p",[e._v("上面代码用于遍历某个节点的所有属性。")]),e._v(" "),a("h4",{attrs:{id:"element-setattribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-setattribute"}},[e._v("#")]),e._v(" Element.setAttribute()")]),e._v(" "),a("p",[a("code",[e._v("Element.setAttribute")]),e._v("方法用于为当前元素节点新增属性。如果同名属性已存在，则相当于编辑已存在的属性。该方法没有返回值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <button>Hello World</button>\nvar b = document.querySelector('button');\nb.setAttribute('name', 'myButton');\nb.setAttribute('disabled', true);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("button")]),e._v("元素的"),a("code",[e._v("name")]),e._v("属性被设成"),a("code",[e._v("myButton")]),e._v("，"),a("code",[e._v("disabled")]),e._v("属性被设成"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("这里有两个地方需要注意，首先，属性值总是字符串，其他类型的值会自动转成字符串，比如布尔值"),a("code",[e._v("true")]),e._v("就会变成字符串"),a("code",[e._v("true")]),e._v("；其次，上例的"),a("code",[e._v("disable")]),e._v("属性是一个布尔属性，对于"),a("code",[e._v("<button>")]),e._v("元素来说，这个属性不需要属性值，只要设置了就总是会生效，因此"),a("code",[e._v("setAttribute")]),e._v("方法里面可以将"),a("code",[e._v("disabled")]),e._v("属性设成任意值。")]),e._v(" "),a("h4",{attrs:{id:"element-hasattribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-hasattribute"}},[e._v("#")]),e._v(" Element.hasAttribute()")]),e._v(" "),a("p",[a("code",[e._v("Element.hasAttribute")]),e._v("方法返回一个布尔值，表示当前元素节点是否包含指定属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var d = document.getElementById('div1');\n\nif (d.hasAttribute('align')) {\n  d.setAttribute('align', 'center');\n}\n")])])]),a("p",[e._v("上面代码检查"),a("code",[e._v("div")]),e._v("节点是否含有"),a("code",[e._v("align")]),e._v("属性。如果有，则设置为居中对齐。")]),e._v(" "),a("h4",{attrs:{id:"element-hasattributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-hasattributes"}},[e._v("#")]),e._v(" Element.hasAttributes()")]),e._v(" "),a("p",[a("code",[e._v("Element.hasAttributes")]),e._v("方法返回一个布尔值，表示当前元素是否有属性，如果没有任何属性，就返回"),a("code",[e._v("false")]),e._v("，否则返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var foo = document.getElementById('foo');\nfoo.hasAttributes() // true\n")])])]),a("h4",{attrs:{id:"element-removeattribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-removeattribute"}},[e._v("#")]),e._v(" Element.removeAttribute()")]),e._v(" "),a("p",[a("code",[e._v("Element.removeAttribute")]),e._v("方法移除指定属性。该方法没有返回值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为\n// <div id="div1" align="left" width="200px">\ndocument.getElementById(\'div1\').removeAttribute(\'align\');\n// 现在的HTML代码为\n// <div id="div1" width="200px">\n')])])]),a("h3",{attrs:{id:"dataset-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dataset-属性"}},[e._v("#")]),e._v(" dataset 属性")]),e._v(" "),a("p",[e._v("有时，需要在HTML元素上附加数据，供 JavaScript 脚本使用。一种解决方法是自定义属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div id="mydiv" foo="bar">\n')])])]),a("p",[e._v("上面代码为"),a("code",[e._v("div")]),e._v("元素自定义了"),a("code",[e._v("foo")]),e._v("属性，然后可以用"),a("code",[e._v("getAttribute()")]),e._v("和"),a("code",[e._v("setAttribute()")]),e._v("读写这个属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var n = document.getElementById('mydiv');\nn.getAttribute('foo') // bar\nn.setAttribute('foo', 'baz')\n")])])]),a("p",[e._v("这种方法虽然可以达到目的，但是会使得 HTML 元素的属性不符合标准，导致网页代码通不过校验。")]),e._v(" "),a("p",[e._v("更好的解决方法是，使用标准提供的"),a("code",[e._v("data-*")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div id="mydiv" data-foo="bar">\n')])])]),a("p",[e._v("然后，使用元素节点对象的"),a("code",[e._v("dataset")]),e._v("属性，它指向一个对象，可以用来操作 HTML 元素标签的"),a("code",[e._v("data-*")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var n = document.getElementById('mydiv');\nn.dataset.foo // bar\nn.dataset.foo = 'baz'\n")])])]),a("p",[e._v("上面代码中，通过"),a("code",[e._v("dataset.foo")]),e._v("读写"),a("code",[e._v("data-foo")]),e._v("属性。")]),e._v(" "),a("p",[e._v("删除一个"),a("code",[e._v("data-*")]),e._v("属性，可以直接使用"),a("code",[e._v("delete")]),e._v("命令。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("delete document.getElementById('myDiv').dataset.foo;\n")])])]),a("p",[e._v("除了"),a("code",[e._v("dataset")]),e._v("属性，也可以用"),a("code",[e._v("getAttribute('data-foo')")]),e._v("、"),a("code",[e._v("removeAttribute('data-foo')")]),e._v("、"),a("code",[e._v("setAttribute('data-foo')")]),e._v("、"),a("code",[e._v("hasAttribute('data-foo')")]),e._v("等方法操作"),a("code",[e._v("data-*")]),e._v("属性。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("data-")]),e._v("后面的属性名有限制，只能包含字母、数字、连词线（"),a("code",[e._v("-")]),e._v("）、点（"),a("code",[e._v(".")]),e._v("）、冒号（"),a("code",[e._v(":")]),e._v("）和下划线（"),a("code",[e._v("_")]),e._v(")。而且，属性名不应该使用"),a("code",[e._v("A")]),e._v("到"),a("code",[e._v("Z")]),e._v("的大写字母，比如不能有"),a("code",[e._v("data-helloWorld")]),e._v("这样的属性名，而要写成"),a("code",[e._v("data-hello-world")]),e._v("。")]),e._v(" "),a("p",[e._v("转成"),a("code",[e._v("dataset")]),e._v("的键名时，连词线后面如果跟着一个小写字母，那么连词线会被移除，该小写字母转为大写字母，其他字符不变。反过来，"),a("code",[e._v("dataset")]),e._v("的键名转成属性名时，所有大写字母都会被转成连词线+该字母的小写形式，其他字符不变。比如，"),a("code",[e._v("dataset.helloWorld")]),e._v("会转成"),a("code",[e._v("data-hello-world")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"text-节点和-documentfragment-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-节点和-documentfragment-节点"}},[e._v("#")]),e._v(" Text 节点和 DocumentFragment 节点")]),e._v(" "),a("h3",{attrs:{id:"text-节点的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-节点的概念"}},[e._v("#")]),e._v(" Text 节点的概念")]),e._v(" "),a("p",[e._v("文本节点（"),a("code",[e._v("Text")]),e._v("）代表元素节点（"),a("code",[e._v("Element")]),e._v("）和属性节点（"),a("code",[e._v("Attribute")]),e._v("）的文本内容。如果一个节点只包含一段文本，那么它就有一个文本子节点，代表该节点的文本内容。")]),e._v(" "),a("p",[e._v("通常我们使用父节点的"),a("code",[e._v("firstChild")]),e._v("、"),a("code",[e._v("nextSibling")]),e._v("等属性获取文本节点，或者使用"),a("code",[e._v("Document")]),e._v("节点的"),a("code",[e._v("createTextNode")]),e._v("方法创造一个文本节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 获取文本节点\nvar textNode = document.querySelector('p').firstChild;\n\n// 创造文本节点\nvar textNode = document.createTextNode('Hi');\ndocument.querySelector('div').appendChild(textNode);\n")])])]),a("p",[e._v("浏览器原生提供一个"),a("code",[e._v("Text")]),e._v("构造函数。它返回一个文本节点实例。它的参数就是该文本节点的文本内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 空字符串\nvar text1 = new Text();\n\n// 非空字符串\nvar text2 = new Text('This is a text node');\n")])])]),a("p",[e._v("注意，由于空格也是一个字符，所以哪怕只有一个空格，也会形成文本节点。比如，"),a("code",[e._v("<p> </p>")]),e._v("包含一个空格，它的子节点就是一个文本节点。")]),e._v(" "),a("p",[e._v("文本节点除了继承"),a("code",[e._v("Node")]),e._v("接口，还继承了"),a("code",[e._v("CharacterData")]),e._v("接口。"),a("code",[e._v("Node")]),e._v("接口的属性和方法请参考《Node 接口》一章，这里不再重复介绍了，以下的属性和方法大部分来自"),a("code",[e._v("CharacterData")]),e._v("接口。")]),e._v(" "),a("h3",{attrs:{id:"text-节点的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-节点的属性"}},[e._v("#")]),e._v(" Text 节点的属性")]),e._v(" "),a("h4",{attrs:{id:"data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[e._v("#")]),e._v(" data")]),e._v(" "),a("p",[a("code",[e._v("data")]),e._v("属性等同于"),a("code",[e._v("nodeValue")]),e._v("属性，用来设置或读取文本节点的内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 读取文本内容\ndocument.querySelector('p').firstChild.data\n// 等同于\ndocument.querySelector('p').firstChild.nodeValue\n\n// 设置文本内容\ndocument.querySelector('p').firstChild.data = 'Hello World';\n")])])]),a("h4",{attrs:{id:"wholetext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wholetext"}},[e._v("#")]),e._v(" wholeText")]),e._v(" "),a("p",[a("code",[e._v("wholeText")]),e._v("属性将当前文本节点与毗邻的文本节点，作为一个整体返回。大多数情况下，"),a("code",[e._v("wholeText")]),e._v("属性的返回值，与"),a("code",[e._v("data")]),e._v("属性和"),a("code",[e._v("textContent")]),e._v("属性相同。但是，某些特殊情况会有差异。")]),e._v(" "),a("p",[e._v("举例来说，HTML 代码如下。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<p id="para">A <em>B</em> C</p>\n')])])]),a("p",[e._v("这时，文本节点的"),a("code",[e._v("wholeText")]),e._v("属性和"),a("code",[e._v("data")]),e._v("属性，返回值相同。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var el = document.getElementById(\'para\');\nel.firstChild.wholeText // "A "\nel.firstChild.data // "A "\n')])])]),a("p",[e._v("但是，一旦移除"),a("code",[e._v("<em>")]),e._v("节点，"),a("code",[e._v("wholeText")]),e._v("属性与"),a("code",[e._v("data")]),e._v("属性就会有差异，因为这时其实"),a("code",[e._v("<p>")]),e._v("节点下面包含了两个毗邻的文本节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('el.removeChild(para.childNodes[1]);\nel.firstChild.wholeText // "A C"\nel.firstChild.data // "A "\n')])])]),a("h4",{attrs:{id:"length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[e._v("#")]),e._v(" length")]),e._v(" "),a("p",[a("code",[e._v("length")]),e._v("属性返回当前文本节点的文本长度。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(new Text('Hello')).length // 5\n")])])]),a("h4",{attrs:{id:"nextelementsibling-previouselementsibling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nextelementsibling-previouselementsibling"}},[e._v("#")]),e._v(" nextElementSibling，previousElementSibling")]),e._v(" "),a("p",[a("code",[e._v("nextElementSibling")]),e._v("属性返回紧跟在当前文本节点后面的那个同级元素节点。如果取不到元素节点，则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 为\n// <div>Hello <em>World</em></div>\nvar tn = document.querySelector('div').firstChild;\ntn.nextElementSibling\n// <em>World</em>\n")])])]),a("p",[a("code",[e._v("previousElementSibling")]),e._v("属性返回当前文本节点前面最近的同级元素节点。如果取不到元素节点，则返回"),a("code",[e._v("null：")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"text-节点的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-节点的方法"}},[e._v("#")]),e._v(" Text 节点的方法")]),e._v(" "),a("h4",{attrs:{id:"appenddata-deletedata-insertdata-replacedata-substringdata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#appenddata-deletedata-insertdata-replacedata-substringdata"}},[e._v("#")]),e._v(" appendData()，deleteData()，insertData()，replaceData()，subStringData()")]),e._v(" "),a("p",[e._v("以下5个方法都是编辑"),a("code",[e._v("Text")]),e._v("节点文本内容的方法。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("appendData()")]),e._v("：在"),a("code",[e._v("Text")]),e._v("节点尾部追加字符串。")]),e._v(" "),a("li",[a("code",[e._v("deleteData()")]),e._v("：删除"),a("code",[e._v("Text")]),e._v("节点内部的子字符串，第一个参数为子字符串开始位置，第二个参数为子字符串长度。")]),e._v(" "),a("li",[a("code",[e._v("insertData()")]),e._v("：在"),a("code",[e._v("Text")]),e._v("节点插入字符串，第一个参数为插入位置，第二个参数为插入的子字符串。")]),e._v(" "),a("li",[a("code",[e._v("replaceData()")]),e._v("：用于替换文本，第一个参数为替换开始位置，第二个参数为需要被替换掉的长度，第三个参数为新加入的字符串。")]),e._v(" "),a("li",[a("code",[e._v("subStringData()")]),e._v("：用于获取子字符串，第一个参数为子字符串在"),a("code",[e._v("Text")]),e._v("节点中的开始位置，第二个参数为子字符串长度。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <p>Hello World</p>\nvar pElementText = document.querySelector('p').firstChild;\n\npElementText.appendData('!');\n// 页面显示 Hello World!\npElementText.deleteData(7, 5);\n// 页面显示 Hello W\npElementText.insertData(7, 'Hello ');\n// 页面显示 Hello WHello\npElementText.replaceData(7, 5, 'World');\n// 页面显示 Hello WWorld\npElementText.substringData(7, 10);\n// 页面显示不变，返回\"World \"\n")])])]),a("h4",{attrs:{id:"remove"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[e._v("#")]),e._v(" remove()")]),e._v(" "),a("p",[a("code",[e._v("remove")]),e._v("方法用于移除当前"),a("code",[e._v("Text")]),e._v("节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <p>Hello World</p>\ndocument.querySelector('p').firstChild.remove()\n// 现在 HTML 代码为\n// <p></p>\n")])])]),a("h4",{attrs:{id:"splittext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splittext"}},[e._v("#")]),e._v(" splitText()")]),e._v(" "),a("p",[a("code",[e._v("splitText")]),e._v("方法将"),a("code",[e._v("Text")]),e._v("节点一分为二，变成两个毗邻的"),a("code",[e._v("Text")]),e._v("节点。它的参数就是分割位置（从零开始），分割到该位置的字符前结束。如果分割位置不存在，将报错。")]),e._v(" "),a("p",[e._v("分割后，该方法返回分割位置后方的字符串，而原"),a("code",[e._v("Text")]),e._v("节点变成只包含分割位置前方的字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// html 代码为 <p id="p">foobar</p>\nvar p = document.getElementById(\'p\');\nvar textnode = p.firstChild;\n\nvar newText = textnode.splitText(3);\nnewText // "bar"\ntextnode // "foo"\n')])])]),a("p",[e._v("父元素节点的"),a("code",[e._v("normalize")]),e._v("方法可以将毗邻的两个"),a("code",[e._v("Text")]),e._v("节点合并。")]),e._v(" "),a("p",[e._v("接上面的例子，文本节点的"),a("code",[e._v("splitText")]),e._v("方法将一个"),a("code",[e._v("Text")]),e._v("节点分割成两个，父元素的"),a("code",[e._v("normalize")]),e._v("方法可以实现逆操作，将它们合并。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("p.childNodes.length // 2\n\n// 将毗邻的两个 Text 节点合并\np.normalize();\np.childNodes.length // 1\n")])])]),a("h3",{attrs:{id:"documentfragment-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#documentfragment-节点"}},[e._v("#")]),e._v(" DocumentFragment 节点")]),e._v(" "),a("p",[a("code",[e._v("DocumentFragment")]),e._v("节点代表一个文档的片段，本身就是一个完整的 DOM 树形结构。它没有父节点，"),a("code",[e._v("parentNode")]),e._v("返回"),a("code",[e._v("null")]),e._v("，但是可以插入任意数量的子节点。它不属于当前文档，操作"),a("code",[e._v("DocumentFragment")]),e._v("节点，要比直接操作 DOM 树快得多。")]),e._v(" "),a("p",[e._v("它一般用于构建一个 DOM 结构，然后插入当前文档。"),a("code",[e._v("document.createDocumentFragment")]),e._v("方法，以及浏览器原生的"),a("code",[e._v("DocumentFragment")]),e._v("构造函数，可以创建一个空的"),a("code",[e._v("DocumentFragment")]),e._v("节点。然后再使用其他 DOM 方法，向其添加子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var docFrag = document.createDocumentFragment();\n// 等同于\nvar docFrag = new DocumentFragment();\n\nvar li = document.createElement('li');\nli.textContent = 'Hello World';\ndocFrag.appendChild(li);\n\ndocument.querySelector('ul').appendChild(docFrag);\n")])])]),a("p",[e._v("上面代码创建了一个"),a("code",[e._v("DocumentFragment")]),e._v("节点，然后将一个"),a("code",[e._v("li")]),e._v("节点添加在它里面，最后将"),a("code",[e._v("DocumentFragment")]),e._v("节点移动到原文档。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("DocumentFragment")]),e._v("节点本身不能被插入当前文档。当它作为"),a("code",[e._v("appendChild()")]),e._v("、"),a("code",[e._v("insertBefore()")]),e._v("、"),a("code",[e._v("replaceChild()")]),e._v("等方法的参数时，是它的所有子节点插入当前文档，而不是它自身。一旦"),a("code",[e._v("DocumentFragment")]),e._v("节点被添加进当前文档，它自身就变成了空节点（"),a("code",[e._v("textContent")]),e._v("属性为空字符串），可以被再次使用。如果想要保存"),a("code",[e._v("DocumentFragment")]),e._v("节点的内容，可以使用"),a("code",[e._v("cloneNode")]),e._v("方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document\n  .querySelector('ul')\n  .appendChild(docFrag.cloneNode(true));\n")])])]),a("p",[e._v("上面这样添加"),a("code",[e._v("DocumentFragment")]),e._v("节点进入当前文档，不会清空"),a("code",[e._v("DocumentFragment")]),e._v("节点。")]),e._v(" "),a("p",[e._v("下面是一个例子，使用"),a("code",[e._v("DocumentFragment")]),e._v("反转一个指定节点的所有子节点的顺序。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function reverse(n) {\n  var f = document.createDocumentFragment();\n  while(n.lastChild) f.appendChild(n.lastChild);\n  n.appendChild(f);\n}\n")])])]),a("p",[a("code",[e._v("DocumentFragment")]),e._v("节点对象没有自己的属性和方法，全部继承自"),a("code",[e._v("Node")]),e._v("节点和"),a("code",[e._v("ParentNode")]),e._v("接口。也就是说，"),a("code",[e._v("DocumentFragment")]),e._v("节点比"),a("code",[e._v("Node")]),e._v("节点多出以下四个属性。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("children")]),e._v("：返回一个动态的"),a("code",[e._v("HTMLCollection")]),e._v("集合对象，包括当前"),a("code",[e._v("DocumentFragment")]),e._v("对象的所有子元素节点。")]),e._v(" "),a("li",[a("code",[e._v("firstElementChild")]),e._v("：返回当前"),a("code",[e._v("DocumentFragment")]),e._v("对象的第一个子元素节点，如果没有则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("lastElementChild")]),e._v("：返回当前"),a("code",[e._v("DocumentFragment")]),e._v("对象的最后一个子元素节点，如果没有则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("childElementCount")]),e._v("：返回当前"),a("code",[e._v("DocumentFragment")]),e._v("对象的所有子元素数量。")])]),e._v(" "),a("h2",{attrs:{id:"css-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-操作"}},[e._v("#")]),e._v(" CSS 操作")]),e._v(" "),a("p",[e._v("CSS 与 JavaScript 是两个有着明确分工的领域，前者负责页面的视觉效果，后者负责与用户的行为互动。但是，它们毕竟同属网页开发的前端，因此不可避免有着交叉和互相配合。本章介绍如何通过 JavaScript 操作 CSS。")]),e._v(" "),a("h3",{attrs:{id:"html-元素的-style-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-元素的-style-属性"}},[e._v("#")]),e._v(" HTML 元素的 style 属性")]),e._v(" "),a("p",[e._v("操作 CSS 样式最简单的方法，就是使用网页元素节点的"),a("code",[e._v("getAttribute()")]),e._v("方法、"),a("code",[e._v("setAttribute()")]),e._v("方法和"),a("code",[e._v("removeAttribute()")]),e._v("方法，直接读写或删除网页元素的"),a("code",[e._v("style")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("div.setAttribute(\n  'style',\n  'background-color:red;' + 'border:1px solid black;'\n);\n")])])]),a("p",[e._v("上面的代码相当于下面的 HTML 代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div style="background-color:red; border:1px solid black;" />\n')])])]),a("p",[a("code",[e._v("style")]),e._v("不仅可以使用字符串读写，它本身还是一个对象，部署了 CSSStyleDeclaration 接口（详见下面的介绍），可以直接读写个别属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("e.style.fontSize = '18px';\ne.style.color = 'black';\n")])])]),a("h3",{attrs:{id:"cssstyledeclaration-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssstyledeclaration-接口"}},[e._v("#")]),e._v(" CSSStyleDeclaration 接口")]),e._v(" "),a("h4",{attrs:{id:"简介-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介-2"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),a("p",[e._v("CSSStyleDeclaration 接口用来操作元素的样式。三个地方部署了这个接口。")]),e._v(" "),a("ul",[a("li",[e._v("元素节点的"),a("code",[e._v("style")]),e._v("属性（"),a("code",[e._v("Element.style")]),e._v("）")]),e._v(" "),a("li",[a("code",[e._v("CSSStyle")]),e._v("实例的"),a("code",[e._v("style")]),e._v("属性")]),e._v(" "),a("li",[a("code",[e._v("window.getComputedStyle()")]),e._v("的返回值")])]),e._v(" "),a("p",[e._v("CSSStyleDeclaration 接口可以直接读写 CSS 的样式属性，不过，连词号需要变成骆驼拼写法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var divStyle = document.querySelector('div').style;\n\ndivStyle.backgroundColor = 'red';\ndivStyle.border = '1px solid black';\ndivStyle.width = '100px';\ndivStyle.height = '100px';\ndivStyle.fontSize = '10em';\n\ndivStyle.backgroundColor // red\ndivStyle.border // 1px solid black\ndivStyle.height // 100px\ndivStyle.width // 100px\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("style")]),e._v("属性的值是一个 CSSStyleDeclaration 实例。这个对象所包含的属性与 CSS 规则一一对应，但是名字需要改写，比如"),a("code",[e._v("background-color")]),e._v("写成"),a("code",[e._v("backgroundColor")]),e._v("。改写的规则是将横杠从 CSS 属性名中去除，然后将横杠后的第一个字母大写。如果 CSS 属性名是 JavaScript 保留字，则规则名之前需要加上字符串"),a("code",[e._v("css")]),e._v("，比如"),a("code",[e._v("float")]),e._v("写成"),a("code",[e._v("cssFloat")]),e._v("。")]),e._v(" "),a("p",[e._v("注意，该对象的属性值都是字符串，设置时必须包括单位，但是不含规则结尾的分号。比如，"),a("code",[e._v("divStyle.width")]),e._v("不能写为"),a("code",[e._v("100")]),e._v("，而要写为"),a("code",[e._v("100px")]),e._v("。")]),e._v(" "),a("p",[e._v("另外，"),a("code",[e._v("Element.style")]),e._v("返回的只是行内样式，并不是该元素的全部样式。通过样式表设置的样式，或者从父元素继承的样式，无法通过这个属性得到。元素的全部样式要通过"),a("code",[e._v("window.getComputedStyle()")]),e._v("得到。")]),e._v(" "),a("h4",{attrs:{id:"cssstyledeclaration-实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssstyledeclaration-实例属性"}},[e._v("#")]),e._v(" CSSStyleDeclaration 实例属性")]),e._v(" "),a("p",[a("strong",[e._v("（1）CSSStyleDeclaration.cssText")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.cssText")]),e._v("属性用来读写当前规则的所有样式声明文本。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var divStyle = document.querySelector('div').style;\n\ndivStyle.cssText = 'background-color: red;'\n  + 'border: 1px solid black;'\n  + 'height: 100px;'\n  + 'width: 100px;';\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("cssText")]),e._v("的属性值不用改写 CSS 属性名。")]),e._v(" "),a("p",[e._v("删除一个元素的所有行内样式，最简便的方法就是设置"),a("code",[e._v("cssText")]),e._v("为空字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("divStyle.cssText = '';\n")])])]),a("p",[a("strong",[e._v("（2）CSSStyleDeclaration.length")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.length")]),e._v("属性返回一个整数值，表示当前规则包含多少条样式声明。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <div id="myDiv"\n//   style="height: 1px;width: 100%;background-color: #CA1;"\n// ></div>\nvar myDiv = document.getElementById(\'myDiv\');\nvar divStyle = myDiv.style;\ndivStyle.length // 3\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("myDiv")]),e._v("元素的行内样式共包含3条样式规则。")]),e._v(" "),a("p",[a("strong",[e._v("（3）CSSStyleDeclaration.parentRule")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.parentRule")]),e._v("属性返回当前规则所属的那个样式块（CSSRule 实例）。如果不存在所属的样式块，该属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[e._v("该属性只读，且只在使用 CSSRule 接口时有意义。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var declaration = document.styleSheets[0].rules[0].style;\ndeclaration.parentRule === document.styleSheets[0].rules[0]\n// true\n")])])]),a("h4",{attrs:{id:"cssstyledeclaration-实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssstyledeclaration-实例方法"}},[e._v("#")]),e._v(" CSSStyleDeclaration 实例方法")]),e._v(" "),a("p",[a("strong",[e._v("（1）CSSStyleDeclaration.getPropertyPriority()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.getPropertyPriority")]),e._v("方法接受 CSS 样式的属性名作为参数，返回一个字符串，表示有没有设置"),a("code",[e._v("important")]),e._v("优先级。如果有就返回"),a("code",[e._v("important")]),e._v("，否则返回空字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为\n// <div id="myDiv" style="margin: 10px!important; color: red;"/>\nvar style = document.getElementById(\'myDiv\').style;\nstyle.margin // "10px"\nstyle.getPropertyPriority(\'margin\') // "important"\nstyle.getPropertyPriority(\'color\') // ""\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("margin")]),e._v("属性有"),a("code",[e._v("important")]),e._v("优先级，"),a("code",[e._v("color")]),e._v("属性没有。")]),e._v(" "),a("p",[a("strong",[e._v("（2）CSSStyleDeclaration.getPropertyValue()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.getPropertyValue")]),e._v("方法接受 CSS 样式属性名作为参数，返回一个字符串，表示该属性的属性值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为\n// <div id="myDiv" style="margin: 10px!important; color: red;"/>\nvar style = document.getElementById(\'myDiv\').style;\nstyle.margin // "10px"\nstyle.getPropertyValue("margin") // "10px"\n')])])]),a("p",[a("strong",[e._v("（3）CSSStyleDeclaration.item()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.item")]),e._v("方法接受一个整数值作为参数，返回该位置的 CSS 属性名。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为\n// <div id="myDiv" style="color: red; background-color: white;"/>\nvar style = document.getElementById(\'myDiv\').style;\nstyle.item(0) // "color"\nstyle.item(1) // "background-color"\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("0")]),e._v("号位置的 CSS 属性名是"),a("code",[e._v("color")]),e._v("，"),a("code",[e._v("1")]),e._v("号位置的 CSS 属性名是"),a("code",[e._v("background-color")]),e._v("。")]),e._v(" "),a("p",[e._v("如果没有提供参数，这个方法会报错。如果参数值超过实际的属性数目，这个方法返回一个空字符值。")]),e._v(" "),a("p",[a("strong",[e._v("（4）CSSStyleDeclaration.removeProperty()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.removeProperty")]),e._v("方法接受一个属性名作为参数，在 CSS 规则里面移除这个属性，返回这个属性原来的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码为\n// <div id="myDiv" style="color: red; background-color: white;">\n//   111\n// </div>\nvar style = document.getElementById(\'myDiv\').style;\nstyle.removeProperty(\'color\') // \'red\'\n// HTML 代码变为\n// <div id="myDiv" style="background-color: white;">\n')])])]),a("p",[e._v("上面代码中，删除"),a("code",[e._v("color")]),e._v("属性以后，字体颜色从红色变成默认颜色。")]),e._v(" "),a("p",[a("strong",[e._v("（5）CSSStyleDeclaration.setProperty()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleDeclaration.setProperty")]),e._v("方法用来设置新的 CSS 属性。该方法没有返回值。")]),e._v(" "),a("p",[e._v("该方法可以接受三个参数。")]),e._v(" "),a("ul",[a("li",[e._v("第一个参数：属性名，该参数是必需的。")]),e._v(" "),a("li",[e._v("第二个参数：属性值，该参数可选。如果省略，则参数值默认为空字符串。")]),e._v(" "),a("li",[e._v("第三个参数：优先级，该参数可选。如果设置，唯一的合法值是"),a("code",[e._v("important")]),e._v("，表示 CSS 规则里面的"),a("code",[e._v("!important")]),e._v("。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <div id=\"myDiv\" style=\"color: red; background-color: white;\">\n//   111\n// </div>\nvar style = document.getElementById('myDiv').style;\nstyle.setProperty('border', '1px solid blue');\n")])])]),a("p",[e._v("上面代码执行后，"),a("code",[e._v("myDiv")]),e._v("元素就会出现蓝色的边框。")]),e._v(" "),a("h3",{attrs:{id:"css-模块的侦测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-模块的侦测"}},[e._v("#")]),e._v(" CSS 模块的侦测")]),e._v(" "),a("p",[e._v("CSS 的规格发展太快，新的模块层出不穷。不同浏览器的不同版本，对 CSS 模块的支持情况都不一样。有时候，需要知道当前浏览器是否支持某个模块，这就叫做“CSS模块的侦测”。")]),e._v(" "),a("p",[e._v("一个比较普遍适用的方法是，判断元素的"),a("code",[e._v("style")]),e._v("对象的某个属性值是否为字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typeof element.style.animationName === 'string';\ntypeof element.style.transform === 'string';\n")])])]),a("p",[e._v("如果该 CSS 属性确实存在，会返回一个字符串。即使该属性实际上并未设置，也会返回一个空字符串。如果该属性不存在，则会返回"),a("code",[e._v("undefined")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.style['maxWidth'] // \"\"\ndocument.body.style['maximumWidth'] // undefined\n")])])]),a("p",[e._v("上面代码说明，这个浏览器支持"),a("code",[e._v("max-width")]),e._v("属性，但是不支持"),a("code",[e._v("maximum-width")]),e._v("属性。")]),e._v(" "),a("p",[e._v("注意，不管 CSS 属性名的写法带不带连词线，"),a("code",[e._v("style")]),e._v("属性上都能反映出该属性是否存在。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.body.style['backgroundColor'] // \"\"\ndocument.body.style['background-color'] // \"\"\n")])])]),a("p",[e._v("另外，使用的时候，需要把不同浏览器的 CSS 前缀也考虑进去。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var content = document.getElementById('content');\ntypeof content.style['webkitAnimation'] === 'string'\n")])])]),a("p",[e._v("这种侦测方法可以写成一个函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function isPropertySupported(property) {\n  if (property in document.body.style) return true;\n  var prefixes = ['Moz', 'Webkit', 'O', 'ms', 'Khtml'];\n  var prefProperty = property.charAt(0).toUpperCase() + property.substr(1);\n\n  for(var i = 0; i < prefixes.length; i++){\n    if((prefixes[i] + prefProperty) in document.body.style) return true;\n  }\n\n  return false;\n}\n\nisPropertySupported('background-clip')\n// true\n")])])]),a("h3",{attrs:{id:"css-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-对象"}},[e._v("#")]),e._v(" CSS 对象")]),e._v(" "),a("p",[e._v("浏览器原生提供 CSS 对象，为 JavaScript 操作 CSS 提供一些工具方法。")]),e._v(" "),a("p",[e._v("这个对象目前有两个静态方法。")]),e._v(" "),a("h4",{attrs:{id:"css-escape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-escape"}},[e._v("#")]),e._v(" CSS.escape()")]),e._v(" "),a("p",[a("code",[e._v("CSS.escape")]),e._v("方法用于转义 CSS 选择器里面的特殊字符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div id="foo#bar">\n')])])]),a("p",[e._v("上面代码中，该元素的"),a("code",[e._v("id")]),e._v("属性包含一个"),a("code",[e._v("#")]),e._v("号，该字符在 CSS 选择器里面有特殊含义。不能直接写成"),a("code",[e._v("document.querySelector('#foo#bar')")]),e._v("，只能写成"),a("code",[e._v("document.querySelector('#foo\\\\#bar')")]),e._v("。这里必须使用双斜杠的原因是，单引号字符串本身会转义一次斜杠。")]),e._v(" "),a("p",[a("code",[e._v("CSS.escape")]),e._v("方法就用来转义那些特殊字符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.querySelector('#' + CSS.escape('foo#bar'))\n")])])]),a("h4",{attrs:{id:"css-supports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-supports"}},[e._v("#")]),e._v(" CSS.supports()")]),e._v(" "),a("p",[a("code",[e._v("CSS.supports")]),e._v("方法返回一个布尔值，表示当前环境是否支持某一句 CSS 规则。")]),e._v(" "),a("p",[e._v("它的参数有两种写法，一种是第一个参数是属性名，第二个参数是属性值；另一种是整个参数就是一行完整的 CSS 语句。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 第一种写法\nCSS.supports('transform-origin', '5px') // true\n\n// 第二种写法\nCSS.supports('display: table-cell') // true\n")])])]),a("p",[e._v("注意，第二种写法的参数结尾不能带有分号，否则结果不准确。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CSS.supports('display: table-cell;') // false\n")])])]),a("h3",{attrs:{id:"window-getcomputedstyle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-getcomputedstyle"}},[e._v("#")]),e._v(" window.getComputedStyle()")]),e._v(" "),a("p",[e._v("行内样式（inline style）具有最高的优先级，改变行内样式，通常会立即反映出来。但是，网页元素最终的样式是综合各种规则计算出来的。因此，如果想得到元素实际的样式，只读取行内样式是不够的，需要得到浏览器最终计算出来的样式规则。")]),e._v(" "),a("p",[a("code",[e._v("window.getComputedStyle")]),e._v("方法，就用来返回浏览器计算后得到的最终规则。它接受一个节点对象作为参数，返回一个 CSSStyleDeclaration 实例，包含了指定节点的最终样式信息。所谓“最终样式信息”，指的是各种 CSS 规则叠加后的结果。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var div = document.querySelector('div');\nvar styleObj = window.getComputedStyle(div);\nstyleObj.backgroundColor\n")])])]),a("p",[e._v("上面代码中，得到的背景色就是"),a("code",[e._v("div")]),e._v("元素真正的背景色。")]),e._v(" "),a("p",[e._v("注意，CSSStyleDeclaration 实例是一个活的对象，任何对于样式的修改，会实时反映到这个实例上面。另外，这个实例是只读的。")]),e._v(" "),a("p",[a("code",[e._v("getComputedStyle")]),e._v("方法还可以接受第二个参数，表示当前元素的伪元素（比如"),a("code",[e._v(":before")]),e._v("、"),a("code",[e._v(":after")]),e._v("、"),a("code",[e._v(":first-line")]),e._v("、"),a("code",[e._v(":first-letter")]),e._v("等）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var result = window.getComputedStyle(div, ':before');\n")])])]),a("p",[e._v("下面的例子是如何获取元素的高度。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var elem = document.getElementById('elem-container');\nvar styleObj = window.getComputedStyle(elem, null)\nvar height = styleObj.height;\n// 等同于\nvar height = styleObj['height'];\nvar height = styleObj.getPropertyValue('height');\n")])])]),a("p",[e._v("上面代码得到的"),a("code",[e._v("height")]),e._v("属性，是浏览器最终渲染出来的高度，比其他方法得到的高度更可靠。由于"),a("code",[e._v("styleObj")]),e._v("是 CSSStyleDeclaration 实例，所以可以使用各种 CSSStyleDeclaration 的实例属性和方法。")]),e._v(" "),a("p",[e._v("有几点需要注意。")]),e._v(" "),a("ul",[a("li",[e._v("CSSStyleDeclaration 实例返回的 CSS 值都是绝对单位。比如，长度都是像素单位（返回值包括"),a("code",[e._v("px")]),e._v("后缀），颜色是"),a("code",[e._v("rgb(#, #, #)")]),e._v("或"),a("code",[e._v("rgba(#, #, #, #)")]),e._v("格式。")]),e._v(" "),a("li",[e._v("CSS 规则的简写形式无效。比如，想读取"),a("code",[e._v("margin")]),e._v("属性的值，不能直接读，只能读"),a("code",[e._v("marginLeft")]),e._v("、"),a("code",[e._v("marginTop")]),e._v("等属性；再比如，"),a("code",[e._v("font")]),e._v("属性也是不能直接读的，只能读"),a("code",[e._v("font-size")]),e._v("等单个属性。")]),e._v(" "),a("li",[e._v("如果读取 CSS 原始的属性名，要用方括号运算符，比如"),a("code",[e._v("styleObj['z-index']")]),e._v("；如果读取骆驼拼写法的 CSS 属性名，可以直接读取"),a("code",[e._v("styleObj.zIndex")]),e._v("。")]),e._v(" "),a("li",[e._v("该方法返回的 CSSStyleDeclaration 实例的"),a("code",[e._v("cssText")]),e._v("属性无效，返回"),a("code",[e._v("undefined")]),e._v("。")])]),e._v(" "),a("h3",{attrs:{id:"css-伪元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-伪元素"}},[e._v("#")]),e._v(" CSS 伪元素")]),e._v(" "),a("p",[e._v("CSS 伪元素是通过 CSS 向 DOM 添加的元素，主要是通过"),a("code",[e._v(":before")]),e._v("和"),a("code",[e._v(":after")]),e._v("选择器生成，然后用"),a("code",[e._v("content")]),e._v("属性指定伪元素的内容。")]),e._v(" "),a("p",[e._v("下面是一段 HTML 代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div id="test">Test content</div>\n')])])]),a("p",[e._v("CSS 添加伪元素"),a("code",[e._v(":before")]),e._v("的写法如下。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#test:before {\n  content: 'Before ';\n  color: #FF0;\n}\n")])])]),a("p",[e._v("节点元素的"),a("code",[e._v("style")]),e._v("对象无法读写伪元素的样式，这时就要用到"),a("code",[e._v("window.getComputedStyle()")]),e._v("。JavaScript 获取伪元素，可以使用下面的方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var test = document.querySelector('#test');\n\nvar result = window.getComputedStyle(test, ':before').content;\nvar color = window.getComputedStyle(test, ':before').color;\n")])])]),a("p",[e._v("此外，也可以使用 CSSStyleDeclaration 实例的"),a("code",[e._v("getPropertyValue")]),e._v("方法，获取伪元素的属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var result = window.getComputedStyle(test, ':before')\n  .getPropertyValue('content');\nvar color = window.getComputedStyle(test, ':before')\n  .getPropertyValue('color');\n")])])]),a("h3",{attrs:{id:"stylesheet-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stylesheet-接口"}},[e._v("#")]),e._v(" StyleSheet 接口")]),e._v(" "),a("h4",{attrs:{id:"概述-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-6"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[a("code",[e._v("StyleSheet")]),e._v("接口代表网页的一张样式表，包括"),a("code",[e._v("<link>")]),e._v("元素加载的样式表和"),a("code",[e._v("<style>")]),e._v("元素内嵌的样式表。")]),e._v(" "),a("p",[a("code",[e._v("document")]),e._v("对象的"),a("code",[e._v("styleSheets")]),e._v("属性，可以返回当前页面的所有"),a("code",[e._v("StyleSheet")]),e._v("实例（即所有样式表）。它是一个类似数组的对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var sheets = document.styleSheets;\nvar sheet = document.styleSheets[0];\nsheet instanceof StyleSheet // true\n")])])]),a("p",[e._v("如果是"),a("code",[e._v("<style>")]),e._v("元素嵌入的样式表，还有另一种获取"),a("code",[e._v("StyleSheet")]),e._v("实例的方法，就是这个节点元素的"),a("code",[e._v("sheet")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为 <style id=\"myStyle\"></style>\nvar myStyleSheet = document.getElementById('myStyle').sheet;\nmyStyleSheet instanceof StyleSheet // true\n")])])]),a("p",[e._v("严格地说，"),a("code",[e._v("StyleSheet")]),e._v("接口不仅包括网页样式表，还包括 XML 文档的样式表。所以，它有一个子类"),a("code",[e._v("CSSStyleSheet")]),e._v("表示网页的 CSS 样式表。我们在网页里面拿到的样式表实例，实际上是"),a("code",[e._v("CSSStyleSheet")]),e._v("的实例。这个子接口继承了"),a("code",[e._v("StyleSheet")]),e._v("的所有属性和方法，并且定义了几个自己的属性，下面把这两个接口放在一起介绍。")]),e._v(" "),a("h4",{attrs:{id:"实例属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性-2"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),a("p",[a("code",[e._v("StyleSheet")]),e._v("实例有以下属性。")]),e._v(" "),a("p",[a("strong",[e._v("（1）StyleSheet.disabled")])]),e._v(" "),a("p",[a("code",[e._v("StyleSheet.disabled")]),e._v("返回一个布尔值，表示该样式表是否处于禁用状态。手动设置"),a("code",[e._v("disabled")]),e._v("属性为"),a("code",[e._v("true")]),e._v("，等同于在"),a("code",[e._v("<link>")]),e._v("元素里面，将这张样式表设为"),a("code",[e._v("alternate stylesheet")]),e._v("，即该样式表将不会生效。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("disabled")]),e._v("属性只能在 JavaScript 脚本中设置，不能在 HTML 语句中设置。")]),e._v(" "),a("p",[a("strong",[e._v("（2）Stylesheet.href")])]),e._v(" "),a("p",[a("code",[e._v("Stylesheet.href")]),e._v("返回样式表的网址。对于内嵌样式表，该属性返回"),a("code",[e._v("null")]),e._v("。该属性只读。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.styleSheets[0].href\n")])])]),a("p",[a("strong",[e._v("（3）StyleSheet.media")])]),e._v(" "),a("p",[a("code",[e._v("StyleSheet.media")]),e._v("属性返回一个类似数组的对象（"),a("code",[e._v("MediaList")]),e._v("实例），成员是表示适用媒介的字符串。表示当前样式表是用于屏幕（screen），还是用于打印（print）或手持设备（handheld），或各种媒介都适用（all）。该属性只读，默认值是"),a("code",[e._v("screen")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.styleSheets[0].media.mediaText\n// "all"\n')])])]),a("p",[a("code",[e._v("MediaList")]),e._v("实例的"),a("code",[e._v("appendMedium")]),e._v("方法，用于增加媒介；"),a("code",[e._v("deleteMedium")]),e._v("方法用于删除媒介。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.styleSheets[0].media.appendMedium('handheld');\ndocument.styleSheets[0].media.deleteMedium('print');\n")])])]),a("p",[a("strong",[e._v("（4）StyleSheet.title")])]),e._v(" "),a("p",[a("code",[e._v("StyleSheet.title")]),e._v("属性返回样式表的"),a("code",[e._v("title")]),e._v("属性。")]),e._v(" "),a("p",[a("strong",[e._v("（5）StyleSheet.type")])]),e._v(" "),a("p",[a("code",[e._v("StyleSheet.type")]),e._v("属性返回样式表的"),a("code",[e._v("type")]),e._v("属性，通常是"),a("code",[e._v("text/css")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.styleSheets[0].type  // "text/css"\n')])])]),a("p",[a("strong",[e._v("（6）StyleSheet.parentStyleSheet")])]),e._v(" "),a("p",[e._v("CSS 的"),a("code",[e._v("@import")]),e._v("命令允许在样式表中加载其他样式表。"),a("code",[e._v("StyleSheet.parentStyleSheet")]),e._v("属性返回包含了当前样式表的那张样式表。如果当前样式表是顶层样式表，则该属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (stylesheet.parentStyleSheet) {\n  sheet = stylesheet.parentStyleSheet;\n} else {\n  sheet = stylesheet;\n}\n")])])]),a("p",[a("strong",[e._v("（7）StyleSheet.ownerNode")])]),e._v(" "),a("p",[a("code",[e._v("StyleSheet.ownerNode")]),e._v("属性返回"),a("code",[e._v("StyleSheet")]),e._v("对象所在的 DOM 节点，通常是"),a("code",[e._v("<link>")]),e._v("或"),a("code",[e._v("<style>")]),e._v("。对于那些由其他样式表引用的样式表，该属性为"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML代码为\n// <link rel="StyleSheet" href="example.css" type="text/css" />\ndocument.styleSheets[0].ownerNode // [object HTMLLinkElement]\n')])])]),a("p",[a("strong",[e._v("（8）CSSStyleSheet.cssRules")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleSheet.cssRules")]),e._v("属性指向一个类似数组的对象（"),a("code",[e._v("CSSRuleList")]),e._v("实例），里面每一个成员就是当前样式表的一条 CSS 规则。使用该规则的"),a("code",[e._v("cssText")]),e._v("属性，可以得到 CSS 规则对应的字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var sheet = document.querySelector(\'#styleElement\').sheet;\n\nsheet.cssRules[0].cssText\n// "body { background-color: red; margin: 20px; }"\n\nsheet.cssRules[1].cssText\n// "p { line-height: 1.4em; color: blue; }"\n')])])]),a("p",[e._v("每条 CSS 规则还有一个"),a("code",[e._v("style")]),e._v("属性，指向一个对象，用来读写具体的 CSS 命令。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cssStyleSheet.cssRules[0].style.color = 'red';\ncssStyleSheet.cssRules[1].style.color = 'purple';\n")])])]),a("p",[a("strong",[e._v("（9）CSSStyleSheet.ownerRule")])]),e._v(" "),a("p",[e._v("有些样式表是通过"),a("code",[e._v("@import")]),e._v("规则输入的，它的"),a("code",[e._v("ownerRule")]),e._v("属性会返回一个"),a("code",[e._v("CSSRule")]),e._v("实例，代表那行"),a("code",[e._v("@import")]),e._v("规则。如果当前样式表不是通过"),a("code",[e._v("@import")]),e._v("引入的，"),a("code",[e._v("ownerRule")]),e._v("属性返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"实例方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-2"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),a("p",[a("strong",[e._v("（1）CSSStyleSheet.insertRule()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleSheet.insertRule")]),e._v("方法用于在当前样式表的插入一个新的 CSS 规则。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var sheet = document.querySelector('#styleElement').sheet;\nsheet.insertRule('#block { color: white }', 0);\nsheet.insertRule('p { color: red }', 1);\n")])])]),a("p",[e._v("该方法可以接受两个参数，第一个参数是表示 CSS 规则的字符串，这里只能有一条规则，否则会报错。第二个参数是该规则在样式表的插入位置（从0开始），该参数可选，默认为0（即默认插在样式表的头部）。注意，如果插入位置大于现有规则的数目，会报错。")]),e._v(" "),a("p",[e._v("该方法的返回值是新插入规则的位置序号。")]),e._v(" "),a("p",[e._v("注意，浏览器对脚本在样式表里面插入规则有很多"),a("a",{attrs:{href:"https://drafts.csswg.org/cssom/#insert-a-css-rule",target:"_blank",rel:"noopener noreferrer"}},[e._v("限制"),a("OutboundLink")],1),e._v("。所以，这个方法最好放在"),a("code",[e._v("try...catch")]),e._v("里使用。")]),e._v(" "),a("p",[a("strong",[e._v("（2）CSSStyleSheet.deleteRule()")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleSheet.deleteRule")]),e._v("方法用来在样式表里面移除一条规则，它的参数是该条规则在"),a("code",[e._v("cssRules")]),e._v("对象中的位置。该方法没有返回值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.styleSheets[0].deleteRule(1);\n")])])]),a("h3",{attrs:{id:"实例-添加样式表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例-添加样式表"}},[e._v("#")]),e._v(" 实例：添加样式表")]),e._v(" "),a("p",[e._v("网页添加样式表有两种方式。一种是添加一张内置样式表，即在文档中添加一个"),a("code",[e._v("<style>")]),e._v("节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 写法一\nvar style = document.createElement('style');\nstyle.setAttribute('media', 'screen');\nstyle.innerHTML = 'body{color:red}';\ndocument.head.appendChild(style);\n\n// 写法二\nvar style = (function () {\n  var style = document.createElement('style');\n  document.head.appendChild(style);\n  return style;\n})();\nstyle.sheet.insertRule('.foo{color:red;}', 0);\n")])])]),a("p",[e._v("另一种是添加外部样式表，即在文档中添加一个"),a("code",[e._v("<link>")]),e._v("节点，然后将"),a("code",[e._v("href")]),e._v("属性指向外部样式表的 URL。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var linkElm = document.createElement('link');\nlinkElm.setAttribute('rel', 'stylesheet');\nlinkElm.setAttribute('type', 'text/css');\nlinkElm.setAttribute('href', 'reset-min.css');\n\ndocument.head.appendChild(linkElm);\n")])])]),a("h3",{attrs:{id:"cssrulelist-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssrulelist-接口"}},[e._v("#")]),e._v(" CSSRuleList 接口")]),e._v(" "),a("p",[e._v("CSSRuleList 接口是一个类似数组的对象，表示一组 CSS 规则，成员都是 CSSRule 实例。")]),e._v(" "),a("p",[e._v("获取 CSSRuleList 实例，一般是通过"),a("code",[e._v("StyleSheet.cssRules")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <style id=\"myStyle\">\n//   h1 { color: red; }\n//   p { color: blue; }\n// </style>\nvar myStyleSheet = document.getElementById('myStyle').sheet;\nvar crl = myStyleSheet.cssRules;\ncrl instanceof CSSRuleList // true\n")])])]),a("p",[e._v("CSSRuleList 实例里面，每一条规则（CSSRule 实例）可以通过"),a("code",[e._v("rules.item(index)")]),e._v("或者"),a("code",[e._v("rules[index]")]),e._v("拿到。CSS 规则的条数通过"),a("code",[e._v("rules.length")]),e._v("拿到。还是用上面的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("crl[0] instanceof CSSRule // true\ncrl.length // 2\n")])])]),a("p",[e._v("注意，添加规则和删除规则不能在 CSSRuleList 实例操作，而要在它的父元素 StyleSheet 实例上，通过"),a("code",[e._v("StyleSheet.insertRule()")]),e._v("和"),a("code",[e._v("StyleSheet.deleteRule()")]),e._v("操作。")]),e._v(" "),a("h3",{attrs:{id:"cssrule-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssrule-接口"}},[e._v("#")]),e._v(" CSSRule 接口")]),e._v(" "),a("h4",{attrs:{id:"概述-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-7"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("一条 CSS 规则包括两个部分：CSS 选择器和样式声明。下面就是一条典型的 CSS 规则。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".myClass {\n  color: red;\n  background-color: yellow;\n}\n")])])]),a("p",[e._v("JavaScript 通过 CSSRule 接口操作 CSS 规则。一般通过 CSSRuleList 接口（"),a("code",[e._v("StyleSheet.cssRules")]),e._v("）获取 CSSRule 实例。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <style id=\"myStyle\">\n//   .myClass {\n//     color: red;\n//     background-color: yellow;\n//   }\n// </style>\nvar myStyleSheet = document.getElementById('myStyle').sheet;\nvar ruleList = myStyleSheet.cssRules;\nvar rule = ruleList[0];\nrule instanceof CSSRule // true\n")])])]),a("h4",{attrs:{id:"cssrule-实例的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssrule-实例的属性"}},[e._v("#")]),e._v(" CSSRule 实例的属性")]),e._v(" "),a("p",[a("strong",[e._v("（1）CSSRule.cssText")])]),e._v(" "),a("p",[a("code",[e._v("CSSRule.cssText")]),e._v("属性返回当前规则的文本，还是使用上面的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('rule.cssText\n// ".myClass { color: red; background-color: yellow; }"\n')])])]),a("p",[e._v("如果规则是加载（"),a("code",[e._v("@import")]),e._v("）其他样式表，"),a("code",[e._v("cssText")]),e._v("属性返回"),a("code",[e._v("@import 'url'")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("（2）CSSRule.parentStyleSheet")])]),e._v(" "),a("p",[a("code",[e._v("CSSRule.parentStyleSheet")]),e._v("属性返回当前规则所在的样式表对象（StyleSheet 实例），还是使用上面的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("rule.parentStyleSheet === myStyleSheet // true\n")])])]),a("p",[a("strong",[e._v("（3）CSSRule.parentRule")])]),e._v(" "),a("p",[a("code",[e._v("CSSRule.parentRule")]),e._v("属性返回包含当前规则的父规则，如果不存在父规则（即当前规则是顶层规则），则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[e._v("父规则最常见的情况是，当前规则包含在"),a("code",[e._v("@media")]),e._v("规则代码块之中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <style id="myStyle">\n//   @supports (display: flex) {\n//     @media screen and (min-width: 900px) {\n//       article {\n//         display: flex;\n//       }\n//     }\n//  }\n// </style>\nvar myStyleSheet = document.getElementById(\'myStyle\').sheet;\nvar ruleList = myStyleSheet.cssRules;\n\nvar rule0 = ruleList[0];\nrule0.cssText\n// "@supports (display: flex) {\n//    @media screen and (min-width: 900px) {\n//      article { display: flex; }\n//    }\n// }"\n\n// 由于这条规则内嵌其他规则，\n// 所以它有 cssRules 属性，且该属性是 CSSRuleList 实例\nrule0.cssRules instanceof CSSRuleList // true\n\nvar rule1 = rule0.cssRules[0];\nrule1.cssText\n// "@media screen and (min-width: 900px) {\n//   article { display: flex; }\n// }"\n\nvar rule2 = rule1.cssRules[0];\nrule2.cssText\n// "article { display: flex; }"\n\nrule1.parentRule === rule0 // true\nrule2.parentRule === rule1 // true\n')])])]),a("p",[a("strong",[e._v("（4）CSSRule.type")])]),e._v(" "),a("p",[a("code",[e._v("CSSRule.type")]),e._v("属性返回一个整数值，表示当前规则的类型。")]),e._v(" "),a("p",[e._v("最常见的类型有以下几种。")]),e._v(" "),a("ul",[a("li",[e._v("1：普通样式规则（CSSStyleRule 实例）")]),e._v(" "),a("li",[e._v("3："),a("code",[e._v("@import")]),e._v("规则")]),e._v(" "),a("li",[e._v("4："),a("code",[e._v("@media")]),e._v("规则（CSSMediaRule 实例）")]),e._v(" "),a("li",[e._v("5："),a("code",[e._v("@font-face")]),e._v("规则")])]),e._v(" "),a("h4",{attrs:{id:"cssstylerule-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssstylerule-接口"}},[e._v("#")]),e._v(" CSSStyleRule 接口")]),e._v(" "),a("p",[e._v("如果一条 CSS 规则是普通的样式规则（不含特殊的 CSS 命令），那么除了 CSSRule 接口，它还部署了 CSSStyleRule 接口。")]),e._v(" "),a("p",[e._v("CSSStyleRule 接口有以下两个属性。")]),e._v(" "),a("p",[a("strong",[e._v("（1）CSSStyleRule.selectorText")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleRule.selectorText")]),e._v("属性返回当前规则的选择器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var stylesheet = document.styleSheets[0];\nstylesheet.cssRules[0].selectorText // ".myClass"\n')])])]),a("p",[e._v("注意，这个属性是可写的。")]),e._v(" "),a("p",[a("strong",[e._v("（2）CSSStyleRule.style")])]),e._v(" "),a("p",[a("code",[e._v("CSSStyleRule.style")]),e._v("属性返回一个对象（CSSStyleDeclaration 实例），代表当前规则的样式声明，也就是选择器后面的大括号里面的部分。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码为\n// <style id=\"myStyle\">\n//   p { color: red; }\n// </style>\nvar styleSheet = document.getElementById('myStyle').sheet;\nstyleSheet.cssRules[0].style instanceof CSSStyleDeclaration\n// true\n")])])]),a("p",[e._v("CSSStyleDeclaration 实例的"),a("code",[e._v("cssText")]),e._v("属性，可以返回所有样式声明，格式为字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('styleSheet.cssRules[0].style.cssText\n// "color: red;"\nstyleSheet.cssRules[0].selectorText\n// "p"\n')])])]),a("h4",{attrs:{id:"cssmediarule-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssmediarule-接口"}},[e._v("#")]),e._v(" CSSMediaRule 接口")]),e._v(" "),a("p",[e._v("如果一条 CSS 规则是"),a("code",[e._v("@media")]),e._v("代码块，那么它除了 CSSRule 接口，还部署了 CSSMediaRule 接口。")]),e._v(" "),a("p",[e._v("该接口主要提供"),a("code",[e._v("media")]),e._v("属性和"),a("code",[e._v("conditionText")]),e._v("属性。前者返回代表"),a("code",[e._v("@media")]),e._v("规则的一个对象（MediaList 实例），后者返回"),a("code",[e._v("@media")]),e._v("规则的生效条件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// HTML 代码如下\n// <style id="myStyle">\n//   @media screen and (min-width: 900px) {\n//     article { display: flex; }\n//   }\n// </style>\nvar styleSheet = document.getElementById(\'myStyle\').sheet;\nstyleSheet.cssRules[0] instanceof CSSMediaRule\n// true\n\nstyleSheet.cssRules[0].media\n//  {\n//    0: "screen and (min-width: 900px)",\n//    appendMedium: function,\n//    deleteMedium: function,\n//    item: function,\n//    length: 1,\n//    mediaText: "screen and (min-width: 900px)"\n// }\n\nstyleSheet.cssRules[0].conditionText\n// "screen and (min-width: 900px)"\n')])])]),a("h3",{attrs:{id:"window-matchmedia"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-matchmedia"}},[e._v("#")]),e._v(" window.matchMedia()")]),e._v(" "),a("h4",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),a("p",[a("code",[e._v("window.matchMedia()")]),e._v("方法用来将 CSS 的"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/DOM/Using_media_queries_from_code",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Media Query")]),a("OutboundLink")],1),e._v("条件语句，转换成一个 MediaQueryList 实例。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mdl = window.matchMedia('(min-width: 400px)');\nmdl instanceof MediaQueryList // true\n")])])]),a("p",[e._v("上面代码中，变量"),a("code",[e._v("mdl")]),e._v("就是 mediaQueryList 的实例。")]),e._v(" "),a("p",[e._v("注意，如果参数不是有效的"),a("code",[e._v("MediaQuery")]),e._v("条件语句，"),a("code",[e._v("window.matchMedia")]),e._v("不会报错，依然返回一个 MediaQueryList 实例。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.matchMedia('bad string') instanceof MediaQueryList // true\n")])])]),a("h4",{attrs:{id:"mediaquerylist-接口的实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mediaquerylist-接口的实例属性"}},[e._v("#")]),e._v(" MediaQueryList 接口的实例属性")]),e._v(" "),a("p",[e._v("MediaQueryList 实例有三个属性。")]),e._v(" "),a("p",[a("strong",[e._v("（1）MediaQueryList.media")])]),e._v(" "),a("p",[a("code",[e._v("MediaQueryList.media")]),e._v("属性返回一个字符串，表示对应的 MediaQuery 条件语句。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mql = window.matchMedia('(min-width: 400px)');\nmql.media // \"(min-width: 400px)\"\n")])])]),a("p",[a("strong",[e._v("（2）MediaQueryList.matches")])]),e._v(" "),a("p",[a("code",[e._v("MediaQueryList.matches")]),e._v("属性返回一个布尔值，表示当前页面是否符合指定的 MediaQuery 条件语句。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (window.matchMedia('(min-width: 400px)').matches) {\n  /* 当前视口不小于 400 像素 */\n} else {\n  /* 当前视口小于 400 像素 */\n}\n")])])]),a("p",[e._v("下面的例子根据"),a("code",[e._v("mediaQuery")]),e._v("是否匹配当前环境，加载相应的 CSS 样式表。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var result = window.matchMedia(\"(max-width: 700px)\");\n\nif (result.matches){\n  var linkElm = document.createElement('link');\n  linkElm.setAttribute('rel', 'stylesheet');\n  linkElm.setAttribute('type', 'text/css');\n  linkElm.setAttribute('href', 'small.css');\n\n  document.head.appendChild(linkElm);\n}\n")])])]),a("p",[a("strong",[e._v("（3）MediaQueryList.onchange")])]),e._v(" "),a("p",[e._v("如果 MediaQuery 条件语句的适配环境发生变化，会触发"),a("code",[e._v("change")]),e._v("事件。"),a("code",[e._v("MediaQueryList.onchange")]),e._v("属性用来指定"),a("code",[e._v("change")]),e._v("事件的监听函数。该函数的参数是"),a("code",[e._v("change")]),e._v("事件对象（MediaQueryListEvent 实例），该对象与 MediaQueryList 实例类似，也有"),a("code",[e._v("media")]),e._v("和"),a("code",[e._v("matches")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mql = window.matchMedia('(max-width: 600px)');\n\nmql.onchange = function(e) {\n  if (e.matches) {\n    /* 视口不超过 600 像素 */\n  } else {\n    /* 视口超过 600 像素 */\n  }\n}\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("change")]),e._v("事件发生后，存在两种可能。一种是显示宽度从600像素以上变为以下，另一种是从600像素以下变为以上，所以在监听函数内部要判断一下当前是哪一种情况。")]),e._v(" "),a("h4",{attrs:{id:"mediaquerylist-接口的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mediaquerylist-接口的实例方法"}},[e._v("#")]),e._v(" MediaQueryList 接口的实例方法")]),e._v(" "),a("p",[e._v("MediaQueryList 实例有两个方法"),a("code",[e._v("MediaQueryList.addListener()")]),e._v("和"),a("code",[e._v("MediaQueryList.removeListener()")]),e._v("，用来为"),a("code",[e._v("change")]),e._v("事件添加或撤销监听函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mql = window.matchMedia('(max-width: 600px)');\n\n// 指定监听函数\nmql.addListener(mqCallback);\n\n// 撤销监听函数\nmql.removeListener(mqCallback);\n\nfunction mqCallback(e) {\n  if (e.matches) {\n    /* 视口不超过 600 像素 */\n  } else {\n    /* 视口超过 600 像素 */\n  }\n}\n")])])]),a("p",[e._v("注意，"),a("code",[e._v("MediaQueryList.removeListener()")]),e._v("方法不能撤销"),a("code",[e._v("MediaQueryList.onchange")]),e._v("属性指定的监听函数。")]),e._v(" "),a("h2",{attrs:{id:"mutation-observer-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutation-observer-api"}},[e._v("#")]),e._v(" Mutation Observer API")]),e._v(" "),a("h3",{attrs:{id:"概述-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-8"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("Mutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。")]),e._v(" "),a("p",[e._v("概念上，它很接近事件，可以理解为 DOM 发生变动就会触发 Mutation Observer 事件。但是，它与事件有一个本质不同：事件是同步触发，也就是说，DOM 的变动立刻会触发相应的事件；Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。")]),e._v(" "),a("p",[e._v("这样设计是为了应付 DOM 变动频繁的特点。举例来说，如果文档中连续插入1000个"),a("code",[e._v("<p>")]),e._v("元素，就会连续触发1000个插入事件，执行每个事件的回调函数，这很可能造成浏览器的卡顿；而 Mutation Observer 完全不同，只在1000个段落都插入结束后才会触发，而且只触发一次。")]),e._v(" "),a("p",[e._v("Mutation Observer 有以下特点。")]),e._v(" "),a("ul",[a("li",[e._v("它等待所有脚本任务完成后，才会运行（即异步触发方式）。")]),e._v(" "),a("li",[e._v("它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。")]),e._v(" "),a("li",[e._v("它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。")])]),e._v(" "),a("h3",{attrs:{id:"mutationobserver-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-构造函数"}},[e._v("#")]),e._v(" MutationObserver 构造函数")]),e._v(" "),a("p",[e._v("使用时，首先使用"),a("code",[e._v("MutationObserver")]),e._v("构造函数，新建一个观察器实例，同时指定这个实例的回调函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var observer = new MutationObserver(callback);\n")])])]),a("p",[e._v("上面代码中的回调函数，会在每次 DOM 变动后调用。该回调函数接受两个参数，第一个是变动数组，第二个是观察器实例，下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var observer = new MutationObserver(function (mutations, observer) {\n  mutations.forEach(function(mutation) {\n    console.log(mutation);\n  });\n});\n")])])]),a("h3",{attrs:{id:"mutationobserver-的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-的实例方法"}},[e._v("#")]),e._v(" MutationObserver 的实例方法")]),e._v(" "),a("h4",{attrs:{id:"observe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#observe"}},[e._v("#")]),e._v(" observe()")]),e._v(" "),a("p",[a("code",[e._v("observe()")]),e._v("方法用来启动监听，它接受两个参数。")]),e._v(" "),a("ul",[a("li",[e._v("第一个参数：所要观察的 DOM 节点")]),e._v(" "),a("li",[e._v("第二个参数：一个配置对象，指定所要观察的特定变动")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var article = document.querySelector('article');\n\nvar  options = {\n  'childList': true,\n  'attributes':true\n} ;\n\nobserver.observe(article, options);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("observe()")]),e._v("方法接受两个参数，第一个是所要观察的DOM元素是"),a("code",[e._v("article")]),e._v("，第二个是所要观察的变动类型（子节点变动和属性变动）。")]),e._v(" "),a("p",[e._v("观察器所能观察的 DOM 变动类型（即上面代码的"),a("code",[e._v("options")]),e._v("对象），有以下几种。")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("childList")]),e._v("：子节点的变动（指新增，删除或者更改）。")]),e._v(" "),a("li",[a("strong",[e._v("attributes")]),e._v("：属性的变动。")]),e._v(" "),a("li",[a("strong",[e._v("characterData")]),e._v("：节点内容或节点文本的变动。")])]),e._v(" "),a("p",[e._v("想要观察哪一种变动类型，就在"),a("code",[e._v("option")]),e._v("对象中指定它的值为"),a("code",[e._v("true")]),e._v("。需要注意的是，至少必须同时指定这三种观察的一种，若均未指定将报错。")]),e._v(" "),a("p",[e._v("除了变动类型，"),a("code",[e._v("options")]),e._v("对象还可以设定以下属性：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("subtree")]),e._v("：布尔值，表示是否将该观察器应用于该节点的所有后代节点。")]),e._v(" "),a("li",[a("code",[e._v("attributeOldValue")]),e._v("：布尔值，表示观察"),a("code",[e._v("attributes")]),e._v("变动时，是否需要记录变动前的属性值。")]),e._v(" "),a("li",[a("code",[e._v("characterDataOldValue")]),e._v("：布尔值，表示观察"),a("code",[e._v("characterData")]),e._v("变动时，是否需要记录变动前的值。")]),e._v(" "),a("li",[a("code",[e._v("attributeFilter")]),e._v("：数组，表示需要观察的特定属性（比如"),a("code",[e._v("['class','src']")]),e._v("）。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 开始监听文档根节点（即<html>标签）的变动\nmutationObserver.observe(document.documentElement, {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true,\n  attributeOldValue: true,\n  characterDataOldValue: true\n});\n")])])]),a("p",[e._v("对一个节点添加观察器，就像使用"),a("code",[e._v("addEventListener()")]),e._v("方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。如果指定不同的"),a("code",[e._v("options")]),e._v("对象，以后面添加的那个为准，类似覆盖。")]),e._v(" "),a("p",[e._v("下面的例子是观察新增的子节点。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var insertedNodes = [];\nvar observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    for (var i = 0; i < mutation.addedNodes.length; i++) {\n      insertedNodes.push(mutation.addedNodes[i]);\n    }\n  });\n  console.log(insertedNodes);\n});\nobserver.observe(document, { childList: true, subtree: true });\n")])])]),a("h4",{attrs:{id:"disconnect-takerecords"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disconnect-takerecords"}},[e._v("#")]),e._v(" disconnect()，takeRecords()")]),e._v(" "),a("p",[a("code",[e._v("disconnect()")]),e._v("方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("observer.disconnect();\n")])])]),a("p",[a("code",[e._v("takeRecords()")]),e._v("方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("observer.takeRecords();\n")])])]),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 保存所有没有被观察器处理的变动\nvar changes = mutationObserver.takeRecords();\n\n// 停止观察\nmutationObserver.disconnect();\n")])])]),a("h3",{attrs:{id:"mutationrecord-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutationrecord-对象"}},[e._v("#")]),e._v(" MutationRecord 对象")]),e._v(" "),a("p",[e._v("DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 处理的就是一个个"),a("code",[e._v("MutationRecord")]),e._v("实例所组成的数组。")]),e._v(" "),a("p",[a("code",[e._v("MutationRecord")]),e._v("对象包含了DOM的相关信息，有如下属性：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("type")]),e._v("：观察的变动类型（"),a("code",[e._v("attributes")]),e._v("、"),a("code",[e._v("characterData")]),e._v("或者"),a("code",[e._v("childList")]),e._v("）。")]),e._v(" "),a("li",[a("code",[e._v("target")]),e._v("：发生变动的DOM节点。")]),e._v(" "),a("li",[a("code",[e._v("addedNodes")]),e._v("：新增的DOM节点。")]),e._v(" "),a("li",[a("code",[e._v("removedNodes")]),e._v("：删除的DOM节点。")]),e._v(" "),a("li",[a("code",[e._v("previousSibling")]),e._v("：前一个同级节点，如果没有则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("nextSibling")]),e._v("：下一个同级节点，如果没有则返回"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("attributeName")]),e._v("：发生变动的属性。如果设置了"),a("code",[e._v("attributeFilter")]),e._v("，则只返回预先指定的属性。")]),e._v(" "),a("li",[a("code",[e._v("oldValue")]),e._v("：变动前的值。这个属性只对"),a("code",[e._v("attribute")]),e._v("和"),a("code",[e._v("characterData")]),e._v("变动有效，如果发生"),a("code",[e._v("childList")]),e._v("变动，则返回"),a("code",[e._v("null")]),e._v("。")])]),e._v(" "),a("h3",{attrs:{id:"应用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用示例"}},[e._v("#")]),e._v(" 应用示例")]),e._v(" "),a("h4",{attrs:{id:"子元素的变动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子元素的变动"}},[e._v("#")]),e._v(" 子元素的变动")]),e._v(" "),a("p",[e._v("下面的例子说明如何读取变动记录。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var callback = function (records){\n  records.map(function(record){\n    console.log('Mutation type: ' + record.type);\n    console.log('Mutation target: ' + record.target);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar option = {\n  'childList': true,\n  'subtree': true\n};\n\nmo.observe(document.body, option);\n")])])]),a("p",[e._v("上面代码的观察器，观察"),a("code",[e._v("<body>")]),e._v("的所有下级节点（"),a("code",[e._v("childList")]),e._v("表示观察子节点，"),a("code",[e._v("subtree")]),e._v("表示观察后代节点）的变动。回调函数会在控制台显示所有变动的类型和目标节点。")]),e._v(" "),a("h4",{attrs:{id:"属性的变动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的变动"}},[e._v("#")]),e._v(" 属性的变动")]),e._v(" "),a("p",[e._v("下面的例子说明如何追踪属性的变动。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var callback = function (records) {\n  records.map(function (record) {\n    console.log('Previous attribute value: ' + record.oldValue);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar element = document.getElementById('#my_element');\n\nvar options = {\n  'attributes': true,\n  'attributeOldValue': true\n}\n\nmo.observe(element, options);\n")])])]),a("p",[e._v("上面代码先设定追踪属性变动（"),a("code",[e._v("'attributes': true")]),e._v("），然后设定记录变动前的值。实际发生变动时，会将变动前的值显示在控制台。")]),e._v(" "),a("h4",{attrs:{id:"取代-domcontentloaded-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取代-domcontentloaded-事件"}},[e._v("#")]),e._v(" 取代 DOMContentLoaded 事件")]),e._v(" "),a("p",[e._v("网页加载的时候，DOM 节点的生成会产生变动记录，因此只要观察 DOM 的变动，就能在第一时间触发相关事件，也就没有必要使用"),a("code",[e._v("DOMContentLoaded")]),e._v("事件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var observer = new MutationObserver(callback);\nobserver.observe(document.documentElement, {\n  childList: true,\n  subtree: true\n});\n")])])]),a("p",[e._v("上面代码中，监听"),a("code",[e._v("document.documentElement")]),e._v("（即网页的"),a("code",[e._v("<html>")]),e._v("HTML 节点）的子节点的变动，"),a("code",[e._v("subtree")]),e._v("属性指定监听还包括后代节点。因此，任意一个网页元素一旦生成，就能立刻被监听到。")]),e._v(" "),a("p",[e._v("下面的代码，使用"),a("code",[e._v("MutationObserver")]),e._v("对象封装一个监听 DOM 生成的函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(function(win){\n  'use strict';\n\n  var listeners = [];\n  var doc = win.document;\n  var MutationObserver = win.MutationObserver || win.WebKitMutationObserver;\n  var observer;\n\n  function ready(selector, fn){\n    // 储存选择器和回调函数\n    listeners.push({\n      selector: selector,\n      fn: fn\n    });\n    if(!observer){\n      // 监听document变化\n      observer = new MutationObserver(check);\n      observer.observe(doc.documentElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n    // 检查该节点是否已经在DOM中\n    check();\n  }\n\n  function check(){\n  // 检查是否匹配已储存的节点\n    for(var i = 0; i < listeners.length; i++){\n      var listener = listeners[i];\n      // 检查指定节点是否有匹配\n      var elements = doc.querySelectorAll(listener.selector);\n      for(var j = 0; j < elements.length; j++){\n        var element = elements[j];\n        // 确保回调函数只会对该元素调用一次\n        if(!element.ready){\n          element.ready = true;\n          // 对该节点调用回调函数\n          listener.fn.call(element, element);\n        }\n      }\n    }\n  }\n\n  // 对外暴露ready\n  win.ready = ready;\n\n})(this);\n\n// 使用方法\nready('.foo', function(element){\n  // ...\n});\n")])])]),a("h3",{attrs:{id:"参考链接-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-2"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),a("ul",[a("li",[e._v("Paul Kinlan, "),a("a",{attrs:{href:"https://developers.google.com/web/updates/2012/02/Detect-DOM-changes-with-Mutation-Observers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Detect DOM changes with Mutation Observers"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Tiffany Brown, "),a("a",{attrs:{href:"https://dev.opera.com/articles/view/mutation-observers-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting to know mutation observers"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Michal Budzynski, "),a("a",{attrs:{href:"https://michalbe.blogspot.com/2013/04/javascript-less-known-parts-dom.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript: The less known parts. DOM Mutations"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Jeff Griffiths, "),a("a",{attrs:{href:"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DOM MutationObserver – reacting to DOM changes without killing browser performance"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Addy Osmani, "),a("a",{attrs:{href:"http://addyosmani.com/blog/mutation-observers/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Detect, Undo And Redo DOM Changes With Mutation Observers"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Ryan Morr, "),a("a",{attrs:{href:"http://ryanmorr.com/using-mutation-observers-to-watch-for-element-availability/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using Mutation Observers to Watch for Element Availability"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);