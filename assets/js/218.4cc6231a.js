(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{654:function(e,t,a){"use strict";a.r(t);var r=a(25),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器模型-一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模型-一"}},[e._v("#")]),e._v(" 浏览器模型（一）")]),e._v(" "),a("h2",{attrs:{id:"浏览器模型概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模型概述"}},[e._v("#")]),e._v(" 浏览器模型概述")]),e._v(" "),a("p",[e._v("JavaScript 是浏览器的内置脚本语言。也就是说，浏览器内置了 JavaScript 引擎，并且提供各种接口，让 JavaScript 脚本可以控制浏览器的各种功能。一旦网页内嵌了 JavaScript 脚本，浏览器加载网页，就会去执行脚本，从而达到操作浏览器的目的，实现网页的各种动态效果。")]),e._v(" "),a("p",[e._v("本章开始介绍浏览器提供的各种 JavaScript 接口。首先，介绍 JavaScript 代码嵌入网页的方法。")]),e._v(" "),a("h3",{attrs:{id:"代码嵌入网页的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码嵌入网页的方法"}},[e._v("#")]),e._v(" 代码嵌入网页的方法")]),e._v(" "),a("p",[e._v("网页中嵌入 JavaScript 代码，主要有四种方法。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("<script>")]),e._v("元素直接嵌入代码。")]),e._v(" "),a("li",[a("code",[e._v("<script>")]),e._v("标签加载外部脚本")]),e._v(" "),a("li",[e._v("事件属性")]),e._v(" "),a("li",[e._v("URL 协议")])]),e._v(" "),a("h4",{attrs:{id:"script-元素嵌入代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-元素嵌入代码"}},[e._v("#")]),e._v(" script 元素嵌入代码")]),e._v(" "),a("p",[a("code",[e._v("<script>")]),e._v("元素内部可以直接写入 "),a("code",[e._v("JavaScript")]),e._v(" 代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script>\n  var x = 1 + 5;\n  console.log(x);\n<\/script>\n")])])]),a("p",[a("code",[e._v("<script>")]),e._v("标签有一个type属性，用来指定脚本类型。对 JavaScript 脚本来说，type属性可以设为两种值。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("text/javascript")]),e._v("：这是默认值，也是历史上一贯设定的值。如果你省略"),a("code",[e._v("type")]),e._v("属性，默认就是这个值。对于老式浏览器，设为这个值比较好。")]),e._v(" "),a("li",[a("code",[e._v("application/javascript")]),e._v("：对于较新的浏览器，建议设为这个值。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script type=\"application/javascript\">\n  console.log('Hello World');\n<\/script>\n")])])]),a("p",[e._v("由于"),a("code",[e._v("<script>")]),e._v("标签默认就是 JavaScript 代码。所以，嵌入 JavaScript 脚本时，"),a("code",[e._v("type")]),e._v("属性可以省略。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("type")]),e._v("属性的值，浏览器不认识，那么它不会执行其中的代码。利用这一点，可以在"),a("code",[e._v("<script>")]),e._v("标签之中嵌入任意的文本内容，只要加上一个浏览器不认识的"),a("code",[e._v("type")]),e._v("属性即可。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script id="mydata" type="x-custom-data">\n  console.log(\'Hello World\');\n<\/script>\n')])])]),a("p",[e._v("上面的代码，浏览器不会执行，也不会显示它的内容，因为不认识它的"),a("code",[e._v("type")]),e._v("属性。但是，这个"),a("code",[e._v("<script>")]),e._v("节点依然存在于 DOM 之中，可以使用"),a("code",[e._v("<script>")]),e._v("节点的"),a("code",[e._v("text")]),e._v("属性读出它的内容。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.getElementById('mydata').text\n//   console.log('Hello World');\n")])])]),a("h4",{attrs:{id:"script-元素加载外部脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-元素加载外部脚本"}},[e._v("#")]),e._v(" script 元素加载外部脚本")]),e._v(" "),a("p",[a("code",[e._v("<script>")]),e._v("标签也可以指定加载外部的脚本文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="https://www.example.com/script.js"><\/script>\n')])])]),a("p",[e._v("如果脚本文件使用了非英语字符，还应该注明字符的编码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script charset="utf-8" src="https://www.example.com/script.js"><\/script>\n')])])]),a("p",[e._v("所加载的脚本必须是纯的 JavaScript 代码，不能有"),a("code",[e._v("HTML")]),e._v("代码和"),a("code",[e._v("<script>")]),e._v("标签。")]),e._v(" "),a("p",[e._v("加载外部脚本和直接添加代码块，这两种方法不能混用。下面代码的"),a("code",[e._v("console.log")]),e._v("语句直接被忽略。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script charset="utf-8" src="example.js">\n  console.log(\'Hello World!\');\n<\/script>\n')])])]),a("p",[e._v("为了防止攻击者篡改外部脚本，"),a("code",[e._v("script")]),e._v("标签允许设置一个"),a("code",[e._v("integrity")]),e._v("属性，写入该外部脚本的 Hash 签名，用来验证脚本的一致性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="/assets/application.js"\n  integrity="sha256-TvVUHzSfftWg1rcfL6TIJ0XKEGrgLyEq6lEpcmrG9qs=">\n<\/script>\n')])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("script")]),e._v("标签有一个"),a("code",[e._v("integrity")]),e._v("属性，指定了外部脚本"),a("code",[e._v("/assets/application.js")]),e._v("的 SHA256 签名。一旦有人改了这个脚本，导致 SHA256 签名不匹配，浏览器就会拒绝加载。")]),e._v(" "),a("h4",{attrs:{id:"事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件属性"}},[e._v("#")]),e._v(" 事件属性")]),e._v(" "),a("p",[e._v("网页元素的事件属性（比如"),a("code",[e._v("onclick")]),e._v("和"),a("code",[e._v("onmouseover")]),e._v("），可以写入 JavaScript 代码。当指定事件发生时，就会调用这些代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<button id="myBtn" onclick="console.log(this.id)">点击</button>\n')])])]),a("p",[e._v("上面的事件属性代码只有一个语句。如果有多个语句，使用分号分隔即可。")]),e._v(" "),a("h4",{attrs:{id:"url-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-协议"}},[e._v("#")]),e._v(" URL 协议")]),e._v(" "),a("p",[e._v("URL 支持"),a("code",[e._v("javascript:")]),e._v("协议，即在 URL 的位置写入代码，使用这个 URL 的时候就会执行 JavaScript 代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<a href=\"javascript:console.log('Hello')\">点击</a>\n")])])]),a("p",[e._v("浏览器的地址栏也可以执行"),a("code",[e._v("javascript:")]),e._v("协议。将"),a("code",[e._v("javascript:console.log('Hello')")]),e._v("放入地址栏，按回车键也会执行这段代码。")]),e._v(" "),a("p",[e._v("如果 JavaScript 代码返回一个字符串，浏览器就会新建一个文档，展示这个字符串的内容，原有文档的内容都会消失。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a href="javascript: new Date().toLocaleTimeString();">点击</a>\n')])])]),a("p",[e._v("上面代码中，用户点击链接以后，会打开一个新文档，里面有当前时间。")]),e._v(" "),a("p",[e._v("如果返回的不是字符串，那么浏览器不会新建文档，也不会跳转。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a href="javascript: console.log(new Date().toLocaleTimeString())">点击</a>\n')])])]),a("p",[e._v("上面代码中，用户点击链接后，网页不会跳转，只会在控制台显示当前时间。")]),e._v(" "),a("p",[a("code",[e._v("javascript:")]),e._v("协议的常见用途是书签脚本 Bookmarklet。由于浏览器的书签保存的是一个网址，所以"),a("code",[e._v("javascript:")]),e._v("网址也可以保存在里面，用户选择这个书签的时候，就会在当前页面执行这个脚本。为了防止书签替换掉当前文档，可以在脚本前加上"),a("code",[e._v("void")]),e._v("，或者在脚本最后加上"),a("code",[e._v("void 0")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a href="javascript: void new Date().toLocaleTimeString();">点击</a>\n<a href="javascript: new Date().toLocaleTimeString();void 0;">点击</a>\n')])])]),a("p",[e._v("上面这两种写法，点击链接后，执行代码都不会网页跳转。")]),e._v(" "),a("h3",{attrs:{id:"script-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-元素"}},[e._v("#")]),e._v(" script 元素")]),e._v(" "),a("h4",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[e._v("#")]),e._v(" 工作原理")]),e._v(" "),a("p",[e._v("浏览器加载 JavaScript 脚本，主要通过"),a("code",[e._v("<script>")]),e._v("元素完成。正常的网页加载流程是这样的。")]),e._v(" "),a("ol",[a("li",[e._v("浏览器一边下载 HTML 网页，一边开始解析。也就是说，不等到下载完，就开始解析。")]),e._v(" "),a("li",[e._v("解析过程中，浏览器发现"),a("code",[e._v("<script>")]),e._v("元素，就暂停解析，把网页渲染的控制权转交给 JavaScript 引擎。")]),e._v(" "),a("li",[e._v("如果"),a("code",[e._v("<script>")]),e._v("元素引用了外部脚本，就下载该脚本再执行，否则就直接执行代码。")]),e._v(" "),a("li",[e._v("JavaScript 引擎执行完毕，控制权交还渲染引擎，恢复往下解析 HTML 网页。")])]),e._v(" "),a("p",[e._v("加载外部脚本时，浏览器会暂停页面渲染，等待脚本下载并执行完成后，再继续渲染。原因是 JavaScript 代码可以修改 DOM，所以必须把控制权让给它，否则会导致复杂的线程竞赛的问题。")]),e._v(" "),a("p",[e._v("如果外部脚本加载时间很长（一直无法完成下载），那么浏览器就会一直等待脚本下载完成，造成网页长时间失去响应，浏览器就会呈现“假死”状态，这被称为“阻塞效应”。")]),e._v(" "),a("p",[e._v("为了避免这种情况，较好的做法是将"),a("code",[e._v("<script>")]),e._v("标签都放在页面底部，而不是头部。这样即使遇到脚本失去响应，网页主体的渲染也已经完成了，用户至少可以看到内容，而不是面对一张空白的页面。如果某些脚本代码非常重要，一定要放在页面头部的话，最好直接将代码写入页面，而不是连接外部脚本文件，这样能缩短加载时间。")]),e._v(" "),a("p",[e._v("脚本文件都放在网页尾部加载，还有一个好处。因为在 DOM 结构生成之前就调用 DOM 节点，JavaScript 会报错，如果脚本都在网页尾部加载，就不存在这个问题，因为这时 DOM 肯定已经生成了。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<head>\n  <script>\n    console.log(document.body.innerHTML);\n  <\/script>\n</head>\n<body>\n</body>\n")])])]),a("p",[e._v("上面代码执行时会报错，因为此时"),a("code",[e._v("document.body")]),e._v("元素还未生成。")]),e._v(" "),a("p",[e._v("一种解决方法是设定"),a("code",[e._v("DOMContentLoaded")]),e._v("事件的回调函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<head>\n  <script>\n    document.addEventListener(\n      'DOMContentLoaded',\n      function (event) {\n        console.log(document.body.innerHTML);\n      }\n    );\n  <\/script>\n</head>\n")])])]),a("p",[e._v("上面代码中，指定"),a("code",[e._v("DOMContentLoaded")]),e._v("事件发生后，才开始执行相关代码。"),a("code",[e._v("DOMContentLoaded")]),e._v("事件只有在 DOM 结构生成之后才会触发。")]),e._v(" "),a("p",[e._v("另一种解决方法是，使用"),a("code",[e._v("<script>")]),e._v("标签的"),a("code",[e._v("onload")]),e._v("属性。当"),a("code",[e._v("<script>")]),e._v("标签指定的外部脚本文件下载和解析完成，会触发一个"),a("code",[e._v("load")]),e._v("事件，可以把所需执行的代码，放在这个事件的回调函数里面。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="jquery.min.js" onload="console.log(document.body.innerHTML)">\n<\/script>\n')])])]),a("p",[e._v("但是，如果将脚本放在页面底部，就可以完全按照正常的方式写，上面两种方式都不需要。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<body>\n  \x3c!-- 其他代码  --\x3e\n  <script>\n    console.log(document.body.innerHTML);\n  <\/script>\n</body>\n")])])]),a("p",[e._v("如果有多个"),a("code",[e._v("script")]),e._v("标签，比如下面这样。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="a.js"><\/script>\n<script src="b.js"><\/script>\n')])])]),a("p",[e._v("浏览器会同时并行下载"),a("code",[e._v("a.js")]),e._v("和"),a("code",[e._v("b.js")]),e._v("，但是，执行时会保证先执行"),a("code",[e._v("a.js")]),e._v("，然后再执行"),a("code",[e._v("b.js")]),e._v("，即使后者先下载完成，也是如此。也就是说，脚本的执行顺序由它们在页面中的出现顺序决定，这是为了保证脚本之间的依赖关系不受到破坏。当然，加载这两个脚本都会产生“阻塞效应”，必须等到它们都加载完成，浏览器才会继续页面渲染。")]),e._v(" "),a("p",[e._v("解析和执行 CSS，也会产生阻塞。Firefox 浏览器会等到脚本前面的所有样式表，都下载并解析完，再执行脚本；Webkit则是一旦发现脚本引用了样式，就会暂停执行脚本，等到样式表下载并解析完，再恢复执行。")]),e._v(" "),a("p",[e._v("此外，对于来自同一个域名的资源，比如脚本文件、样式表文件、图片文件等，浏览器一般有限制，同时最多下载6～20个资源，即最多同时打开的 TCP 连接有限制，这是为了防止对服务器造成太大压力。如果是来自不同域名的资源，就没有这个限制。所以，通常把静态文件放在不同的域名之下，以加快下载速度。")]),e._v(" "),a("h4",{attrs:{id:"defer-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer-属性"}},[e._v("#")]),e._v(" defer 属性")]),e._v(" "),a("p",[e._v("为了解决脚本文件下载阻塞网页渲染的问题，一个方法是对"),a("code",[e._v("<script>")]),e._v("元素加入"),a("code",[e._v("defer")]),e._v("属性。它的作用是延迟脚本的执行，等到 DOM 加载生成后，再执行脚本。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="a.js" defer><\/script>\n<script src="b.js" defer><\/script>\n')])])]),a("p",[e._v("上面代码中，只有等到 DOM 加载完成后，才会执行"),a("code",[e._v("a.js")]),e._v("和"),a("code",[e._v("b.js")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("defer")]),e._v("属性的运行流程如下。")]),e._v(" "),a("ol",[a("li",[e._v("浏览器开始解析 HTML 网页。")]),e._v(" "),a("li",[e._v("解析过程中，发现带有"),a("code",[e._v("defer")]),e._v("属性的"),a("code",[e._v("<script>")]),e._v("元素。")]),e._v(" "),a("li",[e._v("浏览器继续往下解析 HTML 网页，同时并行下载"),a("code",[e._v("<script>")]),e._v("元素加载的外部脚本。")]),e._v(" "),a("li",[e._v("浏览器完成解析 HTML 网页，此时再回过头执行已经下载完成的脚本。")])]),e._v(" "),a("p",[e._v("有了"),a("code",[e._v("defer")]),e._v("属性，浏览器下载脚本文件的时候，不会阻塞页面渲染。下载的脚本文件在"),a("code",[e._v("DOMContentLoaded")]),e._v("事件触发前执行（即刚刚读取完"),a("code",[e._v("</html>")]),e._v("标签），而且可以保证执行顺序就是它们在页面上出现的顺序。")]),e._v(" "),a("p",[e._v("对于内置而不是加载外部脚本的"),a("code",[e._v("script")]),e._v("标签，以及动态生成的"),a("code",[e._v("script")]),e._v("标签，"),a("code",[e._v("defer")]),e._v("属性不起作用。另外，使用"),a("code",[e._v("defer")]),e._v("加载的外部脚本不应该使用"),a("code",[e._v("document.write")]),e._v("方法。")]),e._v(" "),a("h4",{attrs:{id:"async-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-属性"}},[e._v("#")]),e._v(" async 属性")]),e._v(" "),a("p",[e._v("解决“阻塞效应”的另一个方法是对"),a("code",[e._v("<script>")]),e._v("元素加入"),a("code",[e._v("async")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="a.js" async><\/script>\n<script src="b.js" async><\/script>\n')])])]),a("p",[a("code",[e._v("async")]),e._v("属性的作用是，使用另一个进程下载脚本，下载时不会阻塞渲染。")]),e._v(" "),a("ol",[a("li",[e._v("浏览器开始解析 HTML 网页。")]),e._v(" "),a("li",[e._v("解析过程中，发现带有"),a("code",[e._v("async")]),e._v("属性的"),a("code",[e._v("script")]),e._v("标签。")]),e._v(" "),a("li",[e._v("浏览器继续往下解析 HTML 网页，同时并行下载"),a("code",[e._v("<script>")]),e._v("标签中的外部脚本。")]),e._v(" "),a("li",[e._v("脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。")]),e._v(" "),a("li",[e._v("脚本执行完毕，浏览器恢复解析 HTML 网页。")])]),e._v(" "),a("p",[a("code",[e._v("async")]),e._v("属性可以保证脚本下载的同时，浏览器继续渲染。需要注意的是，一旦采用这个属性，就无法保证脚本的执行顺序。哪个脚本先下载结束，就先执行那个脚本。另外，使用"),a("code",[e._v("async")]),e._v("属性的脚本文件里面的代码，不应该使用"),a("code",[e._v("document.write")]),e._v("方法。")]),e._v(" "),a("p",[a("code",[e._v("defer")]),e._v("属性和"),a("code",[e._v("async")]),e._v("属性到底应该使用哪一个？")]),e._v(" "),a("p",[e._v("一般来说，如果脚本之间没有依赖关系，就使用"),a("code",[e._v("async")]),e._v("属性，如果脚本之间有依赖关系，就使用"),a("code",[e._v("defer")]),e._v("属性。如果同时使用"),a("code",[e._v("async")]),e._v("和"),a("code",[e._v("defer")]),e._v("属性，后者不起作用，浏览器行为由"),a("code",[e._v("async")]),e._v("属性决定。")]),e._v(" "),a("h4",{attrs:{id:"脚本的动态加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本的动态加载"}},[e._v("#")]),e._v(" 脚本的动态加载")]),e._v(" "),a("p",[a("code",[e._v("<script>")]),e._v("元素还可以动态生成，生成后再插入页面，从而实现脚本的动态加载。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("['a.js', 'b.js'].forEach(function(src) {\n  var script = document.createElement('script');\n  script.src = src;\n  document.head.appendChild(script);\n});\n")])])]),a("p",[e._v("这种方法的好处是，动态生成的"),a("code",[e._v("script")]),e._v("标签不会阻塞页面渲染，也就不会造成浏览器假死。但是问题在于，这种方法无法保证脚本的执行顺序，哪个脚本文件先下载完成，就先执行哪个。")]),e._v(" "),a("p",[e._v("如果想避免这个问题，可以设置async属性为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("['a.js', 'b.js'].forEach(function(src) {\n  var script = document.createElement('script');\n  script.src = src;\n  script.async = false;\n  document.head.appendChild(script);\n});\n")])])]),a("p",[e._v("上面的代码不会阻塞页面渲染，而且可以保证"),a("code",[e._v("b.js")]),e._v("在"),a("code",[e._v("a.js")]),e._v("后面执行。不过需要注意的是，在这段代码后面加载的脚本文件，会因此都等待"),a("code",[e._v("b.js")]),e._v("执行完成后再执行。")]),e._v(" "),a("p",[e._v("如果想为动态加载的脚本指定回调函数，可以使用下面的写法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function loadScript(src, done) {\n  var js = document.createElement('script');\n  js.src = src;\n  js.onload = function() {\n    done();\n  };\n  js.onerror = function() {\n    done(new Error('Failed to load script ' + src));\n  };\n  document.head.appendChild(js);\n}\n")])])]),a("h4",{attrs:{id:"加载使用的协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载使用的协议"}},[e._v("#")]),e._v(" 加载使用的协议")]),e._v(" "),a("p",[e._v("如果不指定协议，浏览器默认采用 HTTP 协议下载。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="example.js"><\/script>\n')])])]),a("p",[e._v("上面的"),a("code",[e._v("example.js")]),e._v("默认就是采用 HTTP 协议下载，如果要采用 HTTPS 协议下载，必须写明。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="https://example.js"><\/script>\n')])])]),a("p",[e._v("但是有时我们会希望，根据页面本身的协议来决定加载协议，这时可以采用下面的写法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="//example.js"><\/script>\n')])])]),a("h3",{attrs:{id:"浏览器的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的组成"}},[e._v("#")]),e._v(" 浏览器的组成")]),e._v(" "),a("p",[e._v("浏览器的核心是两部分：渲染引擎和 JavaScript 解释器（又称 JavaScript 引擎）。")]),e._v(" "),a("h4",{attrs:{id:"渲染引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎"}},[e._v("#")]),e._v(" 渲染引擎")]),e._v(" "),a("p",[e._v("渲染引擎的主要作用是，将网页代码渲染为用户视觉可以感知的平面文档。")]),e._v(" "),a("p",[e._v("不同的浏览器有不同的渲染引擎。")]),e._v(" "),a("ul",[a("li",[e._v("Firefox：Gecko 引擎")]),e._v(" "),a("li",[e._v("Safari：WebKit 引擎")]),e._v(" "),a("li",[e._v("Chrome：Blink 引擎")]),e._v(" "),a("li",[e._v("IE: Trident 引擎")]),e._v(" "),a("li",[e._v("Edge: EdgeHTML 引擎")])]),e._v(" "),a("p",[e._v("渲染引擎处理网页，通常分成四个阶段。")]),e._v(" "),a("ol",[a("li",[e._v("解析代码：HTML 代码解析为 DOM，CSS 代码解析为 CSSOM（CSS Object Model）。")]),e._v(" "),a("li",[e._v("对象合成：将 DOM 和 CSSOM 合成一棵渲染树（render tree）。")]),e._v(" "),a("li",[e._v("布局：计算出渲染树的布局（layout）。")]),e._v(" "),a("li",[e._v("绘制：将渲染树绘制到屏幕。")])]),e._v(" "),a("p",[e._v("以上四步并非严格按顺序执行，往往第一步还没完成，第二步和第三步就已经开始了。所以，会看到这种情况：网页的 HTML 代码还没下载完，但浏览器已经显示出内容了。")]),e._v(" "),a("h4",{attrs:{id:"重流和重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重流和重绘"}},[e._v("#")]),e._v(" 重流和重绘")]),e._v(" "),a("p",[e._v("渲染树转换为网页布局，称为“布局流”（flow）；布局显示到页面的这个过程，称为“绘制”（paint）。它们都具有阻塞效应，并且会耗费很多时间和计算资源。")]),e._v(" "),a("p",[e._v("页面生成以后，脚本操作和样式表操作，都会触发“重流”（reflow）和“重绘”（repaint）。用户的互动也会触发重流和重绘，比如设置了鼠标悬停（"),a("code",[e._v("a:hover")]),e._v("）效果、页面滚动、在输入框中输入文本、改变窗口大小等等。")]),e._v(" "),a("p",[e._v("重流和重绘并不一定一起发生，重流必然导致重绘，重绘不一定需要重流。比如改变元素颜色，只会导致重绘，而不会导致重流；改变元素的布局，则会导致重绘和重流。")]),e._v(" "),a("p",[e._v("大多数情况下，浏览器会智能判断，将重流和重绘只限制到相关的子树上面，最小化所耗费的代价，而不会全局重新生成网页。")]),e._v(" "),a("p",[e._v("作为开发者，应该尽量设法降低重绘的次数和成本。比如，尽量不要变动高层的 DOM 元素，而以底层 DOM 元素的变动代替；再比如，重绘"),a("code",[e._v("table")]),e._v("布局和"),a("code",[e._v("flex")]),e._v("布局，开销都会比较大。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var foo = document.getElementById('foobar');\n\nfoo.style.color = 'blue';\nfoo.style.marginTop = '30px';\n")])])]),a("p",[e._v("上面的代码只会导致一次重绘，因为浏览器会累积 DOM 变动，然后一次性执行。")]),e._v(" "),a("p",[e._v("下面是一些优化技巧。")]),e._v(" "),a("ul",[a("li",[e._v("读取 DOM 或者写入 DOM，尽量写在一起，不要混杂。不要读取一个 DOM 节点，然后立刻写入，接着再读取一个 DOM 节点。")]),e._v(" "),a("li",[e._v("缓存 DOM 信息。")]),e._v(" "),a("li",[e._v("不要一项一项地改变样式，而是使用 CSS class 一次性改变样式。")]),e._v(" "),a("li",[e._v("使用"),a("code",[e._v("documentFragment")]),e._v("操作 DOM")]),e._v(" "),a("li",[e._v("动画使用"),a("code",[e._v("absolute")]),e._v("定位或"),a("code",[e._v("fixed")]),e._v("定位，这样可以减少对其他元素的影响。")]),e._v(" "),a("li",[e._v("只在必要时才显示隐藏元素。")]),e._v(" "),a("li",[e._v("使用"),a("code",[e._v("window.requestAnimationFrame()")]),e._v("，因为它可以把代码推迟到下一次重绘之前执行，而不是立即要求页面重绘。")]),e._v(" "),a("li",[e._v("使用虚拟 DOM（virtual DOM）库。")])]),e._v(" "),a("p",[e._v("下面是一个"),a("code",[e._v("window.requestAnimationFrame()")]),e._v("对比效果的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 重流代价高\nfunction doubleHeight(element) {\n  var currentHeight = element.clientHeight;\n  element.style.height = (currentHeight * 2) + 'px';\n}\n\nall_my_elements.forEach(doubleHeight);\n\n// 重绘代价低\nfunction doubleHeight(element) {\n  var currentHeight = element.clientHeight;\n\n  window.requestAnimationFrame(function () {\n    element.style.height = (currentHeight * 2) + 'px';\n  });\n}\n\nall_my_elements.forEach(doubleHeight);\n")])])]),a("p",[e._v("上面的第一段代码，每读一次 DOM，就写入新的值，会造成不停的重排和重流。第二段代码把所有的写操作，都累积在一起，从而 DOM 代码变动的代价就最小化了。")]),e._v(" "),a("h4",{attrs:{id:"javascript-引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-引擎"}},[e._v("#")]),e._v(" JavaScript 引擎")]),e._v(" "),a("p",[e._v("JavaScript 引擎的主要作用是，读取网页中的 JavaScript 代码，对其处理后运行。")]),e._v(" "),a("p",[e._v("JavaScript 是一种解释型语言，也就是说，它不需要编译，由解释器实时运行。这样的好处是运行和修改都比较方便，刷新页面就可以重新解释；缺点是每次运行都要调用解释器，系统开销较大，运行速度慢于编译型语言。")]),e._v(" "),a("p",[e._v("为了提高运行速度，目前的浏览器都将 JavaScript 进行一定程度的编译，生成类似字节码（bytecode）的中间代码，以提高运行速度。")]),e._v(" "),a("p",[e._v("早期，浏览器内部对 JavaScript 的处理过程如下：")]),e._v(" "),a("ol",[a("li",[e._v("读取代码，进行词法分析（Lexical analysis），将代码分解成词元（token）。")]),e._v(" "),a("li",[e._v("对词元进行语法分析（parsing），将代码整理成“语法树”（syntax tree）。")]),e._v(" "),a("li",[e._v("使用“翻译器”（translator），将代码转为字节码（bytecode）。")]),e._v(" "),a("li",[e._v("使用“字节码解释器”（bytecode interpreter），将字节码转为机器码。")])]),e._v(" "),a("p",[e._v("逐行解释将字节码转为机器码，是很低效的。为了提高运行速度，现代浏览器改为采用“即时编译”（Just In Time compiler，缩写 JIT），即字节码只在运行时编译，用到哪一行就编译哪一行，并且把编译结果缓存（inline cache）。通常，一个程序被经常用到的，只是其中一小部分代码，有了缓存的编译结果，整个程序的运行速度就会显著提升。")]),e._v(" "),a("p",[e._v("字节码不能直接运行，而是运行在一个虚拟机（Virtual Machine）之上，一般也把虚拟机称为 JavaScript 引擎。并非所有的 JavaScript 虚拟机运行时都有字节码，有的 JavaScript 虚拟机基于源码，即只要有可能，就通过 JIT（just in time）编译器直接把源码编译成机器码运行，省略字节码步骤。这一点与其他采用虚拟机（比如 Java）的语言不尽相同。这样做的目的，是为了尽可能地优化代码、提高性能。下面是目前最常见的一些 JavaScript 虚拟机：")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chakra_(JScript_engine)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chakra"),a("OutboundLink")],1),e._v(" (Microsoft Internet Explorer)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/WebKit#JavaScriptCore",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nitro/JavaScript Core"),a("OutboundLink")],1),e._v(" (Safari)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://dev.opera.com/articles/view/labs-carakan/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Carakan"),a("OutboundLink")],1),e._v(" (Opera)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/SpiderMonkey",target:"_blank",rel:"noopener noreferrer"}},[e._v("SpiderMonkey"),a("OutboundLink")],1),e._v(" (Firefox)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chrome_V8",target:"_blank",rel:"noopener noreferrer"}},[e._v("V8"),a("OutboundLink")],1),e._v(" (Chrome, Chromium)")])]),e._v(" "),a("h3",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),a("ul",[a("li",[e._v("John Dalziel, "),a("a",{attrs:{href:"http://creativejs.com/2013/06/the-race-for-speed-part-2-how-javascript-compilers-work/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The race for speed part 2: How JavaScript compilers work"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Jake Archibald, "),a("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/speed/script-loading/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deep dive into the murky waters of script loading"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Mozilla Developer Network, "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout",target:"_blank",rel:"noopener noreferrer"}},[e._v("window.setTimeout"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Remy Sharp, "),a("a",{attrs:{href:"http://remysharp.com/2010/07/21/throttling-function-calls/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Throttling function calls"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Ayman Farhat, "),a("a",{attrs:{href:"http://www.thecodeship.com/web-development/alternative-to-javascript-evil-setinterval/",target:"_blank",rel:"noopener noreferrer"}},[e._v("An alternative to JavaScript's evil setInterval"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Ilya Grigorik, "),a("a",{attrs:{href:"https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/",target:"_blank",rel:"noopener noreferrer"}},[e._v('Script-injected "async scripts" considered harmful'),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Axel Rauschmayer, "),a("a",{attrs:{href:"http://www.2ality.com/2014/09/es6-promises-foundations.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript 6 promises (1/2): foundations"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Daniel Imms, "),a("a",{attrs:{href:"http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("async vs defer attributes"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Craig Buckler, "),a("a",{attrs:{href:"http://www.sitepoint.com/non-blocking-async-defer/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Load Non-blocking JavaScript with HTML5 Async and Defer"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Domenico De Felice, "),a("a",{attrs:{href:"https://domenicodefelice.blogspot.sg/2015/08/how-browsers-work.html?t=2",target:"_blank",rel:"noopener noreferrer"}},[e._v("How browsers work"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);