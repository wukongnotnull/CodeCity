(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{665:function(e,a,t){"use strict";t.r(a);var r=t(25),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器模型-三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模型-三"}},[e._v("#")]),e._v(" 浏览器模型（三）")]),e._v(" "),t("h2",{attrs:{id:"cors-通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cors-通信"}},[e._v("#")]),e._v(" CORS 通信")]),e._v(" "),t("p",[e._v("CORS 是一个 W3C 标准，全称是“跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨域的服务器，发出"),t("code",[e._v("XMLHttpRequest")]),e._v("请求，从而克服了 AJAX 只能同源使用的限制。")]),e._v(" "),t("h3",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能。")]),e._v(" "),t("p",[e._v("整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与普通的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨域，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感知。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨域通信。")]),e._v(" "),t("h3",{attrs:{id:"两种请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两种请求"}},[e._v("#")]),e._v(" 两种请求")]),e._v(" "),t("p",[e._v("CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。")]),e._v(" "),t("p",[e._v("只要同时满足以下两大条件，就属于简单请求。")]),e._v(" "),t("p",[e._v("（1）请求方法是以下三种方法之一。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("HEAD")]),e._v(" "),t("li",[e._v("GET")]),e._v(" "),t("li",[e._v("POST")])])]),e._v(" "),t("p",[e._v("（2）HTTP 的头信息不超出以下几种字段。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[e._v("Accept")]),e._v(" "),t("li",[e._v("Accept-Language")]),e._v(" "),t("li",[e._v("Content-Language")]),e._v(" "),t("li",[e._v("Last-Event-ID")]),e._v(" "),t("li",[e._v("Content-Type：只限于三个值"),t("code",[e._v("application/x-www-form-urlencoded")]),e._v("、"),t("code",[e._v("multipart/form-data")]),e._v("、"),t("code",[e._v("text/plain")])])])]),e._v(" "),t("p",[e._v("凡是不同时满足上面两个条件，就属于非简单请求。一句话，简单请求就是简单的 HTTP 方法与简单的 HTTP 头信息的结合。")]),e._v(" "),t("p",[e._v("这样划分的原因是，表单在历史上一直可以跨域发出请求。简单请求就是表单请求，浏览器沿袭了传统的处理方式，不把行为复杂化，否则开发者可能转而使用表单，规避 CORS 的限制。对于非简单请求，浏览器会采用新的处理方式。")]),e._v(" "),t("h3",{attrs:{id:"简单请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[e._v("#")]),e._v(" 简单请求")]),e._v(" "),t("h4",{attrs:{id:"基本流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本流程"}},[e._v("#")]),e._v(" 基本流程")]),e._v(" "),t("p",[e._v("对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个"),t("code",[e._v("Origin")]),e._v("字段。")]),e._v(" "),t("p",[e._v("下面是一个例子，浏览器发现这次跨域 AJAX 请求是简单请求，就自动在头信息之中，添加一个"),t("code",[e._v("Origin")]),e._v("字段。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),t("p",[e._v("上面的头信息中，"),t("code",[e._v("Origin")]),e._v("字段用来说明，本次请求来自哪个域（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("Origin")]),e._v("指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v("字段（详见下文），就知道出错了，从而抛出一个错误，被"),t("code",[e._v("XMLHttpRequest")]),e._v("的"),t("code",[e._v("onerror")]),e._v("回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是200。")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("Origin")]),e._v("指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n")])])]),t("p",[e._v("上面的头信息之中，有三个与 CORS 请求相关的字段，都以"),t("code",[e._v("Access-Control-")]),e._v("开头。")]),e._v(" "),t("p",[t("strong",[e._v("（1）"),t("code",[e._v("Access-Control-Allow-Origin")])])]),e._v(" "),t("p",[e._v("该字段是必须的。它的值要么是请求时"),t("code",[e._v("Origin")]),e._v("字段的值，要么是一个"),t("code",[e._v("*")]),e._v("，表示接受任意域名的请求。")]),e._v(" "),t("p",[t("strong",[e._v("（2）"),t("code",[e._v("Access-Control-Allow-Credentials")])])]),e._v(" "),t("p",[e._v("该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为"),t("code",[e._v("true")]),e._v("，即表示服务器明确许可，浏览器可以把 Cookie 包含在请求中，一起发给服务器。这个值也只能设为"),t("code",[e._v("true")]),e._v("，如果服务器不要浏览器发送 Cookie，不发送该字段即可。")]),e._v(" "),t("p",[t("strong",[e._v("（3）"),t("code",[e._v("Access-Control-Expose-Headers")])])]),e._v(" "),t("p",[e._v("该字段可选。CORS 请求时，"),t("code",[e._v("XMLHttpRequest")]),e._v("对象的"),t("code",[e._v("getResponseHeader()")]),e._v("方法只能拿到6个服务器返回的基本字段："),t("code",[e._v("Cache-Control")]),e._v("、"),t("code",[e._v("Content-Language")]),e._v("、"),t("code",[e._v("Content-Type")]),e._v("、"),t("code",[e._v("Expires")]),e._v("、"),t("code",[e._v("Last-Modified")]),e._v("、"),t("code",[e._v("Pragma")]),e._v("。如果想拿到其他字段，就必须在"),t("code",[e._v("Access-Control-Expose-Headers")]),e._v("里面指定。上面的例子指定，"),t("code",[e._v("getResponseHeader('FooBar')")]),e._v("可以返回"),t("code",[e._v("FooBar")]),e._v("字段的值。")]),e._v(" "),t("h4",{attrs:{id:"withcredentials-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#withcredentials-属性"}},[e._v("#")]),e._v(" withCredentials 属性")]),e._v(" "),t("p",[e._v("上面说到，CORS 请求默认不包含 Cookie 信息（以及 HTTP 认证信息等），这是为了降低 CSRF 攻击的风险。但是某些场合，服务器可能需要拿到 Cookie，这时需要服务器显式指定"),t("code",[e._v("Access-Control-Allow-Credentials")]),e._v("字段，告诉浏览器可以发送 Cookie。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Access-Control-Allow-Credentials: true\n")])])]),t("p",[e._v("同时，开发者必须在 AJAX 请求中打开"),t("code",[e._v("withCredentials")]),e._v("属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n")])])]),t("p",[e._v("否则，即使服务器要求发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。")]),e._v(" "),t("p",[e._v("但是，有的浏览器默认将"),t("code",[e._v("withCredentials")]),e._v("属性设为"),t("code",[e._v("true")]),e._v("。这导致如果省略"),t("code",[e._v("withCredentials")]),e._v("设置，这些浏览器可能还是会一起发送 Cookie。这时，可以显式关闭"),t("code",[e._v("withCredentials")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("xhr.withCredentials = false;\n")])])]),t("p",[e._v("需要注意的是，如果服务器要求浏览器发送 Cookie，"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v("就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨域）原网页代码中的"),t("code",[e._v("document.cookie")]),e._v("也无法读取服务器域名下的 Cookie。")]),e._v(" "),t("h3",{attrs:{id:"非简单请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[e._v("#")]),e._v(" 非简单请求")]),e._v(" "),t("h4",{attrs:{id:"预检请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预检请求"}},[e._v("#")]),e._v(" 预检请求")]),e._v(" "),t("p",[e._v("非简单请求是那种对服务器提出特殊要求的请求，比如请求方法是"),t("code",[e._v("PUT")]),e._v("或"),t("code",[e._v("DELETE")]),e._v("，或者"),t("code",[e._v("Content-Type")]),e._v("字段的类型是"),t("code",[e._v("application/json")]),e._v("。")]),e._v(" "),t("p",[e._v("非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为“预检”请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的"),t("code",[e._v("XMLHttpRequest")]),e._v("请求，否则就报错。这是为了防止这些新增的请求，对传统的没有 CORS 支持的服务器形成压力，给服务器一个提前拒绝的机会，这样可以防止服务器收到大量"),t("code",[e._v("DELETE")]),e._v("和"),t("code",[e._v("PUT")]),e._v("请求，这些传统的表单不可能跨域发出的请求。")]),e._v(" "),t("p",[e._v("下面是一段浏览器的 JavaScript 脚本。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var url = 'http://api.alice.com/cors';\nvar xhr = new XMLHttpRequest();\nxhr.open('PUT', url, true);\nxhr.setRequestHeader('X-Custom-Header', 'value');\nxhr.send();\n")])])]),t("p",[e._v("上面代码中，HTTP 请求的方法是"),t("code",[e._v("PUT")]),e._v("，并且发送一个自定义头信息"),t("code",[e._v("X-Custom-Header")]),e._v("。")]),e._v(" "),t("p",[e._v("浏览器发现，这是一个非简单请求，就自动发出一个“预检”请求，要求服务器确认可以这样请求。下面是这个“预检”请求的 HTTP 头信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("OPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),t("p",[e._v("“预检”请求用的请求方法是"),t("code",[e._v("OPTIONS")]),e._v("，表示这个请求是用来询问的。头信息里面，关键字段是"),t("code",[e._v("Origin")]),e._v("，表示请求来自哪个源。")]),e._v(" "),t("p",[e._v("除了"),t("code",[e._v("Origin")]),e._v("字段，“预检”请求的头信息包括两个特殊字段。")]),e._v(" "),t("p",[t("strong",[e._v("（1）"),t("code",[e._v("Access-Control-Request-Method")])])]),e._v(" "),t("p",[e._v("该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是"),t("code",[e._v("PUT")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("（2）"),t("code",[e._v("Access-Control-Request-Headers")])])]),e._v(" "),t("p",[e._v("该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是"),t("code",[e._v("X-Custom-Header")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"预检请求的回应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预检请求的回应"}},[e._v("#")]),e._v(" 预检请求的回应")]),e._v(" "),t("p",[e._v("服务器收到“预检”请求以后，检查了"),t("code",[e._v("Origin")]),e._v("、"),t("code",[e._v("Access-Control-Request-Method")]),e._v("和"),t("code",[e._v("Access-Control-Request-Headers")]),e._v("字段以后，确认允许跨源请求，就可以做出回应。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("HTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n")])])]),t("p",[e._v("上面的 HTTP 回应中，关键的是"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v("字段，表示"),t("code",[e._v("http://api.bob.com")]),e._v("可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Access-Control-Allow-Origin: *\n")])])]),t("p",[e._v("如果服务器否定了“预检”请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段，或者明确表示请求不符合条件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("OPTIONS http://api.bob.com HTTP/1.1\nStatus: 200\nAccess-Control-Allow-Origin: https://notyourdomain.com\nAccess-Control-Allow-Method: POST\n")])])]),t("p",[e._v("上面的服务器回应，"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v("字段明确不包括发出请求的"),t("code",[e._v("http://api.bob.com")]),e._v("。")]),e._v(" "),t("p",[e._v("这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被"),t("code",[e._v("XMLHttpRequest")]),e._v("对象的"),t("code",[e._v("onerror")]),e._v("回调函数捕获。控制台会打印出如下的报错信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("XMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n")])])]),t("p",[e._v("服务器回应的其他 CORS 相关字段如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Access-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000\n")])])]),t("p",[t("strong",[e._v("（1）"),t("code",[e._v("Access-Control-Allow-Methods")])])]),e._v(" "),t("p",[e._v("该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次“预检”请求。")]),e._v(" "),t("p",[t("strong",[e._v("（2）"),t("code",[e._v("Access-Control-Allow-Headers")])])]),e._v(" "),t("p",[e._v("如果浏览器请求包括"),t("code",[e._v("Access-Control-Request-Headers")]),e._v("字段，则"),t("code",[e._v("Access-Control-Allow-Headers")]),e._v("字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在“预检”中请求的字段。")]),e._v(" "),t("p",[t("strong",[e._v("（3）"),t("code",[e._v("Access-Control-Allow-Credentials")])])]),e._v(" "),t("p",[e._v("该字段与简单请求时的含义相同。")]),e._v(" "),t("p",[t("strong",[e._v("（4）"),t("code",[e._v("Access-Control-Max-Age")])])]),e._v(" "),t("p",[e._v("该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。")]),e._v(" "),t("h3",{attrs:{id:"浏览器的正常请求和回应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的正常请求和回应"}},[e._v("#")]),e._v(" 浏览器的正常请求和回应")]),e._v(" "),t("p",[e._v("一旦服务器通过了“预检”请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个"),t("code",[e._v("Origin")]),e._v("头信息字段。服务器的回应，也都会有一个"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v("头信息字段。")]),e._v(" "),t("p",[e._v("下面是“预检”请求之后，浏览器的正常 CORS 请求。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])])]),t("p",[e._v("上面头信息的"),t("code",[e._v("Origin")]),e._v("字段是浏览器自动添加的。")]),e._v(" "),t("p",[e._v("下面是服务器正常的回应。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Access-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8\n")])])]),t("p",[e._v("上面头信息中，"),t("code",[e._v("Access-Control-Allow-Origin")]),e._v("字段是每次回应都必定包含的。")]),e._v(" "),t("h3",{attrs:{id:"与-jsonp-的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与-jsonp-的比较"}},[e._v("#")]),e._v(" 与 JSONP 的比较")]),e._v(" "),t("p",[e._v("CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。JSONP 只支持"),t("code",[e._v("GET")]),e._v("请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。")]),e._v(" "),t("h3",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/cors/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using CORS"),t("OutboundLink")],1),e._v(", Monsur Hossain")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP access control (CORS)"),t("OutboundLink")],1),e._v(", MDN")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://frontendian.co/cors",target:"_blank",rel:"noopener noreferrer"}},[e._v("CORS"),t("OutboundLink")],1),e._v(", Ryan Miller")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://performantcode.com/web/do-you-really-know-cors",target:"_blank",rel:"noopener noreferrer"}},[e._v("Do You Really Know CORS?"),t("OutboundLink")],1),e._v(", Grzegorz Mirek")])]),e._v(" "),t("h2",{attrs:{id:"storage-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-接口"}},[e._v("#")]),e._v(" Storage 接口")]),e._v(" "),t("h3",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("Storage 接口用于脚本在浏览器保存数据。两个对象部署了这个接口："),t("code",[e._v("window.sessionStorage")]),e._v("和"),t("code",[e._v("window.localStorage")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("sessionStorage")]),e._v("保存的数据用于浏览器的一次会话（session），当会话结束（通常是窗口关闭），数据被清空；"),t("code",[e._v("localStorage")]),e._v("保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。除了保存期限的长短不同，这两个对象的其他方面都一致。")]),e._v(" "),t("p",[e._v("保存的数据都以“键值对”的形式存在。也就是说，每一项数据都有一个键名和对应的值。所有的数据都是以文本格式保存。")]),e._v(" "),t("p",[e._v("这个接口很像 Cookie 的强化版，能够使用大得多的存储空间。目前，每个域名的存储上限视浏览器而定，Chrome 是 2.5MB，Firefox 和 Opera 是 5MB，IE 是 10MB。其中，Firefox 的存储空间由一级域名决定，而其他浏览器没有这个限制。也就是说，Firefox 中，"),t("code",[e._v("a.example.com")]),e._v("和"),t("code",[e._v("b.example.com")]),e._v("共享 5MB 的存储空间。另外，与 Cookie 一样，它们也受同域限制。某个网页存入的数据，只有同域下的网页才能读取，如果跨域操作会报错。")]),e._v(" "),t("h3",{attrs:{id:"属性和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法"}},[e._v("#")]),e._v(" 属性和方法")]),e._v(" "),t("p",[e._v("Storage 接口只有一个属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Storage.length")]),e._v("：返回保存的数据项个数。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.localStorage.setItem('foo', 'a');\nwindow.localStorage.setItem('bar', 'b');\nwindow.localStorage.setItem('baz', 'c');\n\nwindow.localStorage.length // 3\n")])])]),t("p",[e._v("该接口提供5个方法。")]),e._v(" "),t("h4",{attrs:{id:"storage-setitem"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-setitem"}},[e._v("#")]),e._v(" Storage.setItem()")]),e._v(" "),t("p",[t("code",[e._v("Storage.setItem()")]),e._v("方法用于存入数据。它接受两个参数，第一个是键名，第二个是保存的数据。如果键名已经存在，该方法会更新已有的键值。该方法没有返回值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.sessionStorage.setItem('key', 'value');\nwindow.localStorage.setItem('key', 'value');\n")])])]),t("p",[e._v("注意，"),t("code",[e._v("Storage.setItem()")]),e._v("两个参数都是字符串。如果不是字符串，会自动转成字符串，再存入浏览器。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.sessionStorage.setItem(3, { foo: 1 });\nwindow.sessionStorage.getItem('3') // \"[object Object]\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("setItem")]),e._v("方法的两个参数都不是字符串，但是存入的值都是字符串。")]),e._v(" "),t("p",[e._v("如果储存空间已满，该方法会抛错。")]),e._v(" "),t("p",[e._v("写入不一定要用这个方法，直接赋值也是可以的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 下面三种写法等价\nwindow.localStorage.foo = '123';\nwindow.localStorage['foo'] = '123';\nwindow.localStorage.setItem('foo', '123');\n")])])]),t("h4",{attrs:{id:"storage-getitem"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-getitem"}},[e._v("#")]),e._v(" Storage.getItem()")]),e._v(" "),t("p",[t("code",[e._v("Storage.getItem()")]),e._v("方法用于读取数据。它只有一个参数，就是键名。如果键名不存在，该方法返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.sessionStorage.getItem('key')\nwindow.localStorage.getItem('key')\n")])])]),t("p",[e._v("键名应该是一个字符串，否则会被自动转为字符串。")]),e._v(" "),t("h4",{attrs:{id:"storage-removeitem"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-removeitem"}},[e._v("#")]),e._v(" Storage.removeItem()")]),e._v(" "),t("p",[t("code",[e._v("Storage.removeItem()")]),e._v("方法用于清除某个键名对应的键值。它接受键名作为参数，如果键名不存在，该方法不会做任何事情。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sessionStorage.removeItem('key');\nlocalStorage.removeItem('key');\n")])])]),t("h4",{attrs:{id:"storage-clear"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-clear"}},[e._v("#")]),e._v(" Storage.clear()")]),e._v(" "),t("p",[t("code",[e._v("Storage.clear()")]),e._v("方法用于清除所有保存的数据。该方法的返回值是"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.sessionStorage.clear()\nwindow.localStorage.clear()\n")])])]),t("h4",{attrs:{id:"storage-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-key"}},[e._v("#")]),e._v(" Storage.key()")]),e._v(" "),t("p",[t("code",[e._v("Storage.key()")]),e._v("方法接受一个整数作为参数（从零开始），返回该位置对应的键名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.sessionStorage.setItem('key', 'value');\nwindow.sessionStorage.key(0) // \"key\"\n")])])]),t("p",[e._v("结合使用"),t("code",[e._v("Storage.length")]),e._v("属性和"),t("code",[e._v("Storage.key()")]),e._v("方法，可以遍历所有的键。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for (var i = 0; i < window.localStorage.length; i++) {\n  console.log(localStorage.key(i));\n}\n")])])]),t("h3",{attrs:{id:"storage-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage-事件"}},[e._v("#")]),e._v(" storage 事件")]),e._v(" "),t("p",[e._v("Storage 接口储存的数据发生变化时，会触发 storage 事件，可以指定这个事件的监听函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.addEventListener('storage', onStorageChange);\n")])])]),t("p",[e._v("监听函数接受一个"),t("code",[e._v("event")]),e._v("实例对象作为参数。这个实例对象继承了 StorageEvent 接口，有几个特有的属性，都是只读属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("StorageEvent.key")]),e._v("：字符串，表示发生变动的键名。如果 storage 事件是由"),t("code",[e._v("clear()")]),e._v("方法引起，该属性返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("StorageEvent.newValue")]),e._v("：字符串，表示新的键值。如果 storage 事件是由"),t("code",[e._v("clear()")]),e._v("方法或删除该键值对引发的，该属性返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("StorageEvent.oldValue")]),e._v("：字符串，表示旧的键值。如果该键值对是新增的，该属性返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("StorageEvent.storageArea")]),e._v("：对象，返回键值对所在的整个对象。也说是说，可以从这个属性上面拿到当前域名储存的所有键值对。")]),e._v(" "),t("li",[t("code",[e._v("StorageEvent.url")]),e._v("：字符串，表示原始触发 storage 事件的那个网页的网址。")])]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("StorageEvent.key")]),e._v("属性的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function onStorageChange(e) {\n  console.log(e.key);\n}\n\nwindow.addEventListener('storage', onStorageChange);\n")])])]),t("p",[e._v("注意，该事件有一个很特别的地方，就是它不在导致数据变化的当前页面触发，而是在同一个域名的其他窗口触发。也就是说，如果浏览器只打开一个窗口，可能观察不到这个事件。比如同时打开多个窗口，当其中的一个窗口导致储存的数据发生改变时，只有在其他窗口才能观察到监听函数的执行。可以通过这种机制，实现多个窗口之间的通信。")]),e._v(" "),t("h3",{attrs:{id:"参考链接-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-2"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Ryan Stewart，"),t("a",{attrs:{href:"https://www.adobe.com/devnet/html5/articles/html5-storage-apis.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introducing the HTML5 storage APIs"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://codular.com/localstorage",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting Started with LocalStorage"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Feross Aboukhadijeh, "),t("a",{attrs:{href:"https://feross.org/fill-disk/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introducing the HTML5 Hard Disk Filler™ API"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Ben Summers, "),t("a",{attrs:{href:"http://bens.me.uk/2013/localstorage-inter-window-messaging",target:"_blank",rel:"noopener noreferrer"}},[e._v("Inter-window messaging using localStorage"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Stack Overflow, "),t("a",{attrs:{href:"https://stackoverflow.com/questions/18265556/why-does-internet-explorer-fire-the-window-storage-event-on-the-window-that-st",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why does Internet Explorer fire the window “storage” event on the window that stored the data?"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Stack Overflow, "),t("a",{attrs:{href:"https://stackoverflow.com/questions/5370784/localstorage-eventlistener-is-not-called",target:"_blank",rel:"noopener noreferrer"}},[e._v("localStorage eventListener is not called"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"history-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history-对象"}},[e._v("#")]),e._v(" History 对象")]),e._v(" "),t("h3",{attrs:{id:"概述-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[t("code",[e._v("window.history")]),e._v("属性指向 History 对象，它表示当前窗口的浏览历史。")]),e._v(" "),t("p",[e._v("History 对象保存了当前窗口访问过的所有页面网址。下面代码表示当前窗口一共访问过3个网址。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.history.length // 3\n")])])]),t("p",[e._v("由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 后退到前一个网址\nhistory.back()\n\n// 等同于\nhistory.go(-1)\n")])])]),t("p",[e._v("浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。")]),e._v(" "),t("h3",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("p",[e._v("History 对象主要有两个属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("History.length")]),e._v("：当前窗口访问过的网址数量（包括当前网页）")]),e._v(" "),t("li",[t("code",[e._v("History.state")]),e._v("：History 堆栈最上层的状态值（详见下文）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 当前窗口访问过多少个网页\nwindow.history.length // 1\n\n// History 对象的当前状态\n// 通常是 undefined，即未设置\nwindow.history.state // undefined\n")])])]),t("h3",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("h4",{attrs:{id:"history-back-、history-forward-、history-go"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history-back-、history-forward-、history-go"}},[e._v("#")]),e._v(" History.back()、History.forward()、History.go()")]),e._v(" "),t("p",[e._v("这三个方法用于在历史之中移动。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("History.back()")]),e._v("：移动到上一个网址，等同于点击浏览器的后退键。对于第一个访问的网址，该方法无效果。")]),e._v(" "),t("li",[t("code",[e._v("History.forward()")]),e._v("：移动到下一个网址，等同于点击浏览器的前进键。对于最后一个访问的网址，该方法无效果。")]),e._v(" "),t("li",[t("code",[e._v("History.go()")]),e._v("：接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址，比如"),t("code",[e._v("go(1)")]),e._v("相当于"),t("code",[e._v("forward()")]),e._v("，"),t("code",[e._v("go(-1)")]),e._v("相当于"),t("code",[e._v("back()")]),e._v("。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为"),t("code",[e._v("0")]),e._v("，相当于刷新当前页面。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("history.back();\nhistory.forward();\nhistory.go(-2);\n")])])]),t("p",[t("code",[e._v("history.go(0)")]),e._v("相当于刷新当前页面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("history.go(0); // 刷新当前页面\n")])])]),t("p",[e._v("注意，移动到以前访问过的页面时，页面通常是从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。")]),e._v(" "),t("h4",{attrs:{id:"history-pushstate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history-pushstate"}},[e._v("#")]),e._v(" History.pushState()")]),e._v(" "),t("p",[t("code",[e._v("History.pushState()")]),e._v("方法用于在历史中添加一条记录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.history.pushState(state, title, url)\n")])])]),t("p",[e._v("该方法接受三个参数，依次为：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("state")]),e._v("：一个与添加的记录相关联的状态对象，主要用于"),t("code",[e._v("popstate")]),e._v("事件。该事件触发时，该对象会传入回调函数。也就是说，浏览器会将这个对象序列化以后保留在本地，重新载入这个页面的时候，可以拿到这个对象。如果不需要这个对象，此处可以填"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("title")]),e._v("：新页面的标题。但是，现在所有浏览器都忽视这个参数，所以这里可以填空字符串。")]),e._v(" "),t("li",[t("code",[e._v("url")]),e._v("：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。")])]),e._v(" "),t("p",[e._v("假定当前网址是"),t("code",[e._v("example.com/1.html")]),e._v("，使用"),t("code",[e._v("pushState()")]),e._v("方法在浏览记录（History 对象）中添加一个新记录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var stateObj = { foo: 'bar' };\nhistory.pushState(stateObj, 'page 2', '2.html');\n")])])]),t("p",[e._v("添加新记录后，浏览器地址栏立刻显示"),t("code",[e._v("example.com/2.html")]),e._v("，但并不会跳转到"),t("code",[e._v("2.html")]),e._v("，甚至也不会检查"),t("code",[e._v("2.html")]),e._v("是否存在，它只是成为浏览历史中的最新记录。这时，在地址栏输入一个新的地址(比如访问"),t("code",[e._v("google.com")]),e._v(")，然后点击了倒退按钮，页面的 URL 将显示"),t("code",[e._v("2.html")]),e._v("；你再点击一次倒退按钮，URL 将显示"),t("code",[e._v("1.html")]),e._v("。")]),e._v(" "),t("p",[e._v("总之，"),t("code",[e._v("pushState()")]),e._v("方法不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。")]),e._v(" "),t("p",[e._v("使用该方法之后，就可以用"),t("code",[e._v("History.state")]),e._v("属性读出状态对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var stateObj = { foo: 'bar' };\nhistory.pushState(stateObj, 'page 2', '2.html');\nhistory.state // {foo: \"bar\"}\n")])])]),t("p",[e._v("如果"),t("code",[e._v("pushState")]),e._v("的 URL 参数设置了一个新的锚点值（即"),t("code",[e._v("hash")]),e._v("），并不会触发"),t("code",[e._v("hashchange")]),e._v("事件。反过来，如果 URL 的锚点值变了，则会在 History 对象创建一条浏览记录。")]),e._v(" "),t("p",[e._v("如果"),t("code",[e._v("pushState()")]),e._v("方法设置了一个跨域网址，则会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 报错\n// 当前网址为 http://example.com\nhistory.pushState(null, '', 'https://twitter.com/hello');\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("pushState")]),e._v("想要插入一个跨域的网址，导致报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上，因为这个方法不会导致页面跳转。")]),e._v(" "),t("h4",{attrs:{id:"history-replacestate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history-replacestate"}},[e._v("#")]),e._v(" History.replaceState()")]),e._v(" "),t("p",[t("code",[e._v("History.replaceState()")]),e._v("方法用来修改 History 对象的当前记录，其他都与"),t("code",[e._v("pushState()")]),e._v("方法一模一样。")]),e._v(" "),t("p",[e._v("假定当前网页是"),t("code",[e._v("example.com/example.html")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("history.pushState({page: 1}, 'title 1', '?page=1')\n// URL 显示为 http://example.com/example.html?page=1\n\nhistory.pushState({page: 2}, 'title 2', '?page=2');\n// URL 显示为 http://example.com/example.html?page=2\n\nhistory.replaceState({page: 3}, 'title 3', '?page=3');\n// URL 显示为 http://example.com/example.html?page=3\n\nhistory.back()\n// URL 显示为 http://example.com/example.html?page=1\n\nhistory.back()\n// URL 显示为 http://example.com/example.html\n\nhistory.go(2)\n// URL 显示为 http://example.com/example.html?page=3\n")])])]),t("h3",{attrs:{id:"popstate-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#popstate-事件"}},[e._v("#")]),e._v(" popstate 事件")]),e._v(" "),t("p",[e._v("每当同一个文档的浏览历史（即"),t("code",[e._v("history")]),e._v("对象）出现变化时，就会触发"),t("code",[e._v("popstate")]),e._v("事件。")]),e._v(" "),t("p",[e._v("注意，仅仅调用"),t("code",[e._v("pushState()")]),e._v("方法或"),t("code",[e._v("replaceState()")]),e._v("方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用"),t("code",[e._v("History.back()")]),e._v("、"),t("code",[e._v("History.forward()")]),e._v("、"),t("code",[e._v("History.go()")]),e._v("方法时才会触发。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。")]),e._v(" "),t("p",[e._v("使用的时候，可以为"),t("code",[e._v("popstate")]),e._v("事件指定回调函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.onpopstate = function (event) {\n  console.log('location: ' + document.location);\n  console.log('state: ' + JSON.stringify(event.state));\n};\n\n// 或者\nwindow.addEventListener('popstate', function(event) {\n  console.log('location: ' + document.location);\n  console.log('state: ' + JSON.stringify(event.state));\n});\n")])])]),t("p",[e._v("回调函数的参数是一个"),t("code",[e._v("event")]),e._v("事件对象，它的"),t("code",[e._v("state")]),e._v("属性指向"),t("code",[e._v("pushState")]),e._v("和"),t("code",[e._v("replaceState")]),e._v("方法为当前 URL 所提供的状态对象（即这两个方法的第一个参数）。上面代码中的"),t("code",[e._v("event.state")]),e._v("，就是通过"),t("code",[e._v("pushState")]),e._v("和"),t("code",[e._v("replaceState")]),e._v("方法，为当前 URL 绑定的"),t("code",[e._v("state")]),e._v("对象。")]),e._v(" "),t("p",[e._v("这个"),t("code",[e._v("state")]),e._v("对象也可以直接通过"),t("code",[e._v("history")]),e._v("对象读取。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var currentState = history.state;\n")])])]),t("p",[e._v("注意，页面第一次加载的时候，浏览器不会触发"),t("code",[e._v("popstate")]),e._v("事件。")]),e._v(" "),t("h2",{attrs:{id:"location-对象-url-对象-urlsearchparams对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#location-对象-url-对象-urlsearchparams对象"}},[e._v("#")]),e._v(" Location 对象，URL 对象，URLSearchParams对象")]),e._v(" "),t("p",[e._v("URL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管理 URL。")]),e._v(" "),t("h5",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),t("h3",{attrs:{id:"location-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#location-对象"}},[e._v("#")]),e._v(" Location 对象")]),e._v(" "),t("p",[t("code",[e._v("Location")]),e._v("对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过"),t("code",[e._v("window.location")]),e._v("和"),t("code",[e._v("document.location")]),e._v("属性，可以拿到这个对象。")]),e._v(" "),t("h4",{attrs:{id:"属性-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("p",[t("code",[e._v("Location")]),e._v("对象提供以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Location.href")]),e._v("：整个 URL。")]),e._v(" "),t("li",[t("code",[e._v("Location.protocol")]),e._v("：当前 URL 的协议，包括冒号（"),t("code",[e._v(":")]),e._v("）。")]),e._v(" "),t("li",[t("code",[e._v("Location.host")]),e._v("：主机。如果端口不是协议默认的"),t("code",[e._v("80")]),e._v("和"),t("code",[e._v("433")]),e._v("，则还会包括冒号（"),t("code",[e._v(":")]),e._v("）和端口。")]),e._v(" "),t("li",[t("code",[e._v("Location.hostname")]),e._v("：主机名，不包括端口。")]),e._v(" "),t("li",[t("code",[e._v("Location.port")]),e._v("：端口号。")]),e._v(" "),t("li",[t("code",[e._v("Location.pathname")]),e._v("：URL 的路径部分，从根路径"),t("code",[e._v("/")]),e._v("开始。")]),e._v(" "),t("li",[t("code",[e._v("Location.search")]),e._v("：查询字符串部分，从问号"),t("code",[e._v("?")]),e._v("开始。")]),e._v(" "),t("li",[t("code",[e._v("Location.hash")]),e._v("：片段字符串部分，从"),t("code",[e._v("#")]),e._v("开始。")]),e._v(" "),t("li",[t("code",[e._v("Location.username")]),e._v("：域名前面的用户名。")]),e._v(" "),t("li",[t("code",[e._v("Location.password")]),e._v("：域名前面的密码。")]),e._v(" "),t("li",[t("code",[e._v("Location.origin")]),e._v("：URL 的协议、主机名和端口。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 当前网址为\n// http://user:passwd@www.example.com:4097/path/a.html?x=111#part1\ndocument.location.href\n// "http://user:passwd@www.example.com:4097/path/a.html?x=111#part1"\ndocument.location.protocol\n// "http:"\ndocument.location.host\n// "www.example.com:4097"\ndocument.location.hostname\n// "www.example.com"\ndocument.location.port\n// "4097"\ndocument.location.pathname\n// "/path/a.html"\ndocument.location.search\n// "?x=111"\ndocument.location.hash\n// "#part1"\ndocument.location.username\n// "user"\ndocument.location.password\n// "passwd"\ndocument.location.origin\n// "http://user:passwd@www.example.com:4097"\n')])])]),t("p",[e._v("这些属性里面，只有"),t("code",[e._v("origin")]),e._v("属性是只读的，其他属性都可写。")]),e._v(" "),t("p",[e._v("注意，如果对"),t("code",[e._v("Location.href")]),e._v("写入新的 URL 地址，浏览器会立刻跳转到这个新地址。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 跳转到新网址\ndocument.location.href = 'http://www.example.com';\n")])])]),t("p",[e._v("这个特性常常用于让网页自动滚动到新的锚点。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.location.href = '#top';\n// 等同于\ndocument.location.hash = '#top';\n")])])]),t("p",[e._v("直接改写"),t("code",[e._v("location")]),e._v("，相当于写入"),t("code",[e._v("href")]),e._v("属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.location = 'http://www.example.com';\n// 等同于\ndocument.location.href = 'http://www.example.com';\n")])])]),t("p",[e._v("另外，"),t("code",[e._v("Location.href")]),e._v("属性是浏览器唯一允许跨域写入的属性，即非同源的窗口可以改写另一个窗口（比如子窗口与父窗口）的"),t("code",[e._v("Location.href")]),e._v("属性，导致后者的网址跳转。"),t("code",[e._v("Location")]),e._v("的其他属性都不允许跨域写入。")]),e._v(" "),t("h4",{attrs:{id:"方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("p",[t("strong",[e._v("（1）Location.assign()")])]),e._v(" "),t("p",[t("code",[e._v("assign")]),e._v("方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 跳转到新的网址\ndocument.location.assign('http://www.example.com')\n")])])]),t("p",[t("strong",[e._v("（2）Location.replace()")])]),e._v(" "),t("p",[t("code",[e._v("replace")]),e._v("方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。")]),e._v(" "),t("p",[e._v("它与"),t("code",[e._v("assign")]),e._v("方法的差异在于，"),t("code",[e._v("replace")]),e._v("会在浏览器的浏览历史"),t("code",[e._v("History")]),e._v("里面删除当前网址，也就是说，一旦使用了该方法，后退按钮就无法回到当前网页了，相当于在浏览历史里面，使用新的 URL 替换了老的 URL。它的一个应用是，当脚本发现当前是移动设备时，就立刻跳转到移动版网页。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 跳转到新的网址\ndocument.location.replace('http://www.example.com')\n")])])]),t("p",[t("strong",[e._v("（3）Location.reload()")])]),e._v(" "),t("p",[t("code",[e._v("reload")]),e._v("方法使得浏览器重新加载当前网址，相当于按下浏览器的刷新按钮。")]),e._v(" "),t("p",[e._v("它接受一个布尔值作为参数。如果参数为"),t("code",[e._v("true")]),e._v("，浏览器将向服务器重新请求这个网页，并且重新加载后，网页将滚动到头部（即"),t("code",[e._v("scrollTop === 0")]),e._v("）。如果参数是"),t("code",[e._v("false")]),e._v("或为空，浏览器将从本地缓存重新加载该网页，并且重新加载后，网页的视口位置是重新加载前的位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 向服务器重新请求当前网址\nwindow.location.reload(true);\n")])])]),t("p",[t("strong",[e._v("（4）Location.toString()")])]),e._v(" "),t("p",[t("code",[e._v("toString")]),e._v("方法返回整个 URL 字符串，相当于读取"),t("code",[e._v("Location.href")]),e._v("属性。")]),e._v(" "),t("h3",{attrs:{id:"url-的编码和解码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url-的编码和解码"}},[e._v("#")]),e._v(" URL 的编码和解码")]),e._v(" "),t("p",[e._v("网页的 URL 只能包含合法的字符。合法字符分成两类。")]),e._v(" "),t("ul",[t("li",[e._v("URL 元字符：分号（"),t("code",[e._v(";")]),e._v("），逗号（"),t("code",[e._v(",")]),e._v("），斜杠（"),t("code",[e._v("/")]),e._v("），问号（"),t("code",[e._v("?")]),e._v("），冒号（"),t("code",[e._v(":")]),e._v("），at（"),t("code",[e._v("@")]),e._v("），"),t("code",[e._v("&")]),e._v("，等号（"),t("code",[e._v("=")]),e._v("），加号（"),t("code",[e._v("+")]),e._v("），美元符号（"),t("code",[e._v("$")]),e._v("），井号（"),t("code",[e._v("#")]),e._v("）")]),e._v(" "),t("li",[e._v("语义字符："),t("code",[e._v("a-z")]),e._v("，"),t("code",[e._v("A-Z")]),e._v("，"),t("code",[e._v("0-9")]),e._v("，连词号（"),t("code",[e._v("-")]),e._v("），下划线（"),t("code",[e._v("_")]),e._v("），点（"),t("code",[e._v(".")]),e._v("），感叹号（"),t("code",[e._v("!")]),e._v("），波浪线（"),t("code",[e._v("~")]),e._v("），星号（"),t("code",[e._v("*")]),e._v("），单引号（"),t("code",[e._v("'")]),e._v("），圆括号（"),t("code",[e._v("()")]),e._v("）")])]),e._v(" "),t("p",[e._v("除了以上字符，其他字符出现在 URL 之中都必须转义，规则是根据操作系统的默认编码，将每个字节转为百分号（"),t("code",[e._v("%")]),e._v("）加上两个大写的十六进制字母。")]),e._v(" "),t("p",[e._v("比如，UTF-8 的操作系统上，"),t("code",[e._v("http://www.example.com/q=春节")]),e._v("这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成"),t("code",[e._v("http://www.example.com/q=%E6%98%A5%E8%8A%82")]),e._v("。其中，“春”转成了"),t("code",[e._v("%E6%98%A5")]),e._v("，“节”转成了"),t("code",[e._v("%E8%8A%82")]),e._v("。这是因为“春”和“节”的 UTF-8 编码分别是"),t("code",[e._v("E6 98 A5")]),e._v("和"),t("code",[e._v("E8 8A 82")]),e._v("，将每个字节前面加上百分号，就构成了 URL 编码。")]),e._v(" "),t("p",[e._v("JavaScript 提供四个 URL 的编码/解码方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("encodeURI()")])]),e._v(" "),t("li",[t("code",[e._v("encodeURIComponent()")])]),e._v(" "),t("li",[t("code",[e._v("decodeURI()")])]),e._v(" "),t("li",[t("code",[e._v("decodeURIComponent()")])])]),e._v(" "),t("h4",{attrs:{id:"encodeuri"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodeuri"}},[e._v("#")]),e._v(" encodeURI()")]),e._v(" "),t("p",[t("code",[e._v("encodeURI()")]),e._v("方法用于转码整个 URL。它的参数是一个字符串，代表整个 URL。它会将元字符和语义字符之外的字符，都进行转义。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("encodeURI('http://www.example.com/q=春节')\n// \"http://www.example.com/q=%E6%98%A5%E8%8A%82\"\n")])])]),t("h4",{attrs:{id:"encodeuricomponent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#encodeuricomponent"}},[e._v("#")]),e._v(" encodeURIComponent()")]),e._v(" "),t("p",[t("code",[e._v("encodeURIComponent()")]),e._v("方法用于转码 URL 的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码。所以，它不能用于转码整个 URL。它接受一个参数，就是 URL 的片段。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("encodeURIComponent('春节')\n// \"%E6%98%A5%E8%8A%82\"\nencodeURIComponent('http://www.example.com/q=春节')\n// \"http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("encodeURIComponent()")]),e._v("会连 URL 元字符一起转义，所以如果转码整个 URL 就会出错。")]),e._v(" "),t("h4",{attrs:{id:"decodeuri"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decodeuri"}},[e._v("#")]),e._v(" decodeURI()")]),e._v(" "),t("p",[t("code",[e._v("decodeURI()")]),e._v("方法用于整个 URL 的解码。它是"),t("code",[e._v("encodeURI()")]),e._v("方法的逆运算。它接受一个参数，就是转码后的 URL。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("decodeURI('http://www.example.com/q=%E6%98%A5%E8%8A%82')\n// \"http://www.example.com/q=春节\"\n")])])]),t("h4",{attrs:{id:"decodeuricomponent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decodeuricomponent"}},[e._v("#")]),e._v(" decodeURIComponent()")]),e._v(" "),t("p",[t("code",[e._v("decodeURIComponent()")]),e._v("用于URL 片段的解码。它是"),t("code",[e._v("encodeURIComponent()")]),e._v("方法的逆运算。它接受一个参数，就是转码后的 URL 片段。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("decodeURIComponent('%E6%98%A5%E8%8A%82')\n// \"春节\"\n")])])]),t("h3",{attrs:{id:"url-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url-接口"}},[e._v("#")]),e._v(" URL 接口")]),e._v(" "),t("p",[e._v("浏览器原生提供"),t("code",[e._v("URL()")]),e._v("接口，它是一个构造函数，用来构造、解析和编码 URL。一般情况下，通过"),t("code",[e._v("window.URL")]),e._v("可以拿到这个构造函数。")]),e._v(" "),t("h4",{attrs:{id:"构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" 构造函数")]),e._v(" "),t("p",[t("code",[e._v("URL()")]),e._v("作为构造函数，可以生成 URL 实例。它接受一个表示 URL 的字符串作为参数。如果参数不是合法的 URL，会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var url = new URL('http://www.example.com/index.html');\nurl.href\n// \"http://www.example.com/index.html\"\n")])])]),t("p",[e._v("上面示例生成了一个 URL 实例，用来代表指定的网址。")]),e._v(" "),t("p",[e._v("除了字符串，"),t("code",[e._v("URL()")]),e._v("的参数也可以是另一个 URL 实例。这时，"),t("code",[e._v("URL()")]),e._v("会自动读取该实例的"),t("code",[e._v("href")]),e._v("属性，作为实际参数。")]),e._v(" "),t("p",[e._v("如果 URL 字符串是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var url1 = new URL('index.html', 'http://example.com');\nurl1.href\n// \"http://example.com/index.html\"\n\nvar url2 = new URL('page2.html', 'http://example.com/page1.html');\nurl2.href\n// \"http://example.com/page2.html\"\n\nvar url3 = new URL('..', 'http://example.com/a/b.html')\nurl3.href\n// \"http://example.com/\"\n")])])]),t("p",[e._v("上面代码中，返回的 URL 实例的路径都是在第二个参数的基础上，切换到第一个参数得到的。最后一个例子里面，第一个参数是"),t("code",[e._v("..")]),e._v("，表示上层路径。")]),e._v(" "),t("h4",{attrs:{id:"实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[e._v("#")]),e._v(" 实例属性")]),e._v(" "),t("p",[e._v("URL 实例的属性与"),t("code",[e._v("Location")]),e._v("对象的属性基本一致，返回当前 URL 的信息。")]),e._v(" "),t("ul",[t("li",[e._v("URL.href：返回整个 URL")]),e._v(" "),t("li",[e._v("URL.protocol：返回协议，以冒号"),t("code",[e._v(":")]),e._v("结尾")]),e._v(" "),t("li",[e._v("URL.hostname：返回域名")]),e._v(" "),t("li",[e._v("URL.host：返回域名与端口，包含"),t("code",[e._v(":")]),e._v("号，默认的80和443端口会省略")]),e._v(" "),t("li",[e._v("URL.port：返回端口")]),e._v(" "),t("li",[e._v("URL.origin：返回协议、域名和端口")]),e._v(" "),t("li",[e._v("URL.pathname：返回路径，以斜杠"),t("code",[e._v("/")]),e._v("开头")]),e._v(" "),t("li",[e._v("URL.search：返回查询字符串，以问号"),t("code",[e._v("?")]),e._v("开头")]),e._v(" "),t("li",[e._v("URL.searchParams：返回一个"),t("code",[e._v("URLSearchParams")]),e._v("实例，该属性是"),t("code",[e._v("Location")]),e._v("对象没有的")]),e._v(" "),t("li",[e._v("URL.hash：返回片段识别符，以井号"),t("code",[e._v("#")]),e._v("开头")]),e._v(" "),t("li",[e._v("URL.password：返回域名前面的密码")]),e._v(" "),t("li",[e._v("URL.username：返回域名前面的用户名")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var url = new URL(\'http://user:passwd@www.example.com:4097/path/a.html?x=111#part1\');\n\nurl.href\n// "http://user:passwd@www.example.com:4097/path/a.html?x=111#part1"\nurl.protocol\n// "http:"\nurl.hostname\n// "www.example.com"\nurl.host\n// "www.example.com:4097"\nurl.port\n// "4097"\nurl.origin\n// "http://www.example.com:4097"\nurl.pathname\n// "/path/a.html"\nurl.search\n// "?x=111"\nurl.searchParams\n// URLSearchParams {}\nurl.hash\n// "#part1"\nurl.password\n// "passwd"\nurl.username\n// "user"\n')])])]),t("p",[e._v("这些属性里面，只有"),t("code",[e._v("origin")]),e._v("属性是只读的，其他属性都可写，并且会立即生效。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var url = new URL('http://example.com/index.html#part1');\n\nurl.pathname = 'index2.html';\nurl.href // \"http://example.com/index2.html#part1\"\n\nurl.hash = '#part2';\nurl.href // \"http://example.com/index2.html#part2\"\n")])])]),t("p",[e._v("上面代码中，改变 URL 实例的"),t("code",[e._v("pathname")]),e._v("属性和"),t("code",[e._v("hash")]),e._v("属性，都会实时反映在 URL 实例当中。")]),e._v(" "),t("h4",{attrs:{id:"静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),t("p",[t("strong",[e._v("（1）URL.createObjectURL()")])]),e._v(" "),t("p",[t("code",[e._v("URL.createObjectURL()")]),e._v("方法用来为上传/下载的文件、流媒体文件生成一个 URL 字符串。这个字符串代表了"),t("code",[e._v("File")]),e._v("对象或"),t("code",[e._v("Blob")]),e._v("对象的 URL。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <div id="display"/>\n// <input\n//   type="file"\n//   id="fileElem"\n//   multiple\n//   accept="image/*"\n//   onchange="handleFiles(this.files)"\n//  >\nvar div = document.getElementById(\'display\');\n\nfunction handleFiles(files) {\n  for (var i = 0; i < files.length; i++) {\n    var img = document.createElement(\'img\');\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n  }\n}\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("URL.createObjectURL()")]),e._v("方法用来为上传的文件生成一个 URL 字符串，作为"),t("code",[e._v("<img>")]),e._v("元素的图片来源。")]),e._v(" "),t("p",[e._v("该方法生成的 URL 就像下面的样子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("blob:http://localhost/c745ef73-ece9-46da-8f66-ebes574789b1\n")])])]),t("p",[e._v("注意，每次使用"),t("code",[e._v("URL.createObjectURL()")]),e._v("方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的 URL 字符串，为了节省内存，可以使用"),t("code",[e._v("URL.revokeObjectURL()")]),e._v("方法释放这个实例。")]),e._v(" "),t("p",[t("strong",[e._v("（2）URL.revokeObjectURL()")])]),e._v(" "),t("p",[t("code",[e._v("URL.revokeObjectURL()")]),e._v("方法用来释放"),t("code",[e._v("URL.createObjectURL()")]),e._v("方法生成的 URL 实例。它的参数就是"),t("code",[e._v("URL.createObjectURL()")]),e._v("方法返回的 URL 字符串。")]),e._v(" "),t("p",[e._v("下面为上一段的示例加上"),t("code",[e._v("URL.revokeObjectURL()")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var div = document.getElementById('display');\n\nfunction handleFiles(files) {\n  for (var i = 0; i < files.length; i++) {\n    var img = document.createElement('img');\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n    img.onload = function() {\n      window.URL.revokeObjectURL(this.src);\n    }\n  }\n}\n")])])]),t("p",[e._v("上面代码中，一旦图片加载成功以后，为本地文件生成的 URL 字符串就没用了，于是可以在"),t("code",[e._v("img.onload")]),e._v("回调函数里面，通过"),t("code",[e._v("URL.revokeObjectURL()")]),e._v("方法卸载这个 URL 实例。")]),e._v(" "),t("h3",{attrs:{id:"urlsearchparams-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-对象"}},[e._v("#")]),e._v(" URLSearchParams 对象")]),e._v(" "),t("h4",{attrs:{id:"概述-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-3"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[t("code",[e._v("URLSearchParams")]),e._v("对象是浏览器的原生对象，用来构造、解析和处理 URL 的查询字符串（即 URL 问号后面的部分）。")]),e._v(" "),t("p",[e._v("它本身也是一个构造函数，可以生成实例。参数可以为查询字符串，起首的问号"),t("code",[e._v("?")]),e._v("有没有都行，也可以是对应查询字符串的数组或对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 方法一：传入字符串\nvar params = new URLSearchParams('?foo=1&bar=2');\n// 等同于\nvar params = new URLSearchParams(document.location.search);\n\n// 方法二：传入数组\nvar params = new URLSearchParams([['foo', 1], ['bar', 2]]);\n\n// 方法三：传入对象\nvar params = new URLSearchParams({'foo' : 1 , 'bar' : 2});\n")])])]),t("p",[t("code",[e._v("URLSearchParams")]),e._v("会对查询字符串自动编码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({'foo': '你好'});\nparams.toString() // \"foo=%E4%BD%A0%E5%A5%BD\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("foo")]),e._v("的值是汉字，"),t("code",[e._v("URLSearchParams")]),e._v("对其自动进行 URL 编码。")]),e._v(" "),t("p",[e._v("浏览器向服务器发送表单数据时，可以直接使用"),t("code",[e._v("URLSearchParams")]),e._v("实例作为表单数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const params = new URLSearchParams({foo: 1, bar: 2});\nfetch('https://example.com/api', {\n  method: 'POST',\n  body: params\n}).then(...)\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("fetch")]),e._v("命令向服务器发送命令时，可以直接使用"),t("code",[e._v("URLSearchParams")]),e._v("实例。")]),e._v(" "),t("p",[t("code",[e._v("URLSearchParams")]),e._v("可以与"),t("code",[e._v("URL()")]),e._v("接口结合使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var url = new URL(window.location);\nvar foo = url.searchParams.get('foo') || 'somedefault';\n")])])]),t("p",[e._v("上面代码中，URL 实例的"),t("code",[e._v("searchParams")]),e._v("属性就是一个"),t("code",[e._v("URLSearchParams")]),e._v("实例，所以可以使用"),t("code",[e._v("URLSearchParams")]),e._v("接口的"),t("code",[e._v("get")]),e._v("方法。")]),e._v(" "),t("p",[t("code",[e._v("URLSearchParams")]),e._v("实例有遍历器接口，可以用"),t("code",[e._v("for...of")]),e._v("循环遍历（详见《ES6 标准入门》的《Iterator》一章）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({'foo': 1 , 'bar': 2});\n\nfor (var p of params) {\n  console.log(p[0] + ': ' + p[1]);\n}\n// foo: 1\n// bar: 2\n")])])]),t("p",[t("code",[e._v("URLSearchParams")]),e._v("没有实例属性，只有实例方法。")]),e._v(" "),t("h4",{attrs:{id:"urlsearchparams-tostring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-tostring"}},[e._v("#")]),e._v(" URLSearchParams.toString()")]),e._v(" "),t("p",[t("code",[e._v("toString")]),e._v("方法返回实例的字符串形式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var url = new URL('https://example.com?foo=1&bar=2');\nvar params = new URLSearchParams(url.search);\n\nparams.toString() // \"foo=1&bar=2'\n")])])]),t("p",[e._v("那么需要字符串的场合，会自动调用"),t("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({version: 2.0});\nwindow.location.href = location.pathname + '?' + params;\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("location.href")]),e._v("赋值时，可以直接使用"),t("code",[e._v("params")]),e._v("对象。这时就会自动调用"),t("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),t("h4",{attrs:{id:"urlsearchparams-append"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-append"}},[e._v("#")]),e._v(" URLSearchParams.append()")]),e._v(" "),t("p",[t("code",[e._v("append()")]),e._v("方法用来追加一个查询参数。它接受两个参数，第一个为键名，第二个为键值，没有返回值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({'foo': 1 , 'bar': 2});\nparams.append('baz', 3);\nparams.toString() // \"foo=1&bar=2&baz=3\"\n")])])]),t("p",[t("code",[e._v("append()")]),e._v("方法不会识别是否键名已经存在。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({'foo': 1 , 'bar': 2});\nparams.append('foo', 3);\nparams.toString() // \"foo=1&bar=2&foo=3\"\n")])])]),t("p",[e._v("上面代码中，查询字符串里面"),t("code",[e._v("foo")]),e._v("已经存在了，但是"),t("code",[e._v("append")]),e._v("依然会追加一个同名键。")]),e._v(" "),t("h4",{attrs:{id:"urlsearchparams-delete"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-delete"}},[e._v("#")]),e._v(" URLSearchParams.delete()")]),e._v(" "),t("p",[t("code",[e._v("delete()")]),e._v("方法用来删除指定的查询参数。它接受键名作为参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({'foo': 1 , 'bar': 2});\nparams.delete('bar');\nparams.toString() // \"foo=1\"\n")])])]),t("h4",{attrs:{id:"urlsearchparams-has"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-has"}},[e._v("#")]),e._v(" URLSearchParams.has()")]),e._v(" "),t("p",[t("code",[e._v("has()")]),e._v("方法返回一个布尔值，表示查询字符串是否包含指定的键名。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams({'foo': 1 , 'bar': 2});\nparams.has('bar') // true\nparams.has('baz') // false\n")])])]),t("h4",{attrs:{id:"urlsearchparams-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-set"}},[e._v("#")]),e._v(" URLSearchParams.set()")]),e._v(" "),t("p",[t("code",[e._v("set()")]),e._v("方法用来设置查询字符串的键值。")]),e._v(" "),t("p",[e._v("它接受两个参数，第一个是键名，第二个是键值。如果是已经存在的键，键值会被改写，否则会被追加。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams('?foo=1');\nparams.set('foo', 2);\nparams.toString() // \"foo=2\"\nparams.set('bar', 3);\nparams.toString() // \"foo=2&bar=3\"\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("foo")]),e._v("是已经存在的键，"),t("code",[e._v("bar")]),e._v("是还不存在的键。")]),e._v(" "),t("p",[e._v("如果有多个的同名键，"),t("code",[e._v("set")]),e._v("会移除现存所有的键。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams('?foo=1&foo=2');\nparams.set('foo', 3);\nparams.toString() // \"foo=3\"\n")])])]),t("p",[e._v("下面是一个替换当前 URL 的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// URL: https://example.com?version=1.0\nvar params = new URLSearchParams(location.search.slice(1));\nparams.set('version', '2.0');\n\nwindow.history.replaceState({}, '', location.pathname + `?` + params);\n// URL: https://example.com?version=2.0\n")])])]),t("h4",{attrs:{id:"urlsearchparams-get-urlsearchparams-getall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-get-urlsearchparams-getall"}},[e._v("#")]),e._v(" URLSearchParams.get()，URLSearchParams.getAll()")]),e._v(" "),t("p",[t("code",[e._v("get()")]),e._v("方法用来读取查询字符串里面的指定键。它接受键名作为参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams('?foo=1');\nparams.get('foo') // \"1\"\nparams.get('bar') // null\n")])])]),t("p",[e._v("两个地方需要注意。第一，它返回的是字符串，如果原始值是数值，需要转一下类型；第二，如果指定的键名不存在，返回值是"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("如果有多个的同名键，"),t("code",[e._v("get")]),e._v("返回位置最前面的那个键值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams('?foo=3&foo=2&foo=1');\nparams.get('foo') // \"3\"\n")])])]),t("p",[e._v("上面代码中，查询字符串有三个"),t("code",[e._v("foo")]),e._v("键，"),t("code",[e._v("get")]),e._v("方法返回最前面的键值"),t("code",[e._v("3")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("getAll()")]),e._v("方法返回一个数组，成员是指定键的所有键值。它接受键名作为参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams('?foo=1&foo=2');\nparams.getAll('foo') // [\"1\", \"2\"]\n")])])]),t("p",[e._v("上面代码中，查询字符串有两个"),t("code",[e._v("foo")]),e._v("键，"),t("code",[e._v("getAll")]),e._v("返回的数组就有两个成员。")]),e._v(" "),t("h4",{attrs:{id:"urlsearchparams-sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-sort"}},[e._v("#")]),e._v(" URLSearchParams.sort()")]),e._v(" "),t("p",[t("code",[e._v("sort()")]),e._v("方法对查询字符串里面的键进行排序，规则是按照 Unicode 码点从小到大排列。")]),e._v(" "),t("p",[e._v("该方法没有返回值，或者说返回值是"),t("code",[e._v("undefined")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var params = new URLSearchParams('c=4&a=2&b=3&a=1');\nparams.sort();\nparams.toString() // \"a=2&a=1&b=3&c=4\"\n")])])]),t("p",[e._v("上面代码中，如果有两个同名的键"),t("code",[e._v("a")]),e._v("，它们之间不会排序，而是保留原始的顺序。")]),e._v(" "),t("h4",{attrs:{id:"urlsearchparams-keys-urlsearchparams-values-urlsearchparams-entries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams-keys-urlsearchparams-values-urlsearchparams-entries"}},[e._v("#")]),e._v(" URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries()")]),e._v(" "),t("p",[e._v("这三个方法都返回一个遍历器对象，供"),t("code",[e._v("for...of")]),e._v("循环遍历。它们的区别在于，"),t("code",[e._v("keys")]),e._v("方法返回的是键名的遍历器，"),t("code",[e._v("values")]),e._v("方法返回的是键值的遍历器，"),t("code",[e._v("entries")]),e._v("返回的是键值对的遍历器。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var params = new URLSearchParams(\'a=1&b=2\');\n\nfor(var p of params.keys()) {\n  console.log(p);\n}\n// a\n// b\n\nfor(var p of params.values()) {\n  console.log(p);\n}\n// 1\n// 2\n\nfor(var p of params.entries()) {\n  console.log(p);\n}\n// ["a", "1"]\n// ["b", "2"]\n')])])]),t("p",[e._v("如果直接对"),t("code",[e._v("URLSearchParams")]),e._v("进行遍历，其实内部调用的就是"),t("code",[e._v("entries")]),e._v("接口。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for (var p of params) {}\n// 等同于\nfor (var p of params.entries()) {}\n")])])]),t("h3",{attrs:{id:"参考链接-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-3"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Location",target:"_blank",rel:"noopener noreferrer"}},[e._v("Location"),t("OutboundLink")],1),e._v(", by MDN")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/URL",target:"_blank",rel:"noopener noreferrer"}},[e._v("URL"),t("OutboundLink")],1),e._v(", by MDN")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer"}},[e._v("URLSearchParams"),t("OutboundLink")],1),e._v(", by MDN")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en",target:"_blank",rel:"noopener noreferrer"}},[e._v("Easy URL Manipulation with URLSearchParams"),t("OutboundLink")],1),e._v(", by Eric Bidelman")])]),e._v(" "),t("h2",{attrs:{id:"arraybuffer对象-blob对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer对象-blob对象"}},[e._v("#")]),e._v(" ArrayBuffer对象，Blob对象")]),e._v(" "),t("h3",{attrs:{id:"arraybuffer-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer-对象"}},[e._v("#")]),e._v(" ArrayBuffer 对象")]),e._v(" "),t("p",[e._v("ArrayBuffer 对象表示一段二进制数据，用来模拟内存里面的数据。通过这个对象，JavaScript 可以读写二进制数据。这个对象可以看作内存数据的表达。")]),e._v(" "),t("p",[e._v("这个对象是 ES6 才写入标准的，普通的网页编程用不到它，为了教程体系的完整，下面只提供一个简略的介绍，详细介绍请看《ES6 标准入门》里面的章节。")]),e._v(" "),t("p",[e._v("浏览器原生提供"),t("code",[e._v("ArrayBuffer()")]),e._v("构造函数，用来生成实例。它接受一个整数作为参数，表示这段二进制数据占用多少个字节。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var buffer = new ArrayBuffer(8);\n")])])]),t("p",[e._v("上面代码中，实例对象"),t("code",[e._v("buffer")]),e._v("占用8个字节。")]),e._v(" "),t("p",[e._v("ArrayBuffer 对象有实例属性"),t("code",[e._v("byteLength")]),e._v("，表示当前实例占用的内存长度（单位字节）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var buffer = new ArrayBuffer(8);\nbuffer.byteLength // 8\n")])])]),t("p",[e._v("ArrayBuffer 对象有实例方法"),t("code",[e._v("slice()")]),e._v("，用来复制一部分内存。它接受两个整数参数，分别表示复制的开始位置（从0开始）和结束位置（复制时不包括结束位置），如果省略第二个参数，则表示一直复制到结束。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var buf1 = new ArrayBuffer(8);\nvar buf2 = buf1.slice(0);\n")])])]),t("p",[e._v("上面代码表示复制原来的实例。")]),e._v(" "),t("h3",{attrs:{id:"blob-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blob-对象"}},[e._v("#")]),e._v(" Blob 对象")]),e._v(" "),t("h4",{attrs:{id:"简介-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介-2"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("Blob 对象表示一个二进制文件的数据内容，比如一个图片文件的内容就可以通过 Blob 对象读写。它通常用来读写文件，它的名字是 Binary Large Object （二进制大型对象）的缩写。它与 ArrayBuffer 的区别在于，它用于操作二进制文件，而 ArrayBuffer 用于操作内存。")]),e._v(" "),t("p",[e._v("浏览器原生提供"),t("code",[e._v("Blob()")]),e._v("构造函数，用来生成实例对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new Blob(array [, options])\n")])])]),t("p",[t("code",[e._v("Blob")]),e._v("构造函数接受两个参数。第一个参数是数组，成员是字符串或二进制对象，表示新生成的"),t("code",[e._v("Blob")]),e._v("实例对象的内容；第二个参数是可选的，是一个配置对象，目前只有一个属性"),t("code",[e._v("type")]),e._v("，它的值是一个字符串，表示数据的 MIME 类型，默认是空字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var htmlFragment = ['<a id=\"a\"><b id=\"b\">hey!</b></a>'];\nvar myBlob = new Blob(htmlFragment, {type : 'text/html'});\n")])])]),t("p",[e._v("上面代码中，实例对象"),t("code",[e._v("myBlob")]),e._v("包含的是字符串。生成实例的时候，数据类型指定为"),t("code",[e._v("text/html")]),e._v("。")]),e._v(" "),t("p",[e._v("下面是另一个例子，Blob 保存 JSON 数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var obj = { hello: 'world' };\nvar blob = new Blob([ JSON.stringify(obj) ], {type : 'application/json'});\n")])])]),t("h4",{attrs:{id:"实例属性和实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例属性和实例方法"}},[e._v("#")]),e._v(" 实例属性和实例方法")]),e._v(" "),t("p",[t("code",[e._v("Blob")]),e._v("具有两个实例属性"),t("code",[e._v("size")]),e._v("和"),t("code",[e._v("type")]),e._v("，分别返回数据的大小和类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var htmlFragment = [\'<a id="a"><b id="b">hey!</b></a>\'];\nvar myBlob = new Blob(htmlFragment, {type : \'text/html\'});\n\nmyBlob.size // 32\nmyBlob.type // "text/html"\n')])])]),t("p",[t("code",[e._v("Blob")]),e._v("具有一个实例方法"),t("code",[e._v("slice")]),e._v("，用来拷贝原来的数据，返回的也是一个"),t("code",[e._v("Blob")]),e._v("实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("myBlob.slice(start, end, contentType)\n")])])]),t("p",[t("code",[e._v("slice")]),e._v("方法有三个参数，都是可选的。它们依次是起始的字节位置（默认为0）、结束的字节位置（默认为"),t("code",[e._v("size")]),e._v("属性的值，该位置本身将不包含在拷贝的数据之中）、新实例的数据类型（默认为空字符串）。")]),e._v(" "),t("h4",{attrs:{id:"获取文件信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取文件信息"}},[e._v("#")]),e._v(" 获取文件信息")]),e._v(" "),t("p",[e._v("文件选择器"),t("code",[e._v('<input type="file">')]),e._v("用来让用户选取文件。出于安全考虑，浏览器不允许脚本自行设置这个控件的"),t("code",[e._v("value")]),e._v("属性，即文件必须是用户手动选取的，不能是脚本指定的。一旦用户选好了文件，脚本就可以读取这个文件。")]),e._v(" "),t("p",[e._v("文件选择器返回一个 FileList 对象，该对象是一个类似数组的成员，每个成员都是一个 File 实例对象。File 实例对象是一个特殊的 Blob 实例，增加了"),t("code",[e._v("name")]),e._v("和"),t("code",[e._v("lastModifiedDate")]),e._v("属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <input type="file" accept="image/*" multiple onchange="fileinfo(this.files)"/>\n\nfunction fileinfo(files) {\n  for (var i = 0; i < files.length; i++) {\n    var f = files[i];\n    console.log(\n      f.name, // 文件名，不含路径\n      f.size, // 文件大小，Blob 实例属性\n      f.type, // 文件类型，Blob 实例属性\n      f.lastModifiedDate // 文件的最后修改时间\n    );\n  }\n}\n')])])]),t("p",[e._v("除了文件选择器，拖放 API 的"),t("code",[e._v("dataTransfer.files")]),e._v("返回的也是一个FileList 对象，它的成员因此也是 File 实例对象。")]),e._v(" "),t("h4",{attrs:{id:"下载文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载文件"}},[e._v("#")]),e._v(" 下载文件")]),e._v(" "),t("p",[e._v("AJAX 请求时，如果指定"),t("code",[e._v("responseType")]),e._v("属性为"),t("code",[e._v("blob")]),e._v("，下载下来的就是一个 Blob 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function getBlob(url, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', url);\n  xhr.responseType = 'blob';\n  xhr.onload = function () {\n    callback(xhr.response);\n  }\n  xhr.send(null);\n}\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("xhr.response")]),e._v("拿到的就是一个 Blob 对象。")]),e._v(" "),t("h4",{attrs:{id:"生成-url"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成-url"}},[e._v("#")]),e._v(" 生成 URL")]),e._v(" "),t("p",[e._v("浏览器允许使用"),t("code",[e._v("URL.createObjectURL()")]),e._v("方法，针对 Blob 对象生成一个临时 URL，以便于某些 API 使用。这个 URL 以"),t("code",[e._v("blob://")]),e._v("开头，表明对应一个 Blob 对象，协议头后面是一个识别符，用来唯一对应内存里面的 Blob 对象。这一点与"),t("code",[e._v("data://URL")]),e._v("（URL 包含实际数据）和"),t("code",[e._v("file://URL")]),e._v("（本地文件系统里面的文件）都不一样。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var droptarget = document.getElementById('droptarget');\n\ndroptarget.ondrop = function (e) {\n  var files = e.dataTransfer.files;\n  for (var i = 0; i < files.length; i++) {\n    var type = files[i].type;\n    if (type.substring(0,6) !== 'image/')\n      continue;\n    var img = document.createElement('img');\n    img.src = URL.createObjectURL(files[i]);\n    img.onload = function () {\n      this.width = 100;\n      document.body.appendChild(this);\n      URL.revokeObjectURL(this.src);\n    }\n  }\n}\n")])])]),t("p",[e._v("上面代码通过为拖放的图片文件生成一个 URL，产生它们的缩略图，从而使得用户可以预览选择的文件。")]),e._v(" "),t("p",[e._v("浏览器处理 Blob URL 就跟普通的 URL 一样，如果 Blob 对象不存在，返回404状态码；如果跨域请求，返回403状态码。Blob URL 只对 GET 请求有效，如果请求成功，返回200状态码。由于 Blob URL 就是普通 URL，因此可以下载。")]),e._v(" "),t("h4",{attrs:{id:"读取文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读取文件"}},[e._v("#")]),e._v(" 读取文件")]),e._v(" "),t("p",[e._v("取得 Blob 对象以后，可以通过"),t("code",[e._v("FileReader")]),e._v("对象，读取 Blob 对象的内容，即文件内容。")]),e._v(" "),t("p",[e._v("FileReader 对象提供四个方法，处理 Blob 对象。Blob 对象作为参数传入这些方法，然后以指定的格式返回。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("FileReader.readAsText()")]),e._v("：返回文本，需要指定文本编码，默认为 UTF-8。")]),e._v(" "),t("li",[t("code",[e._v("FileReader.readAsArrayBuffer()")]),e._v("：返回 ArrayBuffer 对象。")]),e._v(" "),t("li",[t("code",[e._v("FileReader.readAsDataURL()")]),e._v("：返回 Data URL。")]),e._v(" "),t("li",[t("code",[e._v("FileReader.readAsBinaryString()")]),e._v("：返回原始的二进制字符串。")])]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("FileReader.readAsText()")]),e._v("方法的例子，用来读取文本文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// HTML 代码如下\n// <input type=\"file\" onchange=\"readfile(this.files[0])\"></input>\n// <pre id=\"output\"></pre>\nfunction readfile(f) {\n  var reader = new FileReader();\n  reader.readAsText(f);\n  reader.onload = function () {\n    var text = reader.result;\n    var out = document.getElementById('output');\n    out.innerHTML = '';\n    out.appendChild(document.createTextNode(text));\n  }\n  reader.onerror = function(e) {\n    console.log('Error', e);\n  };\n}\n")])])]),t("p",[e._v("上面代码中，通过指定 FileReader 实例对象的"),t("code",[e._v("onload")]),e._v("监听函数，在实例的"),t("code",[e._v("result")]),e._v("属性上拿到文件内容。")]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("FileReader.readAsArrayBuffer()")]),e._v("方法的例子，用于读取二进制文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// HTML 代码如下\n// <input type=\"file\" onchange=\"typefile(this.files[0])\"></input>\nfunction typefile(file) {\n  // 文件开头的四个字节，生成一个 Blob 对象\n  var slice = file.slice(0, 4);\n  var reader = new FileReader();\n  // 读取这四个字节\n  reader.readAsArrayBuffer(slice);\n  reader.onload = function (e) {\n    var buffer = reader.result;\n    // 将这四个字节的内容，视作一个32位整数\n    var view = new DataView(buffer);\n    var magic = view.getUint32(0, false);\n    // 根据文件的前四个字节，判断它的类型\n    switch(magic) {\n      case 0x89504E47: file.verified_type = 'image/png'; break;\n      case 0x47494638: file.verified_type = 'image/gif'; break;\n      case 0x25504446: file.verified_type = 'application/pdf'; break;\n      case 0x504b0304: file.verified_type = 'application/zip'; break;\n    }\n    console.log(file.name, file.verified_type);\n  };\n}\n")])])]),t("h2",{attrs:{id:"file-对象-filelist对象-filereader对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#file-对象-filelist对象-filereader对象"}},[e._v("#")]),e._v(" File 对象，FileList对象，FileReader对象")]),e._v(" "),t("h3",{attrs:{id:"file-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#file-对象"}},[e._v("#")]),e._v(" File 对象")]),e._v(" "),t("p",[e._v("File 对象代表一个文件，用来读写文件信息。它继承了 Blob 对象，或者说是一种特殊的 Blob 对象，所有可以使用 Blob 对象的场合都可以使用它。")]),e._v(" "),t("p",[e._v("最常见的使用场合是表单的文件上传控件（"),t("code",[e._v('<input type="file">')]),e._v("），用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，它们都是 File 实例对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <input id="fileItem" type="file">\nvar file = document.getElementById(\'fileItem\').files[0];\nfile instanceof File // true\n')])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("file")]),e._v("是用户选中的第一个文件，它是 File 的实例。")]),e._v(" "),t("h4",{attrs:{id:"构造函数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造函数-2"}},[e._v("#")]),e._v(" 构造函数")]),e._v(" "),t("p",[e._v("浏览器原生提供一个"),t("code",[e._v("File()")]),e._v("构造函数，用来生成 File 实例对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("new File(array, name [, options])\n")])])]),t("p",[t("code",[e._v("File()")]),e._v("构造函数接受三个参数。")]),e._v(" "),t("ul",[t("li",[e._v("array：一个数组，成员可以是二进制对象或字符串，表示文件的内容。")]),e._v(" "),t("li",[e._v("name：字符串，表示文件名或文件路径。")]),e._v(" "),t("li",[e._v("options：配置对象，设置实例的属性。该参数可选。")])]),e._v(" "),t("p",[e._v("第三个参数配置对象，可以设置两个属性。")]),e._v(" "),t("ul",[t("li",[e._v("type：字符串，表示实例对象的 MIME 类型，默认值为空字符串。")]),e._v(" "),t("li",[e._v("lastModified：时间戳，表示上次修改的时间，默认为"),t("code",[e._v("Date.now()")]),e._v("。")])]),e._v(" "),t("p",[e._v("下面是一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var file = new File(\n  ['foo'],\n  'foo.txt',\n  {\n    type: 'text/plain',\n  }\n);\n")])])]),t("h4",{attrs:{id:"实例属性和实例方法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例属性和实例方法-2"}},[e._v("#")]),e._v(" 实例属性和实例方法")]),e._v(" "),t("p",[e._v("File 对象有以下实例属性。")]),e._v(" "),t("ul",[t("li",[e._v("File.lastModified：最后修改时间")]),e._v(" "),t("li",[e._v("File.name：文件名或文件路径")]),e._v(" "),t("li",[e._v("File.size：文件大小（单位字节）")]),e._v(" "),t("li",[e._v("File.type：文件的 MIME 类型")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var myFile = new File([], \'file.bin\', {\n  lastModified: new Date(2018, 1, 1),\n});\nmyFile.lastModified // 1517414400000\nmyFile.name // "file.bin"\nmyFile.size // 0\nmyFile.type // ""\n')])])]),t("p",[e._v("上面代码中，由于"),t("code",[e._v("myFile")]),e._v("的内容为空，也没有设置 MIME 类型，所以"),t("code",[e._v("size")]),e._v("属性等于0，"),t("code",[e._v("type")]),e._v("属性等于空字符串。")]),e._v(" "),t("p",[e._v("File 对象没有自己的实例方法，由于继承了 Blob 对象，因此可以使用 Blob 的实例方法"),t("code",[e._v("slice()")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"filelist-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filelist-对象"}},[e._v("#")]),e._v(" FileList 对象")]),e._v(" "),t("p",[t("code",[e._v("FileList")]),e._v("对象是一个类似数组的对象，代表一组选中的文件，每个成员都是一个 File 实例。它主要出现在两个场合。")]),e._v(" "),t("ul",[t("li",[e._v("文件控件节点（"),t("code",[e._v('<input type="file">')]),e._v("）的"),t("code",[e._v("files")]),e._v("属性，返回一个 FileList 实例。")]),e._v(" "),t("li",[e._v("拖拉一组文件时，目标区的"),t("code",[e._v("DataTransfer.files")]),e._v("属性，返回一个 FileList 实例。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <input id="fileItem" type="file">\nvar files = document.getElementById(\'fileItem\').files;\nfiles instanceof FileList // true\n')])])]),t("p",[e._v("上面代码中，文件控件的"),t("code",[e._v("files")]),e._v("属性是一个 FileList 实例。")]),e._v(" "),t("p",[e._v("FileList 的实例属性主要是"),t("code",[e._v("length")]),e._v("，表示包含多少个文件。")]),e._v(" "),t("p",[e._v("FileList 的实例方法主要是"),t("code",[e._v("item()")]),e._v("，用来返回指定位置的实例。它接受一个整数作为参数，表示位置的序号（从零开始）。但是，由于 FileList 的实例是一个类似数组的对象，可以直接用方括号运算符，即"),t("code",[e._v("myFileList[0]")]),e._v("等同于"),t("code",[e._v("myFileList.item(0)")]),e._v("，所以一般用不到"),t("code",[e._v("item()")]),e._v("方法。")]),e._v(" "),t("h3",{attrs:{id:"filereader-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filereader-对象"}},[e._v("#")]),e._v(" FileReader 对象")]),e._v(" "),t("p",[e._v("FileReader 对象用于读取 File 对象或 Blob 对象所包含的文件内容。")]),e._v(" "),t("p",[e._v("浏览器原生提供一个"),t("code",[e._v("FileReader")]),e._v("构造函数，用来生成 FileReader 实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var reader = new FileReader();\n")])])]),t("p",[e._v("FileReader 有以下的实例属性。")]),e._v(" "),t("ul",[t("li",[e._v("FileReader.error：读取文件时产生的错误对象")]),e._v(" "),t("li",[e._v("FileReader.readyState：整数，表示读取文件时的当前状态。一共有三种可能的状态，"),t("code",[e._v("0")]),e._v("表示尚未加载任何数据，"),t("code",[e._v("1")]),e._v("表示数据正在加载，"),t("code",[e._v("2")]),e._v("表示加载完成。")]),e._v(" "),t("li",[e._v("FileReader.result：读取完成后的文件内容，有可能是字符串，也可能是一个 ArrayBuffer 实例。")]),e._v(" "),t("li",[e._v("FileReader.onabort："),t("code",[e._v("abort")]),e._v("事件（用户终止读取操作）的监听函数。")]),e._v(" "),t("li",[e._v("FileReader.onerror："),t("code",[e._v("error")]),e._v("事件（读取错误）的监听函数。")]),e._v(" "),t("li",[e._v("FileReader.onload："),t("code",[e._v("load")]),e._v("事件（读取操作完成）的监听函数，通常在这个函数里面使用"),t("code",[e._v("result")]),e._v("属性，拿到文件内容。")]),e._v(" "),t("li",[e._v("FileReader.onloadstart："),t("code",[e._v("loadstart")]),e._v("事件（读取操作开始）的监听函数。")]),e._v(" "),t("li",[e._v("FileReader.onloadend："),t("code",[e._v("loadend")]),e._v("事件（读取操作结束）的监听函数。")]),e._v(" "),t("li",[e._v("FileReader.onprogress："),t("code",[e._v("progress")]),e._v("事件（读取操作进行中）的监听函数。")])]),e._v(" "),t("p",[e._v("下面是监听"),t("code",[e._v("load")]),e._v("事件的一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <input type="file" onchange="onChange(event)">\n\nfunction onChange(event) {\n  var file = event.target.files[0];\n  var reader = new FileReader();\n  reader.onload = function (event) {\n    console.log(event.target.result)\n  };\n\n  reader.readAsText(file);\n}\n')])])]),t("p",[e._v("上面代码中，每当文件控件发生变化，就尝试读取第一个文件。如果读取成功（"),t("code",[e._v("load")]),e._v("事件发生），就打印出文件内容。")]),e._v(" "),t("p",[e._v("FileReader 有以下实例方法。")]),e._v(" "),t("ul",[t("li",[e._v("FileReader.abort()：终止读取操作，"),t("code",[e._v("readyState")]),e._v("属性将变成"),t("code",[e._v("2")]),e._v("。")]),e._v(" "),t("li",[e._v("FileReader.readAsArrayBuffer()：以 ArrayBuffer 的格式读取文件，读取完成后"),t("code",[e._v("result")]),e._v("属性将返回一个 ArrayBuffer 实例。")]),e._v(" "),t("li",[e._v("FileReader.readAsBinaryString()：读取完成后，"),t("code",[e._v("result")]),e._v("属性将返回原始的二进制字符串。")]),e._v(" "),t("li",[e._v("FileReader.readAsDataURL()：读取完成后，"),t("code",[e._v("result")]),e._v("属性将返回一个 Data URL 格式（Base64 编码）的字符串，代表文件内容。对于图片文件，这个字符串可以用于"),t("code",[e._v("<img>")]),e._v("元素的"),t("code",[e._v("src")]),e._v("属性。注意，这个字符串不能直接进行 Base64 解码，必须把前缀"),t("code",[e._v("data:*/*;base64,")]),e._v("从字符串里删除以后，再进行解码。")]),e._v(" "),t("li",[e._v("FileReader.readAsText()：读取完成后，"),t("code",[e._v("result")]),e._v("属性将返回文件内容的文本字符串。该方法的第一个参数是代表文件的 Blob 实例，第二个参数是可选的，表示文本编码，默认为 UTF-8。")])]),e._v(" "),t("p",[e._v("下面是一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/* HTML 代码如下\n  <input type="file" onchange="previewFile()">\n  <img src="" height="200">\n*/\n\nfunction previewFile() {\n  var preview = document.querySelector(\'img\');\n  var file    = document.querySelector(\'input[type=file]\').files[0];\n  var reader  = new FileReader();\n\n  reader.addEventListener(\'load\', function () {\n    preview.src = reader.result;\n  }, false);\n\n  if (file) {\n    reader.readAsDataURL(file);\n  }\n}\n')])])]),t("p",[e._v("上面代码中，用户选中图片文件以后，脚本会自动读取文件内容，然后作为一个 Data URL 赋值给"),t("code",[e._v("<img>")]),e._v("元素的"),t("code",[e._v("src")]),e._v("属性，从而把图片展示出来。")]),e._v(" "),t("h2",{attrs:{id:"表单-formdata对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单-formdata对象"}},[e._v("#")]),e._v(" 表单，FormData对象")]),e._v(" "),t("h3",{attrs:{id:"表单概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单概述"}},[e._v("#")]),e._v(" 表单概述")]),e._v(" "),t("p",[e._v("表单（"),t("code",[e._v("<form>")]),e._v("）用来收集用户提交的数据，发送到服务器。比如，用户提交用户名和密码，让服务器验证，就要通过表单。表单提供多种控件，让开发者使用，具体的控件种类和用法请参考 HTML 语言的教程。本章主要介绍 JavaScript 与表单的交互。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form action="/handling-page" method="post">\n  <div>\n    <label for="name">用户名：</label>\n    <input type="text" id="name" name="user_name" />\n  </div>\n  <div>\n    <label for="passwd">密码：</label>\n    <input type="password" id="passwd" name="user_passwd" />\n  </div>\n  <div>\n    <input type="submit" id="submit" name="submit_button" value="提交" />\n  </div>\n</form>\n')])])]),t("p",[e._v("上面代码就是一个简单的表单，包含三个控件：用户名输入框、密码输入框和提交按钮。")]),e._v(" "),t("p",[e._v("用户点击“提交”按钮，每一个控件都会生成一个键值对，键名是控件的"),t("code",[e._v("name")]),e._v("属性，键值是控件的"),t("code",[e._v("value")]),e._v("属性，键名和键值之间由等号连接。比如，用户名输入框的"),t("code",[e._v("name")]),e._v("属性是"),t("code",[e._v("user_name")]),e._v("，"),t("code",[e._v("value")]),e._v("属性是用户输入的值，假定是“张三”，提交到服务器的时候，就会生成一个键值对"),t("code",[e._v("user_name=张三")]),e._v("。")]),e._v(" "),t("p",[e._v("所有的键值对都会提交到服务器。但是，提交的数据格式跟"),t("code",[e._v("<form>")]),e._v("元素的"),t("code",[e._v("method")]),e._v("属性有关。该属性指定了提交数据的 HTTP 方法。如果是 GET 方法，所有键值对会以 URL 的查询字符串形式，提交到服务器，比如"),t("code",[e._v("/handling-page?user_name=张三&user_passwd=123&submit_button=提交")]),e._v("。下面就是 GET 请求的 HTTP 头信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("GET /handling-page?user_name=张三&user_passwd=123&submit_button=提交\nHost: example.com\n")])])]),t("p",[e._v("如果是 POST 方法，所有键值对会连接成一行，作为 HTTP 请求的数据体发送到服务器，比如"),t("code",[e._v("user_name=张三&user_passwd=123&submit_button=提交")]),e._v("。下面就是 POST 请求的头信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("POST /handling-page HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 74\n\nuser_name=张三&user_passwd=123&submit_button=提交\n")])])]),t("p",[e._v("注意，实际提交的时候，只要键值不是 URL 的合法字符（比如汉字“张三”和“提交”），浏览器会自动对其进行编码。")]),e._v(" "),t("p",[e._v("点击"),t("code",[e._v("submit")]),e._v("控件，就可以提交表单。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form>\n  <input type="submit" value="提交">\n</form>\n')])])]),t("p",[e._v("上面表单就包含一个"),t("code",[e._v("submit")]),e._v("控件，点击这个控件，浏览器就会把表单数据向服务器提交。")]),e._v(" "),t("p",[e._v("注意，表单里面的"),t("code",[e._v("<button>")]),e._v("元素如果没有用"),t("code",[e._v("type")]),e._v("属性指定类型，那么默认就是"),t("code",[e._v("submit")]),e._v("控件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<form>\n  <button>提交</button>\n</form>\n")])])]),t("p",[e._v("上面表单的"),t("code",[e._v("<button>")]),e._v("元素，点击以后也会提交表单。")]),e._v(" "),t("p",[e._v("除了点击"),t("code",[e._v("submit")]),e._v("控件提交表单，还可以用表单元素的"),t("code",[e._v("submit()")]),e._v("方法，通过脚本提交表单。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("formElement.submit();\n")])])]),t("p",[e._v("表单元素的"),t("code",[e._v("reset()")]),e._v("方法可以重置所有控件的值（重置为默认值）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("formElement.reset()\n")])])]),t("h3",{attrs:{id:"formdata-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#formdata-对象"}},[e._v("#")]),e._v(" FormData 对象")]),e._v(" "),t("h4",{attrs:{id:"概述-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-4"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("表单数据以键值对的形式向服务器发送，这个过程是浏览器自动完成的。但是有时候，我们希望通过脚本完成这个过程，构造或编辑表单的键值对，然后通过脚本发送给服务器。浏览器原生提供了 FormData 对象来完成这项工作。")]),e._v(" "),t("p",[t("code",[e._v("FormData()")]),e._v("首先是一个构造函数，用来生成表单的实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var formdata = new FormData(form);\n")])])]),t("p",[t("code",[e._v("FormData()")]),e._v("构造函数的参数是一个 DOM 的表单元素，构造函数会自动处理表单的键值对。这个参数是可选的，如果省略该参数，就表示一个空的表单。")]),e._v(" "),t("p",[e._v("下面是一个表单。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form id="myForm" name="myForm">\n  <div>\n    <label for="username">用户名：</label>\n    <input type="text" id="username" name="username">\n  </div>\n  <div>\n    <label for="useracc">账号：</label>\n    <input type="text" id="useracc" name="useracc">\n  </div>\n  <div>\n    <label for="userfile">上传文件：</label>\n    <input type="file" id="userfile" name="userfile">\n  </div>\n<input type="submit" value="Submit!">\n</form>\n')])])]),t("p",[e._v("我们用"),t("code",[e._v("FormData()")]),e._v("处理上面这个表单。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var myForm = document.getElementById('myForm');\nvar formData = new FormData(myForm);\n\n// 获取某个控件的值\nformData.get('username') // \"\"\n\n// 设置某个控件的值\nformData.set('username', '张三');\n\nformData.get('username') // \"张三\"\n")])])]),t("h4",{attrs:{id:"实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),t("p",[e._v("FormData 提供以下实例方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("FormData.get(key)")]),e._v("：获取指定键名对应的键值，参数为键名。如果有多个同名的键值对，则返回第一个键值对的键值。")]),e._v(" "),t("li",[t("code",[e._v("FormData.getAll(key)")]),e._v("：返回一个数组，表示指定键名对应的所有键值。如果有多个同名的键值对，数组会包含所有的键值。")]),e._v(" "),t("li",[t("code",[e._v("FormData.set(key, value)")]),e._v("：设置指定键名的键值，参数为键名。如果键名不存在，会添加这个键值对，否则会更新指定键名的键值。如果第二个参数是文件，还可以使用第三个参数，表示文件名。")]),e._v(" "),t("li",[t("code",[e._v("FormData.delete(key)")]),e._v("：删除一个键值对，参数为键名。")]),e._v(" "),t("li",[t("code",[e._v("FormData.append(key, value)")]),e._v("：添加一个键值对。如果键名重复，则会生成两个相同键名的键值对。如果第二个参数是文件，还可以使用第三个参数，表示文件名。")]),e._v(" "),t("li",[t("code",[e._v("FormData.has(key)")]),e._v("：返回一个布尔值，表示是否具有该键名的键值对。")]),e._v(" "),t("li",[t("code",[e._v("FormData.keys()")]),e._v("：返回一个遍历器对象，用于"),t("code",[e._v("for...of")]),e._v("循环遍历所有的键名。")]),e._v(" "),t("li",[t("code",[e._v("FormData.values()")]),e._v("：返回一个遍历器对象，用于"),t("code",[e._v("for...of")]),e._v("循环遍历所有的键值。")]),e._v(" "),t("li",[t("code",[e._v("FormData.entries()")]),e._v("：返回一个遍历器对象，用于"),t("code",[e._v("for...of")]),e._v("循环遍历所有的键值对。如果直接用"),t("code",[e._v("for...of")]),e._v("循环遍历 FormData 实例，默认就会调用这个方法。")])]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("get()")]),e._v("、"),t("code",[e._v("getAll()")]),e._v("、"),t("code",[e._v("set()")]),e._v("、"),t("code",[e._v("append()")]),e._v("方法的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var formData = new FormData();\n\nformData.set('username', '张三');\nformData.append('username', '李四');\nformData.get('username') // \"张三\"\nformData.getAll('username') // [\"张三\", \"李四\"]\n\nformData.append('userpic[]', myFileInput.files[0], 'user1.jpg');\nformData.append('userpic[]', myFileInput.files[1], 'user2.jpg');\n")])])]),t("p",[e._v("下面是遍历器的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var formData = new FormData();\nformData.append('key1', 'value1');\nformData.append('key2', 'value2');\n\nfor (var key of formData.keys()) {\n  console.log(key);\n}\n// \"key1\"\n// \"key2\"\n\nfor (var value of formData.values()) {\n  console.log(value);\n}\n// \"value1\"\n// \"value2\"\n\nfor (var pair of formData.entries()) {\n  console.log(pair[0] + ': ' + pair[1]);\n}\n// key1: value1\n// key2: value2\n\n// 等同于遍历 formData.entries()\nfor (var pair of formData) {\n  console.log(pair[0] + ': ' + pair[1]);\n}\n// key1: value1\n// key2: value2\n")])])]),t("h3",{attrs:{id:"表单的内置验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单的内置验证"}},[e._v("#")]),e._v(" 表单的内置验证")]),e._v(" "),t("h4",{attrs:{id:"自动校验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动校验"}},[e._v("#")]),e._v(" 自动校验")]),e._v(" "),t("p",[e._v("表单提交的时候，浏览器允许开发者指定一些条件，它会自动验证各个表单控件的值是否符合条件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- 必填 --\x3e\n<input required>\n\n\x3c!-- 必须符合正则表达式 --\x3e\n<input pattern="banana|cherry">\n\n\x3c!-- 字符串长度必须为6个字符 --\x3e\n<input minlength="6" maxlength="6">\n\n\x3c!-- 数值必须在1到10之间 --\x3e\n<input type="number" min="1" max="10">\n\n\x3c!-- 必须填入 Email 地址 --\x3e\n<input type="email">\n\n\x3c!-- 必须填入 URL --\x3e\n<input type="URL">\n')])])]),t("p",[e._v("如果一个控件通过验证，它就会匹配"),t("code",[e._v(":valid")]),e._v("的 CSS 伪类，浏览器会继续进行表单提交的流程。如果没有通过验证，该控件就会匹配"),t("code",[e._v(":invalid")]),e._v("的 CSS 伪类，浏览器会终止表单提交，并显示一个错误信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("input:invalid {\n  border-color: red;\n}\ninput,\ninput:valid {\n  border-color: #ccc;\n}\n")])])]),t("h4",{attrs:{id:"checkvalidity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#checkvalidity"}},[e._v("#")]),e._v(" checkValidity()")]),e._v(" "),t("p",[e._v("除了提交表单的时候，浏览器自动校验表单，还可以手动触发表单的校验。表单元素和表单控件都有"),t("code",[e._v("checkValidity()")]),e._v("方法，用于手动触发校验。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 触发整个表单的校验\nform.checkValidity()\n\n// 触发单个表单控件的校验\nformControl.checkValidity()\n")])])]),t("p",[t("code",[e._v("checkValidity()")]),e._v("方法返回一个布尔值，"),t("code",[e._v("true")]),e._v("表示通过校验，"),t("code",[e._v("false")]),e._v("表示没有通过校验。因此，提交表单可以封装为下面的函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function submitForm(action) {\n  var form = document.getElementById('form');\n  form.action = action;\n  if (form.checkValidity()) {\n    form.submit();\n  }\n}\n")])])]),t("h4",{attrs:{id:"willvalidate-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#willvalidate-属性"}},[e._v("#")]),e._v(" willValidate 属性")]),e._v(" "),t("p",[e._v("控件元素的"),t("code",[e._v("willValidate")]),e._v("属性是一个布尔值，表示该控件是否会在提交时进行校验。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <form novalidate>\n//   <input id="name" name="name" required />\n// </form>\n\nvar input = document.querySelector(\'#name\');\ninput.willValidate // true\n')])])]),t("h4",{attrs:{id:"validationmessage-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validationmessage-属性"}},[e._v("#")]),e._v(" validationMessage 属性")]),e._v(" "),t("p",[e._v("控件元素的"),t("code",[e._v("validationMessage")]),e._v("属性返回一个字符串，表示控件不满足校验条件时，浏览器显示的提示文本。以下两种情况，该属性返回空字符串。")]),e._v(" "),t("ul",[t("li",[e._v("该控件不会在提交时自动校验")]),e._v(" "),t("li",[e._v("该控件满足校验条件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <form><input type="text" required></form>\ndocument.querySelector(\'form input\').validationMessage\n// "请填写此字段。"\n')])])]),t("p",[e._v("下面是另一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var myInput = document.getElementById('myinput');\nif (!myInput.checkValidity()) {\n  document.getElementById('prompt').innerHTML = myInput.validationMessage;\n}\n")])])]),t("h4",{attrs:{id:"setcustomvalidity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setcustomvalidity"}},[e._v("#")]),e._v(" setCustomValidity()")]),e._v(" "),t("p",[e._v("控件元素的"),t("code",[e._v("setCustomValidity()")]),e._v("方法用来定制校验失败时的报错信息。它接受一个字符串作为参数，该字符串就是定制的报错信息。如果参数为空字符串，则上次设置的报错信息被清除。")]),e._v(" "),t("p",[e._v("这个方法可以替换浏览器内置的表单验证报错信息，参数就是要显示的报错信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form action="somefile.php">\n  <input\n    type="text"\n    name="username"\n    placeholder="Username"\n    pattern="[a-z]{1,15}"\n    id="username"\n  >\n  <input type="submit">\n</form>\n')])])]),t("p",[e._v("上面的表单输入框，要求只能输入小写字母，且不得超过15个字符。如果输入不符合要求（比如输入“ABC”），提交表单的时候，Chrome 浏览器会弹出报错信息“Please match the requested format.”，禁止表单提交。下面使用"),t("code",[e._v("setCustomValidity()")]),e._v("方法替换掉报错信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var input = document.getElementById('username');\ninput.oninvalid = function (event) {\n  event.target.setCustomValidity(\n    '用户名必须是小写字母，不能为空，最长不超过15个字符'\n  );\n}\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("setCustomValidity()")]),e._v("方法是在"),t("code",[e._v("invalid")]),e._v("事件的监听函数里面调用。该方法也可以直接调用，这时如果参数不为空字符串，浏览器就会认为该控件没有通过校验，就会立刻显示该方法设置的报错信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/* HTML 代码如下\n<form>\n  <p><input type=\"file\" id=\"fs\"></p>\n  <p><input type=\"submit\"></p>\n</form>\n*/\n\ndocument.getElementById('fs').onchange = checkFileSize;\n\nfunction checkFileSize() {\n  var fs = document.getElementById('fs');\n  var files = fs.files;\n  if (files.length > 0) {\n     if (files[0].size > 75 * 1024) {\n       fs.setCustomValidity('文件不能大于 75KB');\n       return;\n     }\n  }\n  fs.setCustomValidity('');\n}\n")])])]),t("p",[e._v("上面代码一旦发现文件大于 75KB，就会设置校验失败，同时给出自定义的报错信息。然后，点击提交按钮时，就会显示报错信息。这种校验失败是不会自动消除的，所以如果所有文件都符合条件，要将报错信息设为空字符串，手动消除校验失败的状态。")]),e._v(" "),t("h4",{attrs:{id:"validity-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validity-属性"}},[e._v("#")]),e._v(" validity 属性")]),e._v(" "),t("p",[e._v("控件元素的属性"),t("code",[e._v("validity")]),e._v("属性返回一个"),t("code",[e._v("ValidityState")]),e._v("对象，包含当前校验状态的信息。")]),e._v(" "),t("p",[e._v("该对象有以下属性，全部为只读属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValidityState.badInput")]),e._v("：布尔值，表示浏览器是否不能将用户的输入转换成正确的类型，比如用户在数值框里面输入字符串。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.customError")]),e._v("：布尔值，表示是否已经调用"),t("code",[e._v("setCustomValidity()")]),e._v("方法，将校验信息设置为一个非空字符串。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.patternMismatch")]),e._v("：布尔值，表示用户输入的值是否不满足模式的要求。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.rangeOverflow")]),e._v("：布尔值，表示用户输入的值是否大于最大范围。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.rangeUnderflow")]),e._v("：布尔值，表示用户输入的值是否小于最小范围。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.stepMismatch")]),e._v("：布尔值，表示用户输入的值不符合步长的设置（即不能被步长值整除）。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.tooLong")]),e._v("：布尔值，表示用户输入的字数超出了最长字数。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.tooShort")]),e._v("：布尔值，表示用户输入的字符少于最短字数。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.typeMismatch")]),e._v("：布尔值，表示用户填入的值不符合类型要求（主要是类型为 Email 或 URL 的情况）。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.valid")]),e._v("：布尔值，表示用户是否满足所有校验条件。")]),e._v(" "),t("li",[t("code",[e._v("ValidityState.valueMissing")]),e._v("：布尔值，表示用户没有填入必填的值。")])]),e._v(" "),t("p",[e._v("下面是一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var input = document.getElementById('myinput');\nif (input.validity.valid) {\n  console.log('通过校验');\n} else {\n  console.log('校验失败');\n}\n")])])]),t("p",[e._v("下面是另外一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var txt = '';\nif (document.getElementById('myInput').validity.rangeOverflow) {\n  txt = '数值超过上限';\n}\ndocument.getElementById('prompt').innerHTML = txt;\n")])])]),t("p",[e._v("如果想禁止浏览器弹出表单验证的报错信息，可以监听"),t("code",[e._v("invalid")]),e._v("事件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var input = document.getElementById('username');\nvar form  = document.getElementById('form');\n\nvar elem = document.createElement('div');\nelem.id  = 'notify';\nelem.style.display = 'none';\nform.appendChild(elem);\n\ninput.addEventListener('invalid', function (event) {\n  event.preventDefault();\n  if (!event.target.validity.valid) {\n    elem.textContent   = '用户名必须是小写字母';\n    elem.className     = 'error';\n    elem.style.display = 'block';\n    input.className    = 'invalid animated shake';\n  }\n});\n\ninput.addEventListener('input', function(event){\n  if ( 'block' === elem.style.display ) {\n    input.className = '';\n    elem.style.display = 'none';\n  }\n});\n")])])]),t("p",[e._v("上面代码中，一旦发生"),t("code",[e._v("invalid")]),e._v("事件（表单验证失败），"),t("code",[e._v("event.preventDefault()")]),e._v("用来禁止浏览器弹出默认的验证失败提示，然后设置定制的报错提示框。")]),e._v(" "),t("h4",{attrs:{id:"表单的-novalidate-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单的-novalidate-属性"}},[e._v("#")]),e._v(" 表单的 novalidate 属性")]),e._v(" "),t("p",[e._v("表单元素的 HTML 属性"),t("code",[e._v("novalidate")]),e._v("，可以关闭浏览器的自动校验。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<form novalidate>\n</form>\n")])])]),t("p",[e._v("这个属性也可以在脚本里设置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("form.noValidate = true;\n")])])]),t("p",[e._v("如果表单元素没有设置"),t("code",[e._v("novalidate")]),e._v("属性，那么提交按钮（"),t("code",[e._v("<button>")]),e._v("或"),t("code",[e._v("<input>")]),e._v("元素）的"),t("code",[e._v("formnovalidate")]),e._v("属性也有同样的作用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form>\n  <input type="submit" value="submit" formnovalidate>\n</form>\n')])])]),t("h3",{attrs:{id:"enctype-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enctype-属性"}},[e._v("#")]),e._v(" enctype 属性")]),e._v(" "),t("p",[e._v("表单能够用四种编码，向服务器发送数据。编码格式由表单的"),t("code",[e._v("enctype")]),e._v("属性决定。")]),e._v(" "),t("p",[e._v("假定表单有两个字段，分别是"),t("code",[e._v("foo")]),e._v("和"),t("code",[e._v("baz")]),e._v("，其中"),t("code",[e._v("foo")]),e._v("字段的值等于"),t("code",[e._v("bar")]),e._v("，"),t("code",[e._v("baz")]),e._v("字段的值是一个分为两行的字符串。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The first line.\nThe second line.\n")])])]),t("p",[e._v("下面四种格式，都可以将这个表单发送到服务器。")]),e._v(" "),t("p",[t("strong",[e._v("（1）GET 方法")])]),e._v(" "),t("p",[e._v("如果表单使用"),t("code",[e._v("GET")]),e._v("方法发送数据，"),t("code",[e._v("enctype")]),e._v("属性无效。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form\n  action="register.php"\n  method="get"\n  onsubmit="AJAXSubmit(this); return false;"\n>\n</form>\n')])])]),t("p",[e._v("数据将以 URL 的查询字符串发出。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("?foo=bar&baz=The%20first%20line.%0AThe%20second%20line.\n")])])]),t("p",[t("strong",[e._v("（2）application/x-www-form-urlencoded")])]),e._v(" "),t("p",[e._v("如果表单用"),t("code",[e._v("POST")]),e._v("方法发送数据，并省略"),t("code",[e._v("enctype")]),e._v("属性，那么数据以"),t("code",[e._v("application/x-www-form-urlencoded")]),e._v("格式发送（因为这是默认值）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form\n  action="register.php"\n  method="post"\n  onsubmit="AJAXSubmit(this); return false;"\n>\n</form>\n')])])]),t("p",[e._v("发送的 HTTP 请求如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Content-Type: application/x-www-form-urlencoded\n\nfoo=bar&baz=The+first+line.%0D%0AThe+second+line.%0D%0A\n")])])]),t("p",[e._v("上面代码中，数据体里面的"),t("code",[e._v("%0D%0A")]),e._v("代表换行符（"),t("code",[e._v("\\r\\n")]),e._v("）。")]),e._v(" "),t("p",[t("strong",[e._v("（3）text/plain")])]),e._v(" "),t("p",[e._v("如果表单使用"),t("code",[e._v("POST")]),e._v("方法发送数据，"),t("code",[e._v("enctype")]),e._v("属性为"),t("code",[e._v("text/plain")]),e._v("，那么数据将以纯文本格式发送。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form\n  action="register.php"\n  method="post"\n  enctype="text/plain"\n  onsubmit="AJAXSubmit(this); return false;"\n>\n</form>\n')])])]),t("p",[e._v("发送的 HTTP 请求如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Content-Type: text/plain\n\nfoo=bar\nbaz=The first line.\nThe second line.\n")])])]),t("p",[t("strong",[e._v("（4）multipart/form-data")])]),e._v(" "),t("p",[e._v("如果表单使用"),t("code",[e._v("POST")]),e._v("方法，"),t("code",[e._v("enctype")]),e._v("属性为"),t("code",[e._v("multipart/form-data")]),e._v("，那么数据将以混合的格式发送。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form\n  action="register.php"\n  method="post"\n  enctype="multipart/form-data"\n  onsubmit="AJAXSubmit(this); return false;"\n>\n</form>\n')])])]),t("p",[e._v("发送的 HTTP 请求如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Content-Type: multipart/form-data; boundary=---------------------------314911788813839\n\n-----------------------------314911788813839\nContent-Disposition: form-data; name="foo"\n\nbar\n-----------------------------314911788813839\nContent-Disposition: form-data; name="baz"\n\nThe first line.\nThe second line.\n\n-----------------------------314911788813839--\n')])])]),t("p",[e._v("这种格式也是文件上传的格式。")]),e._v(" "),t("h3",{attrs:{id:"文件上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件上传"}},[e._v("#")]),e._v(" 文件上传")]),e._v(" "),t("p",[e._v("用户上传文件，也是通过表单。具体来说，就是通过文件输入框选择本地文件，提交表单的时候，浏览器就会把这个文件发送到服务器。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<input type="file" id="file" name="myFile">\n')])])]),t("p",[e._v("此外，还需要将表单"),t("code",[e._v("<form>")]),e._v("元素的"),t("code",[e._v("method")]),e._v("属性设为"),t("code",[e._v("POST")]),e._v("，"),t("code",[e._v("enctype")]),e._v("属性设为"),t("code",[e._v("multipart/form-data")]),e._v("。其中，"),t("code",[e._v("enctype")]),e._v("属性决定了 HTTP 头信息的"),t("code",[e._v("Content-Type")]),e._v("字段的值，默认情况下这个字段的值是"),t("code",[e._v("application/x-www-form-urlencoded")]),e._v("，但是文件上传的时候要改成"),t("code",[e._v("multipart/form-data")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<form method="post" enctype="multipart/form-data">\n  <div>\n    <label for="file">选择一个文件</label>\n    <input type="file" id="file" name="myFile" multiple>\n  </div>\n  <div>\n    <input type="submit" id="submit" name="submit_button" value="上传" />\n  </div>\n</form>\n')])])]),t("p",[e._v("上面的 HTML 代码中，file 控件的"),t("code",[e._v("multiple")]),e._v("属性，指定可以一次选择多个文件；如果没有这个属性，则一次只能选择一个文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var fileSelect = document.getElementById('file');\nvar files = fileSelect.files;\n")])])]),t("p",[e._v("然后，新建一个 FormData 实例对象，模拟发送到服务器的表单数据，把选中的文件添加到这个对象上面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var formData = new FormData();\n\nfor (var i = 0; i < files.length; i++) {\n  var file = files[i];\n\n  // 只上传图片文件\n  if (!file.type.match('image.*')) {\n    continue;\n  }\n\n  formData.append('photos[]', file, file.name);\n}\n")])])]),t("p",[e._v("最后，使用 Ajax 向服务器上传文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var xhr = new XMLHttpRequest();\n\nxhr.open('POST', 'handler.php', true);\n\nxhr.onload = function () {\n  if (xhr.status !== 200) {\n    console.log('An error occurred!');\n  }\n};\n\nxhr.send(formData);\n")])])]),t("p",[e._v("除了发送 FormData 实例，也可以直接 AJAX 发送文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var file = document.getElementById('test-input').files[0];\nvar xhr = new XMLHttpRequest();\n\nxhr.open('POST', 'myserver/uploads');\nxhr.setRequestHeader('Content-Type', file.type);\nxhr.send(file);\n")])])]),t("h3",{attrs:{id:"参考链接-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-4"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://webdesign.tutsplus.com/tutorials/html5-form-validation-with-the-pattern-attribute--cms-25145",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML5 Form Validation With the “pattern” Attribute"),t("OutboundLink")],1),e._v(", Thoriq Firdaus")])]),e._v(" "),t("h2",{attrs:{id:"indexdb-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexdb-api"}},[e._v("#")]),e._v(" IndexDB API")]),e._v(" "),t("h3",{attrs:{id:"概述-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-5"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("随着浏览器的功能不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少从服务器获取数据，直接从本地获取数据。")]),e._v(" "),t("p",[e._v("现有的浏览器数据储存方案，都不适合储存大量数据：Cookie 的大小不超过 4KB，且每次请求都会发送回服务器；LocalStorage 在 2.5MB 到 10MB 之间（各家浏览器不同），而且不提供搜索功能，不能建立自定义的索引。所以，需要一种新的解决方案，这就是 IndexedDB 诞生的背景。")]),e._v(" "),t("p",[e._v("通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。")]),e._v(" "),t("p",[e._v("IndexedDB 具有以下特点。")]),e._v(" "),t("p",[t("strong",[e._v("（1）键值对储存。")]),e._v(" IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以“键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。")]),e._v(" "),t("p",[t("strong",[e._v("（2）异步。")]),e._v(" IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。")]),e._v(" "),t("p",[t("strong",[e._v("（3）支持事务。")]),e._v(" IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。")]),e._v(" "),t("p",[t("strong",[e._v("（4）同源限制。")]),e._v(" IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。")]),e._v(" "),t("p",[t("strong",[e._v("（5）储存空间大。")]),e._v(" IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。")]),e._v(" "),t("p",[t("strong",[e._v("（6）支持二进制储存。")]),e._v(" IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。")]),e._v(" "),t("h3",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),t("p",[e._v("IndexedDB 是一个比较复杂的 API，涉及不少概念。它把不同的实体，抽象成一个个对象接口。学习这个 API，就是学习它的各种对象接口。")]),e._v(" "),t("ul",[t("li",[e._v("数据库：IDBDatabase 对象")]),e._v(" "),t("li",[e._v("对象仓库：IDBObjectStore 对象")]),e._v(" "),t("li",[e._v("索引： IDBIndex 对象")]),e._v(" "),t("li",[e._v("事务： IDBTransaction 对象")]),e._v(" "),t("li",[e._v("操作请求：IDBRequest 对象")]),e._v(" "),t("li",[e._v("指针： IDBCursor 对象")]),e._v(" "),t("li",[e._v("主键集合：IDBKeyRange 对象")])]),e._v(" "),t("p",[e._v("下面是一些主要的概念。")]),e._v(" "),t("p",[t("strong",[e._v("（1）数据库")])]),e._v(" "),t("p",[e._v("数据库是一系列相关数据的容器。每个域名（严格的说，是协议 + 域名 + 端口）都可以新建任意多个数据库。")]),e._v(" "),t("p",[e._v("IndexedDB 数据库有版本的概念。同一个时刻，只能有一个版本的数据库存在。如果要修改数据库结构（新增或删除表、索引或者主键），只能通过升级数据库版本完成。")]),e._v(" "),t("p",[t("strong",[e._v("（2）对象仓库")])]),e._v(" "),t("p",[e._v("每个数据库包含若干个对象仓库（object store）。它类似于关系型数据库的表格。")]),e._v(" "),t("p",[t("strong",[e._v("（3）数据记录")])]),e._v(" "),t("p",[e._v("对象仓库保存的是数据记录。每条记录类似于关系型数据库的行，但是只有主键和数据体两部分。主键用来建立默认的索引，必须是不同的，否则会报错。主键可以是数据记录里面的一个属性，也可以指定为一个递增的整数编号。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{ id: 1, text: 'foo' }\n")])])]),t("p",[e._v("上面的对象中，"),t("code",[e._v("id")]),e._v("属性可以当作主键。")]),e._v(" "),t("p",[e._v("数据体可以是任意数据类型，不限于对象。")]),e._v(" "),t("p",[t("strong",[e._v("（4）索引")])]),e._v(" "),t("p",[e._v("为了加速数据的检索，可以在对象仓库里面，为不同的属性建立索引。")]),e._v(" "),t("p",[t("strong",[e._v("（5）事务")])]),e._v(" "),t("p",[e._v("数据记录的读写和删改，都要通过事务完成。事务对象提供"),t("code",[e._v("error")]),e._v("、"),t("code",[e._v("abort")]),e._v("和"),t("code",[e._v("complete")]),e._v("三个事件，用来监听操作结果。")]),e._v(" "),t("h3",{attrs:{id:"操作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作流程"}},[e._v("#")]),e._v(" 操作流程")]),e._v(" "),t("p",[e._v("IndexedDB 数据库的各种操作，一般是按照下面的流程进行的。这个部分只给出简单的代码示例，用于快速上手，详细的各个对象的 API 放在后文介绍。")]),e._v(" "),t("h4",{attrs:{id:"打开数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打开数据库"}},[e._v("#")]),e._v(" 打开数据库")]),e._v(" "),t("p",[e._v("使用 IndexedDB 的第一步是打开数据库，使用"),t("code",[e._v("indexedDB.open()")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var request = window.indexedDB.open(databaseName, version);\n")])])]),t("p",[e._v("这个方法接受两个参数，第一个参数是字符串，表示数据库的名字。如果指定的数据库不存在，就会新建数据库。第二个参数是整数，表示数据库的版本。如果省略，打开已有数据库时，默认为当前版本；新建数据库时，默认为"),t("code",[e._v("1")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("indexedDB.open()")]),e._v("方法返回一个 IDBRequest 对象。这个对象通过三种事件"),t("code",[e._v("error")]),e._v("、"),t("code",[e._v("success")]),e._v("、"),t("code",[e._v("upgradeneeded")]),e._v("，处理打开数据库的操作结果。")]),e._v(" "),t("p",[t("strong",[e._v("（1）error 事件")])]),e._v(" "),t("p",[t("code",[e._v("error")]),e._v("事件表示打开数据库失败。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("request.onerror = function (event) {\n  console.log('数据库打开报错');\n};\n")])])]),t("p",[t("strong",[e._v("（2）success 事件")])]),e._v(" "),t("p",[t("code",[e._v("success")]),e._v("事件表示成功打开数据库。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var db;\n\nrequest.onsuccess = function (event) {\n  db = request.result;\n  console.log('数据库打开成功');\n};\n")])])]),t("p",[e._v("这时，通过"),t("code",[e._v("request")]),e._v("对象的"),t("code",[e._v("result")]),e._v("属性拿到数据库对象。")]),e._v(" "),t("p",[t("strong",[e._v("（3）upgradeneeded 事件")])]),e._v(" "),t("p",[e._v("如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件"),t("code",[e._v("upgradeneeded")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var db;\n\nrequest.onupgradeneeded = function (event) {\n  db = event.target.result;\n}\n")])])]),t("p",[e._v("这时通过事件对象的"),t("code",[e._v("target.result")]),e._v("属性，拿到数据库实例。")]),e._v(" "),t("h4",{attrs:{id:"新建数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新建数据库"}},[e._v("#")]),e._v(" 新建数据库")]),e._v(" "),t("p",[e._v("新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在"),t("code",[e._v("upgradeneeded")]),e._v("事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。")]),e._v(" "),t("p",[e._v("通常，新建数据库以后，第一件事是新建对象仓库（即新建表）。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("request.onupgradeneeded = function(event) {\n  db = event.target.result;\n  var objectStore = db.createObjectStore('person', { keyPath: 'id' });\n}\n")])])]),t("p",[e._v("上面代码中，数据库新建成功以后，新增一张叫做"),t("code",[e._v("person")]),e._v("的表格，主键是"),t("code",[e._v("id")]),e._v("。")]),e._v(" "),t("p",[e._v("更好的写法是先判断一下，这张表格是否存在，如果不存在再新建。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("request.onupgradeneeded = function (event) {\n  db = event.target.result;\n  var objectStore;\n  if (!db.objectStoreNames.contains('person')) {\n    objectStore = db.createObjectStore('person', { keyPath: 'id' });\n  }\n}\n")])])]),t("p",[e._v("主键（key）是默认建立索引的属性。比如，数据记录是"),t("code",[e._v("{ id: 1, name: '张三' }")]),e._v("，那么"),t("code",[e._v("id")]),e._v("属性可以作为主键。主键也可以指定为下一层对象的属性，比如"),t("code",[e._v("{ foo: { bar: 'baz' } }")]),e._v("的"),t("code",[e._v("foo.bar")]),e._v("也可以指定为主键。")]),e._v(" "),t("p",[e._v("如果数据记录里面没有合适作为主键的属性，那么可以让 IndexedDB 自动生成主键。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var objectStore = db.createObjectStore(\n  'person',\n  { autoIncrement: true }\n);\n")])])]),t("p",[e._v("上面代码中，指定主键为一个递增的整数。")]),e._v(" "),t("p",[e._v("新建对象仓库以后，下一步可以新建索引。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("request.onupgradeneeded = function(event) {\n  db = event.target.result;\n  var objectStore = db.createObjectStore('person', { keyPath: 'id' });\n  objectStore.createIndex('name', 'name', { unique: false });\n  objectStore.createIndex('email', 'email', { unique: true });\n}\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("IDBObject.createIndex()")]),e._v("的三个参数分别为索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值）。")]),e._v(" "),t("h4",{attrs:{id:"新增数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新增数据"}},[e._v("#")]),e._v(" 新增数据")]),e._v(" "),t("p",[e._v("新增数据指的是向对象仓库写入数据记录。这需要通过事务完成。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function add() {\n  var request = db.transaction(['person'], 'readwrite')\n    .objectStore('person')\n    .add({ id: 1, name: '张三', age: 24, email: 'zhangsan@example.com' });\n\n  request.onsuccess = function (event) {\n    console.log('数据写入成功');\n  };\n\n  request.onerror = function (event) {\n    console.log('数据写入失败');\n  }\n}\n\nadd();\n")])])]),t("p",[e._v("上面代码中，写入数据需要新建一个事务。新建时必须指定表格名称和操作模式（“只读”或“读写”）。新建事务以后，通过"),t("code",[e._v("IDBTransaction.objectStore(name)")]),e._v("方法，拿到 IDBObjectStore 对象，再通过表格对象的"),t("code",[e._v("add()")]),e._v("方法，向表格写入一条记录。")]),e._v(" "),t("p",[e._v("写入操作是一个异步操作，通过监听连接对象的"),t("code",[e._v("success")]),e._v("事件和"),t("code",[e._v("error")]),e._v("事件，了解是否写入成功。")]),e._v(" "),t("h4",{attrs:{id:"读取数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读取数据"}},[e._v("#")]),e._v(" 读取数据")]),e._v(" "),t("p",[e._v("读取数据也是通过事务完成。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function read() {\n   var transaction = db.transaction(['person']);\n   var objectStore = transaction.objectStore('person');\n   var request = objectStore.get(1);\n\n   request.onerror = function(event) {\n     console.log('事务失败');\n   };\n\n   request.onsuccess = function( event) {\n      if (request.result) {\n        console.log('Name: ' + request.result.name);\n        console.log('Age: ' + request.result.age);\n        console.log('Email: ' + request.result.email);\n      } else {\n        console.log('未获得数据记录');\n      }\n   };\n}\n\nread();\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("objectStore.get()")]),e._v("方法用于读取数据，参数是主键的值。")]),e._v(" "),t("h4",{attrs:{id:"遍历数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历数据"}},[e._v("#")]),e._v(" 遍历数据")]),e._v(" "),t("p",[e._v("遍历数据表格的所有记录，要使用指针对象 IDBCursor。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function readAll() {\n  var objectStore = db.transaction('person').objectStore('person');\n\n   objectStore.openCursor().onsuccess = function (event) {\n     var cursor = event.target.result;\n\n     if (cursor) {\n       console.log('Id: ' + cursor.key);\n       console.log('Name: ' + cursor.value.name);\n       console.log('Age: ' + cursor.value.age);\n       console.log('Email: ' + cursor.value.email);\n       cursor.continue();\n    } else {\n      console.log('没有更多数据了！');\n    }\n  };\n}\n\nreadAll();\n")])])]),t("p",[e._v("上面代码中，新建指针对象的"),t("code",[e._v("openCursor()")]),e._v("方法是一个异步操作，所以要监听"),t("code",[e._v("success")]),e._v("事件。")]),e._v(" "),t("h4",{attrs:{id:"更新数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新数据"}},[e._v("#")]),e._v(" 更新数据")]),e._v(" "),t("p",[e._v("更新数据要使用"),t("code",[e._v("IDBObject.put()")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function update() {\n  var request = db.transaction(['person'], 'readwrite')\n    .objectStore('person')\n    .put({ id: 1, name: '李四', age: 35, email: 'lisi@example.com' });\n\n  request.onsuccess = function (event) {\n    console.log('数据更新成功');\n  };\n\n  request.onerror = function (event) {\n    console.log('数据更新失败');\n  }\n}\n\nupdate();\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("put()")]),e._v("方法自动更新了主键为"),t("code",[e._v("1")]),e._v("的记录。")]),e._v(" "),t("h4",{attrs:{id:"删除数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除数据"}},[e._v("#")]),e._v(" 删除数据")]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.delete()")]),e._v("方法用于删除记录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function remove() {\n  var request = db.transaction(['person'], 'readwrite')\n    .objectStore('person')\n    .delete(1);\n\n  request.onsuccess = function (event) {\n    console.log('数据删除成功');\n  };\n}\n\nremove();\n")])])]),t("h4",{attrs:{id:"使用索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用索引"}},[e._v("#")]),e._v(" 使用索引")]),e._v(" "),t("p",[e._v("索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。")]),e._v(" "),t("p",[e._v("假定新建表格的时候，对"),t("code",[e._v("name")]),e._v("字段建立了索引。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.createIndex('name', 'name', { unique: false });\n")])])]),t("p",[e._v("现在，就可以从"),t("code",[e._v("name")]),e._v("找到对应的数据记录了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var transaction = db.transaction(['person'], 'readonly');\nvar store = transaction.objectStore('person');\nvar index = store.index('name');\nvar request = index.get('李四');\n\nrequest.onsuccess = function (e) {\n  var result = e.target.result;\n  if (result) {\n    // ...\n  } else {\n    // ...\n  }\n}\n")])])]),t("h3",{attrs:{id:"indexeddb-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb-对象"}},[e._v("#")]),e._v(" indexedDB 对象")]),e._v(" "),t("p",[e._v("浏览器原生提供"),t("code",[e._v("indexedDB")]),e._v("对象，作为开发者的操作接口。")]),e._v(" "),t("h4",{attrs:{id:"indexeddb-open"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb-open"}},[e._v("#")]),e._v(" indexedDB.open()")]),e._v(" "),t("p",[t("code",[e._v("indexedDB.open()")]),e._v("方法用于打开数据库。这是一个异步操作，但是会立刻返回一个 IDBOpenDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var openRequest = window.indexedDB.open('test', 1);\n")])])]),t("p",[e._v("上面代码表示，打开一个名为"),t("code",[e._v("test")]),e._v("、版本为"),t("code",[e._v("1")]),e._v("的数据库。如果该数据库不存在，则会新建该数据库。")]),e._v(" "),t("p",[t("code",[e._v("open()")]),e._v("方法的第一个参数是数据库名称，格式为字符串，不可省略；第二个参数是数据库版本，是一个大于"),t("code",[e._v("0")]),e._v("的正整数（"),t("code",[e._v("0")]),e._v("将报错），如果该参数大于当前版本，会触发数据库升级。第二个参数可省略，如果数据库已存在，将打开当前版本的数据库；如果数据库不存在，将创建该版本的数据库，默认版本为"),t("code",[e._v("1")]),e._v("。")]),e._v(" "),t("p",[e._v("打开数据库是异步操作，通过各种事件通知客户端。下面是有可能触发的4种事件。")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("success")]),e._v("：打开成功。")]),e._v(" "),t("li",[t("strong",[e._v("error")]),e._v("：打开失败。")]),e._v(" "),t("li",[t("strong",[e._v("upgradeneeded")]),e._v("：第一次打开该数据库，或者数据库版本发生变化。")]),e._v(" "),t("li",[t("strong",[e._v("blocked")]),e._v("：上一次的数据库连接还未关闭。")])]),e._v(" "),t("p",[e._v("第一次打开数据库时，会先触发"),t("code",[e._v("upgradeneeded")]),e._v("事件，然后触发"),t("code",[e._v("success")]),e._v("事件。")]),e._v(" "),t("p",[e._v("根据不同的需要，对上面4种事件监听函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var openRequest = indexedDB.open('test', 1);\nvar db;\n\nopenRequest.onupgradeneeded = function (e) {\n  console.log('Upgrading...');\n}\n\nopenRequest.onsuccess = function (e) {\n  console.log('Success!');\n  db = openRequest.result;\n}\n\nopenRequest.onerror = function (e) {\n  console.log('Error');\n  console.log(e);\n}\n")])])]),t("p",[e._v("上面代码有两个地方需要注意。首先，"),t("code",[e._v("open()")]),e._v("方法返回的是一个对象（IDBOpenDBRequest），监听函数就定义在这个对象上面。其次，"),t("code",[e._v("success")]),e._v("事件发生后，从"),t("code",[e._v("openRequest.result")]),e._v("属性可以拿到已经打开的"),t("code",[e._v("IndexedDB")]),e._v("数据库对象。")]),e._v(" "),t("h3",{attrs:{id:"indexeddb-deletedatabase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb-deletedatabase"}},[e._v("#")]),e._v(" indexedDB.deleteDatabase()")]),e._v(" "),t("p",[t("code",[e._v("indexedDB.deleteDatabase()")]),e._v("方法用于删除一个数据库，参数为数据库的名字。它会立刻返回一个"),t("code",[e._v("IDBOpenDBRequest")]),e._v("对象，然后对数据库执行异步删除。删除操作的结果会通过事件通知，"),t("code",[e._v("IDBOpenDBRequest")]),e._v("对象可以监听以下事件。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("success")]),e._v("：删除成功")]),e._v(" "),t("li",[t("code",[e._v("error")]),e._v("：删除报错")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var DBDeleteRequest = window.indexedDB.deleteDatabase('demo');\n\nDBDeleteRequest.onerror = function (event) {\n  console.log('Error');\n};\n\nDBDeleteRequest.onsuccess = function (event) {\n  console.log('success');\n};\n")])])]),t("p",[e._v("调用"),t("code",[e._v("deleteDatabase()")]),e._v("方法以后，当前数据库的其他已经打开的连接都会接收到"),t("code",[e._v("versionchange")]),e._v("事件。")]),e._v(" "),t("p",[e._v("注意，删除不存在的数据库并不会报错。")]),e._v(" "),t("h3",{attrs:{id:"indexeddb-cmp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb-cmp"}},[e._v("#")]),e._v(" indexedDB.cmp()")]),e._v(" "),t("p",[t("code",[e._v("indexedDB.cmp()")]),e._v("方法比较两个值是否为 indexedDB 的相同的主键。它返回一个整数，表示比较的结果："),t("code",[e._v("0")]),e._v("表示相同，"),t("code",[e._v("1")]),e._v("表示第一个主键大于第二个主键，"),t("code",[e._v("-1")]),e._v("表示第一个主键小于第二个主键。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.indexedDB.cmp(1, 2) // -1\n")])])]),t("p",[e._v("注意，这个方法不能用来比较任意的 JavaScript 值。如果参数是布尔值或对象，它会报错。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.indexedDB.cmp(1, true) // 报错\nwindow.indexedDB.cmp({}, {}) // 报错\n")])])]),t("h2",{attrs:{id:"idbrequest-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbrequest-对象"}},[e._v("#")]),e._v(" IDBRequest 对象")]),e._v(" "),t("p",[e._v("IDBRequest 对象表示打开的数据库连接，"),t("code",[e._v("indexedDB.open()")]),e._v("方法和"),t("code",[e._v("indexedDB.deleteDatabase()")]),e._v("方法会返回这个对象。数据库的操作都是通过这个对象完成的。")]),e._v(" "),t("p",[e._v("这个对象的所有操作都是异步操作，要通过"),t("code",[e._v("readyState")]),e._v("属性判断是否完成，如果为"),t("code",[e._v("pending")]),e._v("就表示操作正在进行，如果为"),t("code",[e._v("done")]),e._v("就表示操作完成，可能成功也可能失败。")]),e._v(" "),t("p",[e._v("操作完成以后，触发"),t("code",[e._v("success")]),e._v("事件或"),t("code",[e._v("error")]),e._v("事件，这时可以通过"),t("code",[e._v("result")]),e._v("属性和"),t("code",[e._v("error")]),e._v("属性拿到操作结果。如果在"),t("code",[e._v("pending")]),e._v("阶段，就去读取这两个属性，是会报错的。")]),e._v(" "),t("p",[e._v("IDBRequest 对象有以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBRequest.readyState")]),e._v("：等于"),t("code",[e._v("pending")]),e._v("表示操作正在进行，等于"),t("code",[e._v("done")]),e._v("表示操作正在完成。")]),e._v(" "),t("li",[t("code",[e._v("IDBRequest.result")]),e._v("：返回请求的结果。如果请求失败、结果不可用，读取该属性会报错。")]),e._v(" "),t("li",[t("code",[e._v("IDBRequest.error")]),e._v("：请求失败时，返回错误对象。")]),e._v(" "),t("li",[t("code",[e._v("IDBRequest.source")]),e._v("：返回请求的来源（比如索引对象或 ObjectStore）。")]),e._v(" "),t("li",[t("code",[e._v("IDBRequest.transaction")]),e._v("：返回当前请求正在进行的事务，如果不包含事务，返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("IDBRequest.onsuccess")]),e._v("：指定"),t("code",[e._v("success")]),e._v("事件的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBRequest.onerror")]),e._v("：指定"),t("code",[e._v("error")]),e._v("事件的监听函数。")])]),e._v(" "),t("p",[e._v("IDBOpenDBRequest 对象继承了 IDBRequest 对象，提供了两个额外的事件监听属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBOpenDBRequest.onblocked")]),e._v("：指定"),t("code",[e._v("blocked")]),e._v("事件（"),t("code",[e._v("upgradeneeded")]),e._v("事件触发时，数据库仍然在使用）的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBOpenDBRequest.onupgradeneeded")]),e._v("："),t("code",[e._v("upgradeneeded")]),e._v("事件的监听函数。")])]),e._v(" "),t("h2",{attrs:{id:"idbdatabase-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbdatabase-对象"}},[e._v("#")]),e._v(" IDBDatabase 对象")]),e._v(" "),t("p",[e._v("打开数据成功以后，可以从"),t("code",[e._v("IDBOpenDBRequest")]),e._v("对象的"),t("code",[e._v("result")]),e._v("属性上面，拿到一个"),t("code",[e._v("IDBDatabase")]),e._v("对象，它表示连接的数据库。后面对数据库的操作，都通过这个对象完成。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var db;\nvar DBOpenRequest = window.indexedDB.open('demo', 1);\n\nDBOpenRequest.onerror = function (event) {\n  console.log('Error');\n};\n\nDBOpenRequest.onsuccess = function(event) {\n  db = DBOpenRequest.result;\n  // ...\n};\n")])])]),t("h3",{attrs:{id:"属性-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性-3"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("p",[e._v("IDBDatabase 对象有以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBDatabase.name")]),e._v("：字符串，数据库名称。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.version")]),e._v("：整数，数据库版本。数据库第一次创建时，该属性为空字符串。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.objectStoreNames")]),e._v("：DOMStringList 对象（字符串的集合），包含当前数据的所有 object store 的名字。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.onabort")]),e._v("：指定 abort 事件（事务中止）的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.onclose")]),e._v("：指定 close 事件（数据库意外关闭）的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.onerror")]),e._v("：指定 error 事件（访问数据库失败）的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.onversionchange")]),e._v("：数据库版本变化时触发（发生"),t("code",[e._v("upgradeneeded")]),e._v("事件，或调用"),t("code",[e._v("indexedDB.deleteDatabase()")]),e._v("）。")])]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("objectStoreNames")]),e._v("属性的例子。该属性返回一个 DOMStringList 对象，包含了当前数据库所有对象仓库的名称（即表名），可以使用 DOMStringList 对象的"),t("code",[e._v("contains")]),e._v("方法，检查数据库是否包含某个对象仓库。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (!db.objectStoreNames.contains('firstOS')) {\n  db.createObjectStore('firstOS');\n}\n")])])]),t("p",[e._v("上面代码先判断某个对象仓库是否存在，如果不存在就创建该对象仓库。")]),e._v(" "),t("h3",{attrs:{id:"方法-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法-3"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("p",[e._v("IDBDatabase 对象有以下方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBDatabase.close()")]),e._v("：关闭数据库连接，实际会等所有事务完成后再关闭。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.createObjectStore()")]),e._v("：创建存放数据的对象仓库，类似于传统关系型数据库的表格，返回一个 IDBObjectStore 对象。该方法只能在"),t("code",[e._v("versionchange")]),e._v("事件监听函数中调用。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.deleteObjectStore()")]),e._v("：删除指定的对象仓库。该方法只能在"),t("code",[e._v("versionchange")]),e._v("事件监听函数中调用。")]),e._v(" "),t("li",[t("code",[e._v("IDBDatabase.transaction()")]),e._v("：返回一个 IDBTransaction 事务对象。")])]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("createObjectStore()")]),e._v("方法的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var request = window.indexedDB.open('demo', 2);\n\nrequest.onupgradeneeded = function (event) {\n  var db = event.target.result;\n\n  db.onerror = function(event) {\n    console.log('error');\n  };\n\n  var objectStore = db.createObjectStore('items');\n\n  // ...\n};\n")])])]),t("p",[e._v("上面代码创建了一个名为"),t("code",[e._v("items")]),e._v("的对象仓库，如果该对象仓库已经存在，就会抛出一个错误。为了避免出错，需要用到下文的"),t("code",[e._v("objectStoreNames")]),e._v("属性，检查已有哪些对象仓库。")]),e._v(" "),t("p",[t("code",[e._v("createObjectStore()")]),e._v("方法还可以接受第二个对象参数，用来设置对象仓库的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("db.createObjectStore('test', { keyPath: 'email' });\ndb.createObjectStore('test2', { autoIncrement: true });\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("keyPath")]),e._v("属性表示主键（由于主键的值不能重复，所以上例存入之前，必须保证数据的"),t("code",[e._v("email")]),e._v("属性值都是不一样的），默认值为"),t("code",[e._v("null")]),e._v("；"),t("code",[e._v("autoIncrement")]),e._v("属性表示，是否使用自动递增的整数作为主键（第一个数据记录为1，第二个数据记录为2，以此类推），默认为"),t("code",[e._v("false")]),e._v("。一般来说，"),t("code",[e._v("keyPath")]),e._v("和"),t("code",[e._v("autoIncrement")]),e._v("属性只要使用一个就够了，如果两个同时使用，表示主键为递增的整数，且对象不得缺少"),t("code",[e._v("keyPath")]),e._v("指定的属性。")]),e._v(" "),t("p",[e._v("下面是"),t("code",[e._v("deleteObjectStore()")]),e._v("方法的例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var dbName = 'sampleDB';\nvar dbVersion = 2;\nvar request = indexedDB.open(dbName, dbVersion);\n\nrequest.onupgradeneeded = function(e) {\n  var db = request.result;\n  if (e.oldVersion < 1) {\n    db.createObjectStore('store1');\n  }\n\n  if (e.oldVersion < 2) {\n    db.deleteObjectStore('store1');\n    db.createObjectStore('store2');\n  }\n\n  // ...\n};\n")])])]),t("p",[e._v("下面是"),t("code",[e._v("transaction()")]),e._v("方法的例子，该方法用于创建一个数据库事务，返回一个 IDBTransaction 对象。向数据库添加数据之前，必须先创建数据库事务。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var t = db.transaction(['items'], 'readwrite');\n")])])]),t("p",[t("code",[e._v("transaction()")]),e._v("方法接受两个参数：第一个参数是一个数组，里面是所涉及的对象仓库，通常是只有一个；第二个参数是一个表示操作类型的字符串。目前，操作类型只有两种："),t("code",[e._v("readonly")]),e._v("（只读）和"),t("code",[e._v("readwrite")]),e._v("（读写）。添加数据使用"),t("code",[e._v("readwrite")]),e._v("，读取数据使用"),t("code",[e._v("readonly")]),e._v("。第二个参数是可选的，省略时默认为"),t("code",[e._v("readonly")]),e._v("模式。")]),e._v(" "),t("h2",{attrs:{id:"idbobjectstore-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbobjectstore-对象"}},[e._v("#")]),e._v(" IDBObjectStore 对象")]),e._v(" "),t("p",[e._v("IDBObjectStore 对象对应一个对象仓库（object store）。"),t("code",[e._v("IDBDatabase.createObjectStore()")]),e._v("方法返回的就是一个 IDBObjectStore 对象。")]),e._v(" "),t("p",[e._v("IDBDatabase 对象的"),t("code",[e._v("transaction()")]),e._v("返回一个事务对象，该对象的"),t("code",[e._v("objectStore()")]),e._v("方法返回 IDBObjectStore 对象，因此可以采用下面的链式写法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("db.transaction(['test'], 'readonly')\n  .objectStore('test')\n  .get(X)\n  .onsuccess = function (e) {}\n")])])]),t("h3",{attrs:{id:"属性-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性-4"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("p",[e._v("IDBObjectStore 对象有以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBObjectStore.indexNames")]),e._v("：返回一个类似数组的对象（DOMStringList），包含了当前对象仓库的所有索引。")]),e._v(" "),t("li",[t("code",[e._v("IDBObjectStore.keyPath")]),e._v("：返回当前对象仓库的主键。")]),e._v(" "),t("li",[t("code",[e._v("IDBObjectStore.name")]),e._v("：返回当前对象仓库的名称。")]),e._v(" "),t("li",[t("code",[e._v("IDBObjectStore.transaction")]),e._v("：返回当前对象仓库所属的事务对象。")]),e._v(" "),t("li",[t("code",[e._v("IDBObjectStore.autoIncrement")]),e._v("：布尔值，表示主键是否会自动递增。")])]),e._v(" "),t("h3",{attrs:{id:"方法-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法-4"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("p",[e._v("IDBObjectStore 对象有以下方法。")]),e._v(" "),t("p",[t("strong",[e._v("（1）IDBObjectStore.add()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.add()")]),e._v("用于向对象仓库添加数据，返回一个 IDBRequest 对象。该方法只用于添加数据，如果主键相同会报错，因此更新数据必须使用"),t("code",[e._v("put()")]),e._v("方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.add(value, key)\n")])])]),t("p",[e._v("该方法接受两个参数，第一个参数是键值，第二个参数是主键，该参数可选，如果省略默认为"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[e._v("创建事务以后，就可以获取对象仓库，然后使用"),t("code",[e._v("add()")]),e._v("方法往里面添加数据了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var db;\nvar DBOpenRequest = window.indexedDB.open('demo', 1);\n\nDBOpenRequest.onsuccess = function (event) {\n  db = DBOpenRequest.result;\n  var transaction = db.transaction(['items'], 'readwrite');\n\n  transaction.oncomplete = function (event) {\n    console.log('transaction success');\n  };\n\n  transaction.onerror = function (event) {\n    console.log('transaction error: ' + transaction.error);\n  };\n\n  var objectStore = transaction.objectStore('items');\n  var objectStoreRequest = objectStore.add({ foo: 1 });\n\n  objectStoreRequest.onsuccess = function (event) {\n    console.log('add data success');\n  };\n\n};\n")])])]),t("p",[t("strong",[e._v("（2）IDBObjectStore.put()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.put()")]),e._v("方法用于更新某个主键对应的数据记录，如果对应的键值不存在，则插入一条新的记录。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.put(item, key)\n")])])]),t("p",[e._v("该方法接受两个参数，第一个参数为新数据，第二个参数为主键，该参数可选，且只在自动递增时才有必要提供，因为那时主键不包含在数据值里面。")]),e._v(" "),t("p",[t("strong",[e._v("（3）IDBObjectStore.clear()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.clear()")]),e._v("删除当前对象仓库的所有记录。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.clear()\n")])])]),t("p",[e._v("该方法不需要参数。")]),e._v(" "),t("p",[t("strong",[e._v("（4）IDBObjectStore.delete()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.delete()")]),e._v("方法用于删除指定主键的记录。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.delete(Key)\n")])])]),t("p",[e._v("该方法的参数为主键的值。")]),e._v(" "),t("p",[t("strong",[e._v("（5）IDBObjectStore.count()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.count()")]),e._v("方法用于计算记录的数量。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("IDBObjectStore.count(key)\n")])])]),t("p",[e._v("不带参数时，该方法返回当前对象仓库的所有记录数量。如果主键或 IDBKeyRange 对象作为参数，则返回对应的记录数量。")]),e._v(" "),t("p",[t("strong",[e._v("（6）IDBObjectStore.getKey()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.getKey()")]),e._v("用于获取主键。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.getKey(key)\n")])])]),t("p",[e._v("该方法的参数可以是主键值或 IDBKeyRange 对象。")]),e._v(" "),t("p",[t("strong",[e._v("（7）IDBObjectStore.get()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.get()")]),e._v("用于获取主键对应的数据记录。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.get(key)\n")])])]),t("p",[t("strong",[e._v("（8）IDBObjectStore.getAll()")])]),e._v(" "),t("p",[t("code",[e._v("DBObjectStore.getAll()")]),e._v("用于获取对象仓库的记录。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 获取所有记录\nobjectStore.getAll()\n\n// 获取所有符合指定主键或 IDBKeyRange 的记录\nobjectStore.getAll(query)\n\n// 指定获取记录的数量\nobjectStore.getAll(query, count)\n")])])]),t("p",[t("strong",[e._v("（9）IDBObjectStore.getAllKeys()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.getAllKeys()")]),e._v("用于获取所有符合条件的主键。该方法返回一个 IDBRequest 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 获取所有记录的主键\nobjectStore.getAllKeys()\n\n// 获取所有符合条件的主键\nobjectStore.getAllKeys(query)\n\n// 指定获取主键的数量\nobjectStore.getAllKeys(query, count)\n")])])]),t("p",[t("strong",[e._v("（10）IDBObjectStore.index()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.index()")]),e._v("方法返回指定名称的索引对象 IDBIndex。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.index(name)\n")])])]),t("p",[e._v("有了索引以后，就可以针对索引所在的属性读取数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var t = db.transaction(['people'], 'readonly');\nvar store = t.objectStore('people');\nvar index = store.index('name');\n\nvar request = index.get('foo');\n")])])]),t("p",[e._v("上面代码打开对象仓库以后，先用"),t("code",[e._v("index()")]),e._v("方法指定获取"),t("code",[e._v("name")]),e._v("属性的索引，然后用"),t("code",[e._v("get()")]),e._v("方法读取某个"),t("code",[e._v("name")]),e._v("属性("),t("code",[e._v("foo")]),e._v(")对应的数据。如果"),t("code",[e._v("name")]),e._v("属性不是对应唯一值，这时"),t("code",[e._v("get()")]),e._v("方法有可能取回多个数据对象。另外，"),t("code",[e._v("get()")]),e._v("是异步方法，读取成功以后，只能在"),t("code",[e._v("success")]),e._v("事件的监听函数中处理数据。")]),e._v(" "),t("p",[t("strong",[e._v("（11）IDBObjectStore.createIndex()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.createIndex()")]),e._v("方法用于新建当前数据库的一个索引。该方法只能在"),t("code",[e._v("VersionChange")]),e._v("监听函数里面调用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.createIndex(indexName, keyPath, objectParameters)\n")])])]),t("p",[e._v("该方法可以接受三个参数。")]),e._v(" "),t("ul",[t("li",[e._v("indexName：索引名")]),e._v(" "),t("li",[e._v("keyPath：主键")]),e._v(" "),t("li",[e._v("objectParameters：配置对象（可选）")])]),e._v(" "),t("p",[e._v("第三个参数可以配置以下属性。")]),e._v(" "),t("ul",[t("li",[e._v("unique：如果设为"),t("code",[e._v("true")]),e._v("，将不允许重复的值")]),e._v(" "),t("li",[e._v("multiEntry：如果设为"),t("code",[e._v("true")]),e._v("，对于有多个值的主键数组，每个值将在索引里面新建一个条目，否则主键数组对应一个条目。")])]),e._v(" "),t("p",[e._v("假定对象仓库中的数据记录都是如下的"),t("code",[e._v("person")]),e._v("类型。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var person = {\n  name: name,\n  email: email,\n  created: new Date()\n};\n")])])]),t("p",[e._v("可以指定这个对象的某个属性来建立索引。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var store = db.createObjectStore('people', { autoIncrement: true });\n\nstore.createIndex('name', 'name', { unique: false });\nstore.createIndex('email', 'email', { unique: true });\n")])])]),t("p",[e._v("上面代码告诉索引对象，"),t("code",[e._v("name")]),e._v("属性不是唯一值，"),t("code",[e._v("email")]),e._v("属性是唯一值。")]),e._v(" "),t("p",[t("strong",[e._v("（12）IDBObjectStore.deleteIndex()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.deleteIndex()")]),e._v("方法用于删除指定的索引。该方法只能在"),t("code",[e._v("VersionChange")]),e._v("监听函数里面调用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("objectStore.deleteIndex(indexName)\n")])])]),t("p",[t("strong",[e._v("（13）IDBObjectStore.openCursor()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.openCursor()")]),e._v("用于获取一个指针对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("IDBObjectStore.openCursor()\n")])])]),t("p",[e._v("指针对象可以用来遍历数据。该对象也是异步的，有自己的"),t("code",[e._v("success")]),e._v("和"),t("code",[e._v("error")]),e._v("事件，可以对它们指定监听函数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var t = db.transaction(['test'], 'readonly');\nvar store = t.objectStore('test');\n\nvar cursor = store.openCursor();\n\ncursor.onsuccess = function (event) {\n  var res = event.target.result;\n  if (res) {\n    console.log('Key', res.key);\n    console.dir('Data', res.value);\n    res.continue();\n  }\n}\n")])])]),t("p",[e._v("监听函数接受一个事件对象作为参数，该对象的"),t("code",[e._v("target.result")]),e._v("属性指向当前数据记录。该记录的"),t("code",[e._v("key")]),e._v("和"),t("code",[e._v("value")]),e._v("分别返回主键和键值（即实际存入的数据）。"),t("code",[e._v("continue()")]),e._v("方法将光标移到下一个数据对象，如果当前数据对象已经是最后一个数据了，则光标指向"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("openCursor()")]),e._v("方法的第一个参数是主键值，或者一个 IDBKeyRange 对象。如果指定该参数，将只处理包含指定主键的记录；如果省略，将处理所有的记录。该方法还可以接受第二个参数，表示遍历方向，默认值为"),t("code",[e._v("next")]),e._v("，其他可能的值为"),t("code",[e._v("prev")]),e._v("、"),t("code",[e._v("nextunique")]),e._v("和"),t("code",[e._v("prevunique")]),e._v("。后两个值表示如果遇到重复值，会自动跳过。")]),e._v(" "),t("p",[t("strong",[e._v("（14）IDBObjectStore.openKeyCursor()")])]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.openKeyCursor()")]),e._v("用于获取一个主键指针对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("IDBObjectStore.openKeyCursor()\n")])])]),t("h2",{attrs:{id:"idbtransaction-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbtransaction-对象"}},[e._v("#")]),e._v(" IDBTransaction 对象")]),e._v(" "),t("p",[e._v("IDBTransaction 对象用来异步操作数据库事务，所有的读写操作都要通过这个对象进行。")]),e._v(" "),t("p",[t("code",[e._v("IDBDatabase.transaction()")]),e._v("方法返回的就是一个 IDBTransaction 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var db;\nvar DBOpenRequest = window.indexedDB.open('demo', 1);\n\nDBOpenRequest.onsuccess = function(event) {\n  db = DBOpenRequest.result;\n  var transaction = db.transaction(['demo'], 'readwrite');\n\n  transaction.oncomplete = function (event) {\n    console.log('transaction success');\n  };\n\n  transaction.onerror = function (event) {\n    console.log('transaction error: ' + transaction.error);\n  };\n\n  var objectStore = transaction.objectStore('demo');\n  var objectStoreRequest = objectStore.add({ foo: 1 });\n\n  objectStoreRequest.onsuccess = function (event) {\n    console.log('add data success');\n  };\n\n};\n")])])]),t("p",[e._v("事务的执行顺序是按照创建的顺序，而不是发出请求的顺序。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var trans1 = db.transaction('foo', 'readwrite');\nvar trans2 = db.transaction('foo', 'readwrite');\nvar objectStore2 = trans2.objectStore('foo')\nvar objectStore1 = trans1.objectStore('foo')\nobjectStore2.put('2', 'key');\nobjectStore1.put('1', 'key');\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("key")]),e._v("对应的键值最终是"),t("code",[e._v("2")]),e._v("，而不是"),t("code",[e._v("1")]),e._v("。因为事务"),t("code",[e._v("trans1")]),e._v("先于"),t("code",[e._v("trans2")]),e._v("创建，所以首先执行。")]),e._v(" "),t("p",[e._v("注意，事务有可能失败，只有监听到事务的"),t("code",[e._v("complete")]),e._v("事件，才能保证事务操作成功。")]),e._v(" "),t("p",[e._v("IDBTransaction 对象有以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBTransaction.db")]),e._v("：返回当前事务所在的数据库对象 IDBDatabase。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.error")]),e._v("：返回当前事务的错误。如果事务没有结束，或者事务成功结束，或者被手动终止，该方法返回"),t("code",[e._v("null")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.mode")]),e._v("：返回当前事务的模式，默认是"),t("code",[e._v("readonly")]),e._v("（只读），另一个值是"),t("code",[e._v("readwrite")]),e._v("。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.objectStoreNames")]),e._v("：返回一个类似数组的对象 DOMStringList，成员是当前事务涉及的对象仓库的名字。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.onabort")]),e._v("：指定"),t("code",[e._v("abort")]),e._v("事件（事务中断）的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.oncomplete")]),e._v("：指定"),t("code",[e._v("complete")]),e._v("事件（事务成功）的监听函数。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.onerror")]),e._v("：指定"),t("code",[e._v("error")]),e._v("事件（事务失败）的监听函数。")])]),e._v(" "),t("p",[e._v("IDBTransaction 对象有以下方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBTransaction.abort()")]),e._v("：终止当前事务，回滚所有已经进行的变更。")]),e._v(" "),t("li",[t("code",[e._v("IDBTransaction.objectStore(name)")]),e._v("：返回指定名称的对象仓库 IDBObjectStore。")])]),e._v(" "),t("h2",{attrs:{id:"idbindex-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbindex-对象"}},[e._v("#")]),e._v(" IDBIndex 对象")]),e._v(" "),t("p",[e._v("IDBIndex 对象代表数据库的索引，通过这个对象可以获取数据库里面的记录。数据记录的主键默认就是带有索引，IDBIndex 对象主要用于通过除主键以外的其他键，建立索引获取对象。")]),e._v(" "),t("p",[e._v("IDBIndex 是持久性的键值对存储。只要插入、更新或删除数据记录，引用的对象库中的记录，索引就会自动更新。")]),e._v(" "),t("p",[t("code",[e._v("IDBObjectStore.index()")]),e._v("方法可以获取 IDBIndex 对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var transaction = db.transaction(['contactsList'], 'readonly');\nvar objectStore = transaction.objectStore('contactsList');\nvar myIndex = objectStore.index('lName');\n\nmyIndex.openCursor().onsuccess = function (event) {\n  var cursor = event.target.result;\n  if (cursor) {\n    var tableRow = document.createElement('tr');\n    tableRow.innerHTML =   '<td>' + cursor.value.id + '</td>'\n                         + '<td>' + cursor.value.lName + '</td>'\n                         + '<td>' + cursor.value.fName + '</td>'\n                         + '<td>' + cursor.value.jTitle + '</td>'\n                         + '<td>' + cursor.value.company + '</td>'\n                         + '<td>' + cursor.value.eMail + '</td>'\n                         + '<td>' + cursor.value.phone + '</td>'\n                         + '<td>' + cursor.value.age + '</td>';\n    tableEntry.appendChild(tableRow);\n\n    cursor.continue();\n  } else {\n    console.log('Entries all displayed.');\n  }\n};\n")])])]),t("p",[e._v("IDBIndex 对象有以下属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBIndex.name")]),e._v("：字符串，索引的名称。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.objectStore")]),e._v("：索引所在的对象仓库。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.keyPath")]),e._v("：索引的主键。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.multiEntry")]),e._v("：布尔值，针对"),t("code",[e._v("keyPath")]),e._v("为数组的情况，如果设为"),t("code",[e._v("true")]),e._v("，创建数组时，每个数组成员都会有一个条目，否则每个数组都只有一个条目。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.unique")]),e._v("：布尔值，表示创建索引时是否允许相同的主键。")])]),e._v(" "),t("p",[e._v("IDBIndex 对象有以下方法，它们都是异步的，立即返回的都是一个 IDBRequest 对象。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBIndex.count()")]),e._v("：用来获取记录的数量。它可以接受主键或 IDBKeyRange 对象作为参数，这时只返回符合主键的记录数量，否则返回所有记录的数量。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.get(key)")]),e._v("：用来获取符合指定主键的数据记录。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.getKey(key)")]),e._v("：用来获取指定的主键。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.getAll()")]),e._v("：用来获取所有的数据记录。它可以接受两个参数，都是可选的，第一个参数用来指定主键，第二个参数用来指定返回记录的数量。如果省略这两个参数，则返回所有记录。由于获取成功时，浏览器必须生成所有对象，所以对性能有影响。如果数据集比较大，建议使用 IDBCursor 对象。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.getAllKeys()")]),e._v("：该方法与"),t("code",[e._v("IDBIndex.getAll()")]),e._v("方法相似，区别是获取所有主键。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.openCursor()")]),e._v("：用来获取一个 IDBCursor 对象，用来遍历索引里面的所有条目。")]),e._v(" "),t("li",[t("code",[e._v("IDBIndex.openKeyCursor()")]),e._v("：该方法与"),t("code",[e._v("IDBIndex.openCursor()")]),e._v("方法相似，区别是遍历所有条目的主键。")])]),e._v(" "),t("h2",{attrs:{id:"idbcursor-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbcursor-对象"}},[e._v("#")]),e._v(" IDBCursor 对象")]),e._v(" "),t("p",[e._v("IDBCursor 对象代表指针对象，用来遍历数据仓库（IDBObjectStore）或索引（IDBIndex）的记录。")]),e._v(" "),t("p",[e._v("IDBCursor 对象一般通过"),t("code",[e._v("IDBObjectStore.openCursor()")]),e._v("方法获得。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var transaction = db.transaction(['rushAlbumList'], 'readonly');\nvar objectStore = transaction.objectStore('rushAlbumList');\n\nobjectStore.openCursor(null, 'next').onsuccess = function(event) {\n  var cursor = event.target.result;\n  if (cursor) {\n    var listItem = document.createElement('li');\n    listItem.innerHTML = cursor.value.albumTitle + ', ' + cursor.value.year;\n    list.appendChild(listItem);\n\n    console.log(cursor.source);\n    cursor.continue();\n  } else {\n    console.log('Entries all displayed.');\n  }\n};\n")])])]),t("p",[e._v("IDBCursor 对象的属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBCursor.source")]),e._v("：返回正在遍历的对象仓库或索引。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.direction")]),e._v("：字符串，表示指针遍历的方向。共有四个可能的值：next（从头开始向后遍历）、nextunique（从头开始向后遍历，重复的值只遍历一次）、prev（从尾部开始向前遍历）、prevunique（从尾部开始向前遍历，重复的值只遍历一次）。该属性通过"),t("code",[e._v("IDBObjectStore.openCursor()")]),e._v("方法的第二个参数指定，一旦指定就不能改变了。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.key")]),e._v("：返回当前记录的主键。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.value")]),e._v("：返回当前记录的数据值。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.primaryKey")]),e._v("：返回当前记录的主键。对于数据仓库（objectStore）来说，这个属性等同于 IDBCursor.key；对于索引，IDBCursor.key 返回索引的位置值，该属性返回数据记录的主键。")])]),e._v(" "),t("p",[e._v("IDBCursor 对象有如下方法。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBCursor.advance(n)")]),e._v("：指针向前移动 n 个位置。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.continue()")]),e._v("：指针向前移动一个位置。它可以接受一个主键作为参数，这时会跳转到这个主键。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.continuePrimaryKey()")]),e._v("：该方法需要两个参数，第一个是"),t("code",[e._v("key")]),e._v("，第二个是"),t("code",[e._v("primaryKey")]),e._v("，将指针移到符合这两个参数的位置。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.delete()")]),e._v("：用来删除当前位置的记录，返回一个 IDBRequest 对象。该方法不会改变指针的位置。")]),e._v(" "),t("li",[t("code",[e._v("IDBCursor.update()")]),e._v("：用来更新当前位置的记录，返回一个 IDBRequest 对象。它的参数是要写入数据库的新的值。")])]),e._v(" "),t("h2",{attrs:{id:"idbkeyrange-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idbkeyrange-对象"}},[e._v("#")]),e._v(" IDBKeyRange 对象")]),e._v(" "),t("p",[e._v("IDBKeyRange 对象代表数据仓库（object store）里面的一组主键。根据这组主键，可以获取数据仓库或索引里面的一组记录。")]),e._v(" "),t("p",[e._v("IDBKeyRange 可以只包含一个值，也可以指定上限和下限。它有四个静态方法，用来指定主键的范围。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBKeyRange.lowerBound()")]),e._v("：指定下限。")]),e._v(" "),t("li",[t("code",[e._v("IDBKeyRange.upperBound()")]),e._v("：指定上限。")]),e._v(" "),t("li",[t("code",[e._v("IDBKeyRange.bound()")]),e._v("：同时指定上下限。")]),e._v(" "),t("li",[t("code",[e._v("IDBKeyRange.only()")]),e._v("：指定只包含一个值。")])]),e._v(" "),t("p",[e._v("下面是一些代码实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// All keys ≤ x\nvar r1 = IDBKeyRange.upperBound(x);\n\n// All keys < x\nvar r2 = IDBKeyRange.upperBound(x, true);\n\n// All keys ≥ y\nvar r3 = IDBKeyRange.lowerBound(y);\n\n// All keys > y\nvar r4 = IDBKeyRange.lowerBound(y, true);\n\n// All keys ≥ x && ≤ y\nvar r5 = IDBKeyRange.bound(x, y);\n\n// All keys > x &&< y\nvar r6 = IDBKeyRange.bound(x, y, true, true);\n\n// All keys > x && ≤ y\nvar r7 = IDBKeyRange.bound(x, y, true, false);\n\n// All keys ≥ x &&< y\nvar r8 = IDBKeyRange.bound(x, y, false, true);\n\n// The key = z\nvar r9 = IDBKeyRange.only(z);\n")])])]),t("p",[t("code",[e._v("IDBKeyRange.lowerBound()")]),e._v("、"),t("code",[e._v("IDBKeyRange.upperBound()")]),e._v("、"),t("code",[e._v("IDBKeyRange.bound()")]),e._v("这三个方法默认包括端点值，可以传入一个布尔值，修改这个属性。")]),e._v(" "),t("p",[e._v("与之对应，IDBKeyRange 对象有四个只读属性。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("IDBKeyRange.lower")]),e._v("：返回下限")]),e._v(" "),t("li",[t("code",[e._v("IDBKeyRange.lowerOpen")]),e._v("：布尔值，表示下限是否为开区间（即下限是否排除在范围之外）")]),e._v(" "),t("li",[t("code",[e._v("IDBKeyRange.upper")]),e._v("：返回上限")]),e._v(" "),t("li",[t("code",[e._v("IDBKeyRange.upperOpen")]),e._v("：布尔值，表示上限是否为开区间（即上限是否排除在范围之外）")])]),e._v(" "),t("p",[e._v("IDBKeyRange 实例对象生成以后，将它作为参数输入 IDBObjectStore 或 IDBIndex 对象的"),t("code",[e._v("openCursor()")]),e._v("方法，就可以在所设定的范围内读取数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var t = db.transaction(['people'], 'readonly');\nvar store = t.objectStore('people');\nvar index = store.index('name');\n\nvar range = IDBKeyRange.bound('B', 'D');\n\nindex.openCursor(range).onsuccess = function (e) {\n  var cursor = e.target.result;\n  if (cursor) {\n    console.log(cursor.key + ':');\n\n    for (var field in cursor.value) {\n      console.log(cursor.value[field]);\n    }\n    cursor.continue();\n  }\n}\n")])])]),t("p",[e._v("IDBKeyRange 有一个实例方法"),t("code",[e._v("includes(key)")]),e._v("，返回一个布尔值，表示某个主键是否包含在当前这个主键组之内。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var keyRangeValue = IDBKeyRange.bound('A', 'K', false, false);\n\nkeyRangeValue.includes('F') // true\nkeyRangeValue.includes('W') // false\n")])])]),t("h2",{attrs:{id:"参考链接-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接-5"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),t("ul",[t("li",[e._v("Raymond Camden, "),t("a",{attrs:{href:"http://net.tutsplus.com/tutorials/javascript-ajax/working-with-indexeddb/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Working With IndexedDB – Part 1"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Raymond Camden, "),t("a",{attrs:{href:"http://net.tutsplus.com/tutorials/javascript-ajax/working-with-indexeddb-part-2/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Working With IndexedDB – Part 2"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Raymond Camden, "),t("a",{attrs:{href:"https://code.tutsplus.com/tutorials/working-with-indexeddb-part-3--net-36220",target:"_blank",rel:"noopener noreferrer"}},[e._v("Working With IndexedDB - Part 3"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Tiffany Brown, "),t("a",{attrs:{href:"https://dev.opera.com/articles/introduction-to-indexeddb/",target:"_blank",rel:"noopener noreferrer"}},[e._v("An Introduction to IndexedDB"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("David Fahlander, "),t("a",{attrs:{href:"https://hacks.mozilla.org/2014/06/breaking-the-borders-of-indexeddb/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Breaking the Borders of IndexedDB"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("TutorialsPoint, "),t("a",{attrs:{href:"https://www.tutorialspoint.com/html5/html5_indexeddb.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML5 - IndexedDB"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"web-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[e._v("#")]),e._v(" Web Worker")]),e._v(" "),t("h2",{attrs:{id:"概述-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述-6"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("p",[e._v("JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。")]),e._v(" "),t("p",[e._v("Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务可以交由 Worker 线程执行，主线程（通常负责 UI 交互）能够保持流畅，不会被阻塞或拖慢。")]),e._v(" "),t("p",[e._v("Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。")]),e._v(" "),t("p",[e._v("Web Worker 有以下几个使用注意点。")]),e._v(" "),t("p",[e._v("（1）"),t("strong",[e._v("同源限制")])]),e._v(" "),t("p",[e._v("分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。")]),e._v(" "),t("p",[e._v("（2）"),t("strong",[e._v("DOM 限制")])]),e._v(" "),t("p",[e._v("Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用"),t("code",[e._v("document")]),e._v("、"),t("code",[e._v("window")]),e._v("、"),t("code",[e._v("parent")]),e._v("这些对象。但是，Worker 线程可以使用"),t("code",[e._v("navigator")]),e._v("对象和"),t("code",[e._v("location")]),e._v("对象。")]),e._v(" "),t("p",[e._v("（3）"),t("strong",[e._v("全局对象限制")])]),e._v(" "),t("p",[e._v("Worker 的全局对象"),t("code",[e._v("WorkerGlobalScope")]),e._v("，不同于网页的全局对象"),t("code",[e._v("Window")]),e._v("，很多接口拿不到。比如，理论上 Worker 线程不能使用"),t("code",[e._v("console.log")]),e._v("，因为标准里面没有提到 Worker 的全局对象存在"),t("code",[e._v("console")]),e._v("接口，只定义了"),t("code",[e._v("Navigator")]),e._v("接口和"),t("code",[e._v("Location")]),e._v("接口。不过，浏览器实际上支持 Worker 线程使用"),t("code",[e._v("console.log")]),e._v("，保险的做法还是不使用这个方法。")]),e._v(" "),t("p",[e._v("（4）"),t("strong",[e._v("通信联系")])]),e._v(" "),t("p",[e._v("Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。")]),e._v(" "),t("p",[e._v("（5）"),t("strong",[e._v("脚本限制")])]),e._v(" "),t("p",[e._v("Worker 线程不能执行"),t("code",[e._v("alert()")]),e._v("方法和"),t("code",[e._v("confirm()")]),e._v("方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。")]),e._v(" "),t("p",[e._v("（6）"),t("strong",[e._v("文件限制")])]),e._v(" "),t("p",[e._v("Worker 线程无法读取本地文件，即不能打开本机的文件系统（"),t("code",[e._v("file://")]),e._v("），它所加载的脚本，必须来自网络。")]),e._v(" "),t("h2",{attrs:{id:"基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),t("h3",{attrs:{id:"主线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主线程"}},[e._v("#")]),e._v(" 主线程")]),e._v(" "),t("p",[e._v("主线程采用"),t("code",[e._v("new")]),e._v("命令，调用"),t("code",[e._v("Worker()")]),e._v("构造函数，新建一个 Worker 线程。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var worker = new Worker('work.js');\n")])])]),t("p",[t("code",[e._v("Worker()")]),e._v("构造函数的参数是一个脚本文件，该文件就是 Worker 线程所要执行的任务。由于 Worker 不能读取本地文件，所以这个脚本必须来自网络。如果下载没有成功（比如404错误），Worker 就会默默地失败。")]),e._v(" "),t("p",[e._v("然后，主线程调用"),t("code",[e._v("worker.postMessage()")]),e._v("方法，向 Worker 发消息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("worker.postMessage('Hello World');\nworker.postMessage({method: 'echo', args: ['Work']});\n")])])]),t("p",[t("code",[e._v("worker.postMessage()")]),e._v("方法的参数，就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。")]),e._v(" "),t("p",[e._v("接着，主线程通过"),t("code",[e._v("worker.onmessage")]),e._v("指定监听函数，接收子线程发回来的消息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("worker.onmessage = function (event) {\n  doSomething(event.data);\n}\n\nfunction doSomething() {\n  // 执行任务\n  worker.postMessage('Work done!');\n}\n")])])]),t("p",[e._v("上面代码中，事件对象的"),t("code",[e._v("data")]),e._v("属性可以获取 Worker 发来的数据。")]),e._v(" "),t("p",[e._v("Worker 完成任务以后，主线程就可以把它关掉。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("worker.terminate();\n")])])]),t("h3",{attrs:{id:"worker-线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#worker-线程"}},[e._v("#")]),e._v(" Worker 线程")]),e._v(" "),t("p",[e._v("Worker 线程内部需要有一个监听函数，监听"),t("code",[e._v("message")]),e._v("事件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("self.addEventListener('message', function (e) {\n  self.postMessage('You said: ' + e.data);\n}, false);\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("self")]),e._v("代表子线程自身，即子线程的全局对象。因此，等同于下面两种写法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 写法一\nthis.addEventListener('message', function (e) {\n  this.postMessage('You said: ' + e.data);\n}, false);\n\n// 写法二\naddEventListener('message', function (e) {\n  postMessage('You said: ' + e.data);\n}, false);\n")])])]),t("p",[e._v("除了使用"),t("code",[e._v("self.addEventListener()")]),e._v("指定监听函数，也可以使用"),t("code",[e._v("self.onmessage")]),e._v("指定。监听函数的参数是一个事件对象，它的"),t("code",[e._v("data")]),e._v("属性包含主线程发来的数据。"),t("code",[e._v("self.postMessage()")]),e._v("方法用来向主线程发送消息。")]),e._v(" "),t("p",[e._v("根据主线程发来的数据，Worker 线程可以调用不同的方法，下面是一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("self.addEventListener('message', function (e) {\n  var data = e.data;\n  switch (data.cmd) {\n    case 'start':\n      self.postMessage('WORKER STARTED: ' + data.msg);\n      break;\n    case 'stop':\n      self.postMessage('WORKER STOPPED: ' + data.msg);\n      self.close(); // Terminates the worker.\n      break;\n    default:\n      self.postMessage('Unknown command: ' + data.msg);\n  };\n}, false);\n")])])]),t("p",[e._v("上面代码中，"),t("code",[e._v("self.close()")]),e._v("用于在 Worker 内部关闭自身。")]),e._v(" "),t("h3",{attrs:{id:"worker-加载脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#worker-加载脚本"}},[e._v("#")]),e._v(" Worker 加载脚本")]),e._v(" "),t("p",[e._v("Worker 内部如果要加载其他脚本，有一个专门的方法"),t("code",[e._v("importScripts()")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("importScripts('script1.js');\n")])])]),t("p",[e._v("该方法可以同时加载多个脚本。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("importScripts('script1.js', 'script2.js');\n")])])]),t("h3",{attrs:{id:"错误处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[e._v("#")]),e._v(" 错误处理")]),e._v(" "),t("p",[e._v("主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的"),t("code",[e._v("error")]),e._v("事件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("worker.onerror = function (event) {\n  console.log(\n    'ERROR: Line ', event.lineno, ' in ', event.filename, ': ', event.message\n  );\n};\n\n// 或者\nworker.addEventListener('error', function (event) {\n  // ...\n});\n")])])]),t("p",[e._v("Worker 内部也可以监听"),t("code",[e._v("error")]),e._v("事件。")]),e._v(" "),t("h3",{attrs:{id:"关闭-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关闭-worker"}},[e._v("#")]),e._v(" 关闭 Worker")]),e._v(" "),t("p",[e._v("使用完毕，为了节省系统资源，必须关闭 Worker。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 主线程\nworker.terminate();\n\n// Worker 线程\nself.close();\n")])])]),t("h2",{attrs:{id:"数据通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据通信"}},[e._v("#")]),e._v(" 数据通信")]),e._v(" "),t("p",[e._v("前面说过，主线程与 Worker 之间的通信内容，可以是文本，也可以是对象。需要注意的是，这种通信是拷贝关系，即是传值而不是传址，Worker 对通信内容的修改，不会影响到主线程。事实上，浏览器内部的运行机制是，先将通信内容串行化，然后把串行化后的字符串发给 Worker，后者再将它还原。")]),e._v(" "),t("p",[e._v("主线程与 Worker 之间也可以交换二进制数据，比如 File、Blob、ArrayBuffer 等类型，也可以在线程之间发送。下面是一个例子。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 主线程\nvar uInt8Array = new Uint8Array(new ArrayBuffer(10));\nfor (var i = 0; i < uInt8Array.length; ++i) {\n  uInt8Array[i] = i * 2; // [0, 2, 4, 6, 8,...]\n}\nworker.postMessage(uInt8Array);\n\n// Worker 线程\nself.onmessage = function (e) {\n  var uInt8Array = e.data;\n  postMessage('Inside worker.js: uInt8Array.toString() = ' + uInt8Array.toString());\n  postMessage('Inside worker.js: uInt8Array.byteLength = ' + uInt8Array.byteLength);\n};\n")])])]),t("p",[e._v("但是，拷贝方式发送二进制数据，会造成性能问题。比如，主线程向 Worker 发送一个 500MB 文件，默认情况下浏览器会生成一个原文件的拷贝。为了解决这个问题，JavaScript 允许主线程把二进制数据直接转移给子线程，但是一旦转移，主线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面。这种转移数据的方法，叫做"),t("a",{attrs:{href:"https://www.w3.org/html/wg/drafts/html/master/infrastructure.html#transferable-objects",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transferable Objects"),t("OutboundLink")],1),e._v("。这使得主线程可以快速把数据交给 Worker，对于影像处理、声音处理、3D 运算等就非常方便了，不会产生性能负担。")]),e._v(" "),t("p",[e._v("如果要直接转移数据的控制权，就要使用下面的写法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Transferable Objects 格式\nworker.postMessage(arrayBuffer, [arrayBuffer]);\n\n// 例子\nvar ab = new ArrayBuffer(1);\nworker.postMessage(ab, [ab]);\n")])])]),t("h2",{attrs:{id:"同页面的-web-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同页面的-web-worker"}},[e._v("#")]),e._v(" 同页面的 Web Worker")]),e._v(" "),t("p",[e._v("通常情况下，Worker 载入的是一个单独的 JavaScript 脚本文件，但是也可以载入与主线程在同一个网页的代码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<!DOCTYPE html>\n  <body>\n    <script id=\"worker\" type=\"app/worker\">\n      addEventListener('message', function () {\n        postMessage('some message');\n      }, false);\n    <\/script>\n  </body>\n</html>\n")])])]),t("p",[e._v("上面是一段嵌入网页的脚本，注意必须指定"),t("code",[e._v("<script>")]),e._v("标签的"),t("code",[e._v("type")]),e._v("属性是一个浏览器不认识的值，上例是"),t("code",[e._v("app/worker")]),e._v("。")]),e._v(" "),t("p",[e._v("然后，读取这一段嵌入页面的脚本，用 Worker 来处理。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var blob = new Blob([document.querySelector('#worker').textContent]);\nvar url = window.URL.createObjectURL(blob);\nvar worker = new Worker(url);\n\nworker.onmessage = function (e) {\n  // e.data === 'some message'\n};\n")])])]),t("p",[e._v("上面代码中，先将嵌入网页的脚本代码，转成一个二进制对象，然后为这个二进制对象生成 URL，再让 Worker 加载这个 URL。这样就做到了，主线程和 Worker 的代码都在同一个网页上面。")]),e._v(" "),t("h2",{attrs:{id:"实例-worker-线程完成轮询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-worker-线程完成轮询"}},[e._v("#")]),e._v(" 实例：Worker 线程完成轮询")]),e._v(" "),t("p",[e._v("有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变。这个工作可以放在 Worker 里面。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function createWorker(f) {\n  var blob = new Blob(['(' + f.toString() + ')()']);\n  var url = window.URL.createObjectURL(blob);\n  var worker = new Worker(url);\n  return worker;\n}\n\nvar pollingWorker = createWorker(function (e) {\n  var cache;\n\n  function compare(new, old) { ... };\n\n  setInterval(function () {\n    fetch('/my-api-endpoint').then(function (res) {\n      var data = res.json();\n\n      if (!compare(data, cache)) {\n        cache = data;\n        self.postMessage(data);\n      }\n    })\n  }, 1000)\n});\n\npollingWorker.onmessage = function () {\n  // render data\n}\n\npollingWorker.postMessage('init');\n")])])]),t("p",[e._v("上面代码中，Worker 每秒钟轮询一次数据，然后跟缓存做比较。如果不一致，就说明服务端有了新的变化，因此就要通知主线程。")]),e._v(" "),t("h2",{attrs:{id:"实例-worker-新建-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-worker-新建-worker"}},[e._v("#")]),e._v(" 实例： Worker 新建 Worker")]),e._v(" "),t("p",[e._v("Worker 线程内部还能再新建 Worker 线程（目前只有 Firefox 浏览器支持）。下面的例子是将一个计算密集的任务，分配到10个 Worker。")]),e._v(" "),t("p",[e._v("主线程代码如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var worker = new Worker('worker.js');\nworker.onmessage = function (event) {\n  document.getElementById('result').textContent = event.data;\n};\n")])])]),t("p",[e._v("Worker 线程代码如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// worker.js\n\n// settings\nvar num_workers = 10;\nvar items_per_worker = 1000000;\n\n// start the workers\nvar result = 0;\nvar pending_workers = num_workers;\nfor (var i = 0; i < num_workers; i += 1) {\n  var worker = new Worker('core.js');\n  worker.postMessage(i * items_per_worker);\n  worker.postMessage((i + 1) * items_per_worker);\n  worker.onmessage = storeResult;\n}\n\n// handle the results\nfunction storeResult(event) {\n  result += event.data;\n  pending_workers -= 1;\n  if (pending_workers <= 0)\n    postMessage(result); // finished!\n}\n")])])]),t("p",[e._v("上面代码中，Worker 线程内部新建了10个 Worker 线程，并且依次向这10个 Worker 发送消息，告知了计算的起点和终点。计算任务脚本的代码如下。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// core.js\nvar start;\nonmessage = getStart;\nfunction getStart(event) {\n  start = event.data;\n  onmessage = getEnd;\n}\n\nvar end;\nfunction getEnd(event) {\n  end = event.data;\n  onmessage = null;\n  work();\n}\n\nfunction work() {\n  var result = 0;\n  for (var i = start; i < end; i += 1) {\n    // perform some complex calculation here\n    result += 1;\n  }\n  postMessage(result);\n  close();\n}\n")])])]),t("h2",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),t("h3",{attrs:{id:"主线程-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主线程-2"}},[e._v("#")]),e._v(" 主线程")]),e._v(" "),t("p",[e._v("浏览器原生提供"),t("code",[e._v("Worker()")]),e._v("构造函数，用来供主线程生成 Worker 线程。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var myWorker = new Worker(jsUrl, options);\n")])])]),t("p",[t("code",[e._v("Worker()")]),e._v("构造函数，可以接受两个参数。第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且只能加载 JS 脚本，否则会报错。第二个参数是配置对象，该对象可选。它的一个作用就是指定 Worker 的名称，用来区分多个 Worker 线程。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 主线程\nvar myWorker = new Worker('worker.js', { name : 'myWorker' });\n\n// Worker 线程\nself.name // myWorker\n")])])]),t("p",[t("code",[e._v("Worker()")]),e._v("构造函数返回一个 Worker 线程对象，用来供主线程操作 Worker。Worker 线程对象的属性和方法如下。")]),e._v(" "),t("ul",[t("li",[e._v("Worker.onerror：指定 error 事件的监听函数。")]),e._v(" "),t("li",[e._v("Worker.onmessage：指定 message 事件的监听函数，发送过来的数据在"),t("code",[e._v("Event.data")]),e._v("属性中。")]),e._v(" "),t("li",[e._v("Worker.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。")]),e._v(" "),t("li",[e._v("Worker.postMessage()：向 Worker 线程发送消息。")]),e._v(" "),t("li",[e._v("Worker.terminate()：立即终止 Worker 线程。")])]),e._v(" "),t("h3",{attrs:{id:"worker-线程-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#worker-线程-2"}},[e._v("#")]),e._v(" Worker 线程")]),e._v(" "),t("p",[e._v("Web Worker 有自己的全局对象，不是主线程的"),t("code",[e._v("window")]),e._v("，而是一个专门为 Worker 定制的全局对象。因此定义在"),t("code",[e._v("window")]),e._v("上面的对象和方法不是全部都可以使用。")]),e._v(" "),t("p",[e._v("Worker 线程有一些自己的全局属性和方法。")]),e._v(" "),t("ul",[t("li",[e._v("self.name： Worker 的名字。该属性只读，由构造函数指定。")]),e._v(" "),t("li",[e._v("self.onmessage：指定"),t("code",[e._v("message")]),e._v("事件的监听函数。")]),e._v(" "),t("li",[e._v("self.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。")]),e._v(" "),t("li",[e._v("self.close()：关闭 Worker 线程。")]),e._v(" "),t("li",[e._v("self.postMessage()：向产生这个 Worker 的线程发送消息。")]),e._v(" "),t("li",[e._v("self.importScripts()：加载 JS 脚本。")])]),e._v(" "),t("p",[e._v("（完）")])])}),[],!1,null,null,null);a.default=s.exports}}]);