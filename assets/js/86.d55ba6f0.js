(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{524:function(a,t,s){"use strict";s.r(t);var n=s(25),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java基础篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java基础篇"}},[a._v("#")]),a._v(" Java基础篇")]),a._v(" "),s("h2",{attrs:{id:"java-语言有哪些特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-语言有哪些特点"}},[a._v("#")]),a._v(" Java 语言有哪些特点")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("简单易学、有丰富的类库")])]),a._v(" "),s("li",[s("p",[a._v("面向对象（Java最重要的特性，让程序耦合度更低，内聚性更高）")])]),a._v(" "),s("li",[s("p",[a._v("与平台无关性（JVM是Java跨平台使用的根本）")])]),a._v(" "),s("li",[s("p",[a._v("可靠安全")])]),a._v(" "),s("li",[s("p",[a._v("支持多线程")])])]),a._v(" "),s("h2",{attrs:{id:"面向对象和面向过程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别"}},[a._v("#")]),a._v(" 面向对象和面向过程的区别")]),a._v(" "),s("p",[s("strong",[a._v("面向过程")]),a._v("：是分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的时候一 一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发")]),a._v(" "),s("p",[s("em",[s("strong",[a._v("面向对象")])]),a._v("：是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤， 而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特 性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。  但是性能上来说，比面向过程要低。")]),a._v(" "),s("h2",{attrs:{id:"八种基本数据类型的大小-以及他们的封装类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八种基本数据类型的大小-以及他们的封装类"}},[a._v("#")]),a._v(" 八种基本数据类型的大小，以及他们的封装类")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("基本类型")]),a._v(" "),s("th",[a._v("大小（字节）")]),a._v(" "),s("th",[a._v("默认值")]),a._v(" "),s("th",[a._v("封装类")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("byte")]),a._v(" "),s("td",[a._v("1")]),a._v(" "),s("td",[a._v("(byte)0")]),a._v(" "),s("td",[a._v("Byte")])]),a._v(" "),s("tr",[s("td",[a._v("short")]),a._v(" "),s("td",[a._v("2")]),a._v(" "),s("td",[a._v("(short)0")]),a._v(" "),s("td",[a._v("Short")])]),a._v(" "),s("tr",[s("td",[a._v("int")]),a._v(" "),s("td",[a._v("4")]),a._v(" "),s("td",[a._v("0")]),a._v(" "),s("td",[a._v("Integer")])]),a._v(" "),s("tr",[s("td",[a._v("long")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("0L")]),a._v(" "),s("td",[a._v("Long")])]),a._v(" "),s("tr",[s("td",[a._v("ﬂoat")]),a._v(" "),s("td",[a._v("4")]),a._v(" "),s("td",[a._v("0.0f")]),a._v(" "),s("td",[a._v("Float")])]),a._v(" "),s("tr",[s("td",[a._v("double")]),a._v(" "),s("td",[a._v("8")]),a._v(" "),s("td",[a._v("0.0d")]),a._v(" "),s("td",[a._v("Double")])]),a._v(" "),s("tr",[s("td",[a._v("boolean")]),a._v(" "),s("td",[a._v("-")]),a._v(" "),s("td",[a._v("false")]),a._v(" "),s("td",[a._v("Boolean")])]),a._v(" "),s("tr",[s("td",[a._v("char")]),a._v(" "),s("td",[a._v("2")]),a._v(" "),s("td",[a._v("\\u0000(null)")]),a._v(" "),s("td",[a._v("Character")])])])]),a._v(" "),s("p",[a._v("注：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("int是基本数据类型，Integer是int的封装类，是引用类型。int默认值是0，而Integer默认值  是null，所以Integer能区分出0和null的情况。一旦java看到null，就知道这个引用还没有指向某个  对象，再任何引用使用前，必须为其指定一个对象，否则会报错。")])]),a._v(" "),s("li",[s("p",[a._v("基本数据类型在声明时系统会自动给它分配空间，而引用类型声明时只是分配了引用空间， 必须通过实例化开辟数据空间之后才可以赋值。数组对象也是一个引用对象，将一个数组赋值给另 一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看的见。")])])]),a._v(" "),s("p",[a._v("虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有  任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java  虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字  节。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的  是32/64位系统，而是指CPU硬件层面），具有高效存取的特点。")]),a._v(" "),s("h2",{attrs:{id:"标识符的命名规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符的命名规则"}},[a._v("#")]),a._v(" 标识符的命名规则")]),a._v(" "),s("p",[a._v("标识符的含义：是指在程序中，我们自己定义的内容，譬如，类的名字，方法名称以及变量名称等等，都是标识符。")]),a._v(" "),s("p",[a._v("命名规则：（硬性要求）标识符可以包含英文字母，0-9的数字，$以及_ 标识符不能以数字开头 标识符不是关键字")]),a._v(" "),s("p",[a._v("命名规范：（非硬性要求）类名规范：首字符大写，后面每个单词首字母大写（大驼峰式）。 变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。 方法名规范：同变量名。")]),a._v(" "),s("h2",{attrs:{id:"关键字的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字的作用"}},[a._v("#")]),a._v(" 关键字的作用")]),a._v(" "),s("p",[a._v("instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例，用法为：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v("\n")])])]),s("p",[a._v("其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。")]),a._v(" "),s("p",[a._v("注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//编译不通过\ti必须是引用类型，不能是基本类型System.out.println(i instanceof Object);//编译不通过")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" integer "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("integer "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v("\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//true")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//false\t,在 JavaSE规范 中对  instanceof 运算符的规定就是：如果  obj 为  null，那么将返回 false。")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instanceof")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"自动装箱与拆箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱与拆箱"}},[a._v("#")]),a._v(" 自动装箱与拆箱")]),a._v(" "),s("p",[a._v("装箱就是自动将基本数据类型转换为包装器类型（int--\x3eInteger）；调用方法：Integer的valueOf(int)方法")]),a._v(" "),s("p",[a._v("拆箱就是自动将包装器类型转换为基本数据类型（Integer--\x3eint）。调用方法：Integer的intValue方法")]),a._v(" "),s("p",[a._v("在Java SE5之前，如果要生成一个数值为10的Integer对象，必须这样进行：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("而在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[s("strong",[a._v("面试题1： 以下代码会输出什么？")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i1"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v("i2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i3"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v("i4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  \n  \n  \n")])])]),s("p",[a._v("运行结果：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n")])])]),s("p",[a._v("为什么会出现这样的结果？输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对 象。此时只需一看源码便知究竟，下面这段代码是Integer的valueOf方法的具体实现：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("128")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" \n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("其中IntegerCache类的实现为：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntegerCache")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v("  high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" low "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// high value may be configured by property ")]),a._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("integerCacheHighPropValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Use Long.decode here to avoid invoking methods that")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// require Integer's autoboxing cache to be initialized ")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("decode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("integerCacheHighPropValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Maximum array size is Integer.MAX_VALUE ")]),a._v("\n        h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("MAX_VALUE "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  high "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("从这2段代码可以看出，在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，  便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。")]),a._v(" "),s("p",[a._v("上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是  同一个对象，而i3和i4则是分别指向不同的对象。")]),a._v(" "),s("p",[s("strong",[a._v("面试题2：以下代码输出什么")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("200.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Double")]),a._v(" i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("200.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n \t\t "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i1"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v("i2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i3"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v("i4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("运行结果：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("  \n")])])]),s("p",[a._v("原因： 在某个范围内的整型数值的个数是有限的，而浮点数却不是。")]),a._v(" "),s("h2",{attrs:{id:"重载和重写的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[a._v("#")]),a._v(" 重载和重写的区别")]),a._v(" "),s("h3",{attrs:{id:"重写-override"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写-override"}},[a._v("#")]),a._v(" 重写(Override)")]),a._v(" "),s("p",[a._v("从字面上看，重写就是 重新写一遍的意思。其实就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名， 参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或重写，这就是重写。但要注意子类函数的访问修饰权限不能少于父类的。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TODO Auto-generated method stub")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Son")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Son")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Son")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TODO Auto-generated method stub")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello by "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("重写 总结：1.发生在父类与子类之间 2.方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同 3.访问修饰符的限制一定要大于被重写方法的访问修饰符")]),a._v(" "),s("p",[a._v("（public>protected>default>private)  4.重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常")]),a._v(" "),s("h3",{attrs:{id:"重载-overload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载-overload"}},[a._v("#")]),a._v(" 重载（Overload）")]),a._v(" "),s("p",[a._v("在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// TODO Auto-generated method stub")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"wukongnotnull.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("重载总结：")])]),a._v(" "),s("p",[a._v("1.重载Overload是一个类中多态性的一种表现")]),a._v(" "),s("p",[a._v("2.重载要求同名方法的参数列表不同(参数类型，参数个数甚至是参数顺序)")]),a._v(" "),s("p",[a._v("3.重载的时候，返回值类型可以相同也可以不相同。无法以返回型别作为重载函数的区分标准")]),a._v(" "),s("h2",{attrs:{id:"equals与-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals与-的区别"}},[a._v("#")]),a._v(" equals与==的区别")]),a._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")]),a._v(" ==")]),a._v(" "),s("p",[a._v("== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。")]),a._v(" "),s("p",[a._v("1、比较的是操作符两端的操作数是否是同一个对象。")]),a._v(" "),s("p",[a._v("2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。")]),a._v(" "),s("p",[a._v("3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为true，如： int a=10 与 long b=10L 与 double c=10.0都是相同的（为true），因为他们都指向地址为10的堆。")]),a._v(" "),s("h3",{attrs:{id:"equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals"}},[a._v("#")]),a._v(" equals")]),a._v(" "),s("p",[a._v("equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所 以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object  中的equals方法返回的却是==的判断。")]),a._v(" "),s("p",[s("strong",[a._v("总结：")])]),a._v(" "),s("p",[a._v("所有比较是否相等时，都是用equals 并且在对常量相比较时，把常量写在前面，因为使用object的")]),a._v(" "),s("p",[a._v("equals object可能为null 则空指针")]),a._v(" "),s("p",[a._v("在阿里的代码规范中只使用equals ，阿里插件默认会识别，并可以快速修改，推荐安装阿里插件来排查老代码使用“==”，替换成equals")]),a._v(" "),s("h2",{attrs:{id:"hashcode的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode的作用"}},[a._v("#")]),a._v(" Hashcode的作用")]),a._v(" "),s("p",[a._v("java的集合有两类，一类是List，还有一类是Set。前者有序可重复，后者无序不重复。当我们在set 中插入的时候怎么判断是否已经存在该元素呢，可以通过equals方法。但是如果元素太多，用这样  的方法就会比较满。")]),a._v(" "),s("p",[a._v("于是有人发明了哈希算法来提高集合中查找元素的效率。 这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的 哈希码就可以确定该对象应该存储的那个区域。")]),a._v(" "),s("p",[a._v("hashCode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当  集合要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理  位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如 果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相  同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。")]),a._v(" "),s("h2",{attrs:{id:"string、stringbuffer和stringbuilder的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer和stringbuilder的区别"}},[a._v("#")]),a._v(" String、StringBuﬀer和StringBuilder的区别")]),a._v(" "),s("p",[a._v("String是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码来看是一个ﬁnal类型的  字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对String的操作都会生成 新的String对象。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("每次+操作 ： 隐式在堆上new了一个跟原字符串相同的StringBuilder对象，再调用append方法 拼接+后面的字符。")]),a._v(" "),s("p",[a._v("StringBuﬀer和StringBuilder他们两都继承了AbstractStringBuilder抽象类，从AbstractStringBuilder抽象类中我们可以看到")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n* The value is used for character storage.\n*/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用StringBuﬀer和StringBuilder来进行操作。  另外StringBuﬀer  对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。")]),a._v(" "),s("h2",{attrs:{id:"arraylist和linkedlist的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和linkedlist的区别"}},[a._v("#")]),a._v(" ArrayList和linkedList的区别")]),a._v(" "),s("p",[a._v("Array（数组）是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的。")]),a._v(" "),s("p",[a._v("Array获取数据的时间复杂度是O(1),但是要删除数据却是开销很大，因为这需要重排数组中的所有 数据, (因为删除数据以后, 需要把后面所有的数据前移)")]),a._v(" "),s("p",[s("strong",[a._v("缺点:")]),a._v(" 数组初始化必须指定初始化的长度, 否则报错例如:")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//推介使用int[] 这种方式初始化")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("43")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("56")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("78")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//长度：4，索引范围：[0,3]")]),a._v("\n")])])]),s("p",[a._v("List—是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。List有两个重要的实现类：ArrayList和LinkedList")]),a._v(" "),s("p",[a._v("ArrayList:可以看作是能够自动增长容量的数组")]),a._v(" "),s("p",[a._v("ArrayList的toArray方法返回一个数组")]),a._v(" "),s("p",[a._v("ArrayList的asList方法返回一个列表")]),a._v(" "),s("p",[a._v("ArrayList底层的实现是Array, 数组扩容实现")]),a._v(" "),s("p",[a._v("LinkList是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList.当然,这些对比都是指数据量很大或者操作很频繁。")]),a._v(" "),s("h2",{attrs:{id:"hashmap和hashtable的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashtable的区别"}},[a._v("#")]),a._v(" HashMap和HashTable的区别")]),a._v(" "),s("p",[s("em",[s("strong",[a._v("*1********、两者父类不同*")])])]),a._v(" "),s("p",[a._v("HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都实现了同时实现了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。")]),a._v(" "),s("p",[s("em",[s("strong",[a._v("*2********、对外提供的接口不同*")])])]),a._v(" "),s("p",[a._v("Hashtable比HashMap多提供了elments() 和contains() 两个方法。 elments() 方法继承自")]),a._v(" "),s("p",[a._v("Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的value的枚举。")]),a._v(" "),s("p",[a._v("contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实  上，contansValue() 就只是调用了一下contains() 方法。")]),a._v(" "),s("p",[s("em",[s("strong",[a._v("*3********、对********null********的支持不同*")])])]),a._v(" "),s("p",[a._v("Hashtable：key和value都不能为null。")]),a._v(" "),s("p",[a._v("HashMap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个  key值对应的value为null。")]),a._v(" "),s("p",[s("em",[s("strong",[a._v("*4********、安全性不同*")])])]),a._v(" "),s("p",[a._v("HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自  己处理多线程的安全问题。")]),a._v(" "),s("p",[a._v("Hashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。")]),a._v(" "),s("p",[a._v("虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部   分的使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。")]),a._v(" "),s("p",[a._v("ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。")]),a._v(" "),s("p",[s("em",[s("strong",[a._v("*5********、初始容量大小和每次扩充容量大小不同*")])])]),a._v(" "),s("p",[s("em",[s("strong",[a._v("*6********、计算********hash********值的方法不同*")])])]),a._v(" "),s("h2",{attrs:{id:"_13-、-collection-包结构-与-collections-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-、-collection-包结构-与-collections-的区别"}},[a._v("#")]),a._v(" "),s("em",[s("strong",[a._v("*13********、*")])]),a._v(" "),s("em",[s("strong",[a._v("*Collection********包结构，与********Collections********的区别*")])])]),a._v(" "),s("p",[a._v("Collection是集合类的上级接口，子接口有 Set、List、LinkedList、ArrayList、Vector、Stack、Set；")]),a._v(" "),s("p",[a._v("Collections是集合类的一个帮助类， 它包含有各种有关集合操作的静态多态方法，用于实现对各种集合的搜索、排序、线程安全化等操作。此类不能实例化，就像一个工具类，服务于Java的Collection框架。")]),a._v(" "),s("h2",{attrs:{id:"java的四种引用-强弱软虚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java的四种引用-强弱软虚"}},[a._v("#")]),a._v(" Java的四种引用，强弱软虚")]),a._v(" "),s("p",[a._v("强引用"),s("br"),a._v("\n强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，使用  方式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"str"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("软引用")]),a._v(" "),s("p",[a._v("软引用在程序内存不足时，会被回收，使用方式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的，")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// 这里的软引用指的是指向new String("str")的引用，也就是SoftReference类中T')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" wrf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"str"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建的对象。")]),a._v(" "),s("p",[a._v("弱引用")]),a._v(" "),s("p",[a._v("弱引用就是只要JVM垃圾回收器发现了它，就会将之回收，使用方式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" wrf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("可用场景： Java源码中的"),s("code",[a._v("java.util.WeakHashMap")]),a._v("中的"),s("code",[a._v("key")]),a._v("就是使用弱引用，我的理解就是，一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。")]),a._v(" "),s("p",[a._v("虚引用"),s("br"),a._v("\n虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入"),s("code",[a._v("ReferenceQueue")]),a._v("中。注意"),s("br"),a._v("\n哦，其它引用是被JVM回收后才被传入"),s("code",[a._v("ReferenceQueue")]),a._v("中的。由于这个机制，所以虚引用大多"),s("br"),a._v("\n被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有"),s("code",[a._v("ReferenceQueue")]),a._v("， 使用例子：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PhantomReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" prf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PhantomReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"str"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReferenceQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("可用场景： 对象销毁前的一些操作，比如说资源释放等。"),s("br"),a._v(" "),s("code",[a._v("Object.finalize()")]),a._v("虽然也可以做这，但是这个方式即不安全又低效")]),a._v(" "),s("p",[a._v("上诉所说的几类引用，都是指对象本身的引用，而不是指Reference的四个子类的引用")]),a._v(" "),s("p",[a._v("(SoftReference等)。")]),a._v(" "),s("h2",{attrs:{id:"_15、-泛型常用特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15、-泛型常用特点"}},[a._v("#")]),a._v(" 15、 泛型常用特点")]),a._v(" "),s("p",[a._v("泛型是Java SE 1.5之后的特性， 《Java 核心技术》中对泛型的定义是：")]),a._v(" "),s("blockquote",[s("p",[a._v("“泛型” 意味着编写的代码可以被不同类型的对象所重用。")])]),a._v(" "),s("p",[a._v("“泛型”，顾名思义，“泛指的类型”。我们提供了泛指的概念，但具体执行的时候却可以有具体的规则来约束，比如我们用的非常多的ArrayList就是个泛型类，ArrayList作为集合可以存放各种元素，如Integer, String，自定义的各种类型等，但在我们使用的时候通过具体的规则来约束，如我们可以约束集合中只存放Integer类型的元素，如")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" iniData "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("使用泛型的好处？")]),a._v(" "),s("p",[a._v("以集合来举例，使用泛型的好处是我们不必因为添加元素类型的不同而定义不同类型的集合，如整 型集合类，浮点型集合类，字符串集合类，我们可以定义一个集合来存放整型、浮点型，字符串型 数据，而这并不是最重要的，因为我们只要把底层存储设置了Object即可，添加的数据全部都可向 上转型为Object。 更重要的是我们可以通过规则按照自己的想法控制存储的数据类型。")]),a._v(" "),s("h2",{attrs:{id:"_16、java-创建对象有几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16、java-创建对象有几种方式"}},[a._v("#")]),a._v(" 16、Java 创建对象有几种方式？")]),a._v(" "),s("p",[a._v("java中提供了以下四种创建对象的方式:")]),a._v(" "),s("ul",[s("li",[a._v("new创建新对象")]),a._v(" "),s("li",[a._v("通过反射机制")]),a._v(" "),s("li",[a._v("采用clone机制")]),a._v(" "),s("li",[a._v("通过序列化机制")])]),a._v(" "),s("h2",{attrs:{id:"_17、有没有可能两个不相等的对象有相同的hashcode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17、有没有可能两个不相等的对象有相同的hashcode"}},[a._v("#")]),a._v(" 17、有没有可能两个不相等的对象有相同的hashcode")]),a._v(" "),s("p",[a._v("有可能.在产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般有以下几种方式来处理:")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("拉链法:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储.")])]),a._v(" "),s("li",[s("p",[a._v("开放定址法:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将记录存入")])]),a._v(" "),s("li",[s("p",[a._v("再哈希:又叫双哈希法,有多个不同的Hash函数.当发生冲突时,使用第二个,第三个….等哈希函数计算地址,直到无冲突.")])])]),a._v(" "),s("h2",{attrs:{id:"_18、深拷贝和浅拷贝的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18、深拷贝和浅拷贝的区别是什么"}},[a._v("#")]),a._v(" 18、深拷贝和浅拷贝的区别是什么")]),a._v(" "),s("p",[a._v("浅拷贝:被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.换言之,浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象.")]),a._v(" "),s("p",[a._v("深拷贝:被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对象.而不再是原有的那些被引用的对象.换言之.深拷贝把要复制的对象所引用的  对象都复制了一遍.")]),a._v(" "),s("h2",{attrs:{id:"_19、final有哪些用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19、final有哪些用法"}},[a._v("#")]),a._v(" 19、ﬁnal有哪些用法")]),a._v(" "),s("p",[a._v("ﬁnal也是很多面试喜欢问的地方,但我觉得这个问题很无聊,通常能回答下以下5点就不错了:")]),a._v(" "),s("ul",[s("li",[a._v("被final修饰的类不可以被继承")]),a._v(" "),s("li",[a._v("被final修饰的方法不可以被重写")]),a._v(" "),s("li",[a._v("被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.")]),a._v(" "),s("li",[a._v("被final- - 修饰的方法,JVM会尝试将其内联,以提高运行效率")]),a._v(" "),s("li",[a._v("被final修饰的常量,在编译阶段会存入常量池中.")])]),a._v(" "),s("p",[a._v("除此之外,编译器对ﬁnal域要遵守的两个重排序规则更好:")]),a._v(" "),s("p",[a._v("在构造函数内对一个ﬁnal域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作之间不能重排序  初次读一个包含ﬁnal域的对象的引用,与随后初次读这个ﬁnal域,这两个操作之间不能重排序.")]),a._v(" "),s("h2",{attrs:{id:"_20、static都有哪些用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20、static都有哪些用法"}},[a._v("#")]),a._v(" 20、static都有哪些用法?")]),a._v(" "),s("p",[a._v("所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/ 方法都属于类的静态资源,类实例所共享.")]),a._v(" "),s("p",[a._v("除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作:")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" calss "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PreCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//执行相关操作")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("此外static也多用于修饰内部类,此时称之为静态内部类.")]),a._v(" "),s("p",[a._v("最后一种用法就是静态导包,即 "),s("code",[a._v("import static .import static")]),a._v("是在"),s("code",[a._v("JDK 1.5")]),a._v("之后引入的新特性,可以用"),s("br"),a._v("\n来指定导入某个类中的静态资源,并且不需要使用类名,可以直接使用资源名,比如:")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//System.out.println(Math.sin(20));传统做法")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"_21、3-0-1-0-3返回值是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、3-0-1-0-3返回值是什么"}},[a._v("#")]),a._v(" 21、3*0.1 == 0.3返回值是什么")]),a._v(" "),s("p",[a._v("false,因为有些浮点数不能完全精确的表示出来.")]),a._v(" "),s("h2",{attrs:{id:"_22、a-a-b与a-b有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22、a-a-b与a-b有什么区别"}},[a._v("#")]),a._v(" 22、a=a+b与a+=b有什么区别")]),a._v(" "),s("p",[a._v("+= 操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类"),s("br"),a._v("\n型,而a=a+b则不会自动进行类型转换.如：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 报编译错误:cannot convert from int to byte")]),a._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("以下代码是否有错,有的话怎么改？")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" s1"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ns1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("有错误.short类型在进行运算时会自动提升为int类型,也就是说")]),a._v(" "),s("p",[a._v("short类型,此时编译器会报错.")]),a._v(" "),s("p",[a._v("正确写法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")]),a._v(" s1"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ns1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("+=操作符会对右边的表达式结果强转匹配左边的数据类型,所以没错.")]),a._v(" "),s("h2",{attrs:{id:"_23、try-catch-finally-try里有return-finally还执行么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23、try-catch-finally-try里有return-finally还执行么"}},[a._v("#")]),a._v(" 23、try catch finally，try里有return，finally还执行么？")]),a._v(" "),s("p",[a._v("执行，并且ﬁnally的执行早于try里面的return")]),a._v(" "),s("p",[a._v("结论：")]),a._v(" "),s("p",[a._v("1、不管有木有出现异常，ﬁnally块中代码都会执行；"),s("br"),a._v("\n2、当try和catch中有return时，ﬁnally仍然会执行；")]),a._v(" "),s("p",[a._v("3、ﬁnally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的  值保存起来，管ﬁnally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数  返回值是在ﬁnally执行前确定的；")]),a._v(" "),s("p",[a._v("4、ﬁnally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。")]),a._v(" "),s("h2",{attrs:{id:"_24、-excption与error包结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24、-excption与error包结构"}},[a._v("#")]),a._v(" 24、 Excption与Error包结构")]),a._v(" "),s("p",[a._v("Java可抛出(Throwable)的结构分为三种类型：被检查的异常(CheckedException)，运行时异常"),s("br"),a._v("\n(RuntimeException)，错误(Error)。"),s("br"),a._v(" "),s("strong",[a._v("1、运行时异常")]),s("br"),a._v("\n定义:RuntimeException及其子类都被称为运行时异常。"),s("br"),a._v('\n特点:Java编译器不会检查它。也就是说，当程序中可能出现这类异常时，倘若既"没有通过throws'),s("br"),a._v('\n声明抛出它"，也"没有用try-catch语句捕获它"，还是会编译通过。例如，除数为零时产生的'),s("br"),a._v("\nArithmeticException异常，数组越界时产生的IndexOutOfBoundsException异常，fail-fast机制产"),s("br"),a._v("\n生的ConcurrentModificationException异常（java.util包下面的所有的集合类都是快速失败"),s("br"),a._v("\n的，“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上"),s("br"),a._v("\n的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线"),s("br"),a._v("\n程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的"),s("br"),a._v("\n结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出"),s("br"),a._v("\nConcurrentModificationException 异常，从而产生fail-fast机制，这个错叫并发修改异常。Failsafe，java.util.concurrent包下面的所有的类都是安全失败的，在遍历过程中，如果已经遍历的数"),s("br"),a._v("\n组上的内容变化了，迭代器不会抛出ConcurrentModificationException异常。如果未遍历的数组"),s("br"),a._v("\n上的内容发生了变化，则有可能反映到迭代过程中。这就是ConcurrentHashMap迭代器弱一致的"),s("br"),a._v("\n表现。ConcurrentHashMap的弱一致性主要是为了提升效率，是一致性与效率之间的一种权衡。"),s("br"),a._v("\n要成为强一致性，就得到处使用锁，甚至是全局锁，这就与Hashtable和同步的HashMap一样"),s("br"),a._v("\n了。）等，都属于运行时异常。"),s("br"),a._v(" "),s("strong",[a._v("常见的五种运行时异常：")]),s("br"),a._v("\nClassCastException（类转换异常）"),s("br"),a._v("\nIndexOutOfBoundsException（数组越界）"),s("br"),a._v("\nNullPointerException（空指针异常）"),s("br"),a._v("\nArrayStoreException（数据存储异常，操作数组是类型不一致）"),s("br"),a._v("\nBufferOverflowException")]),a._v(" "),s("p",[s("strong",[a._v("2、被检查异常")]),s("br"),a._v('\n定义:Exception类本身，以及Exception的子类中除了"运行时异常"之外的其它子类都属于被检查异'),s("br"),a._v("\n常。"),s("br"),a._v("\n特点 : Java编译器会检查它。 此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕"),s("br"),a._v("\n获处理，否则不能通过编译。例如，CloneNotSupportedException就属于被检查异常。当通过"),s("br"),a._v("\nclone()接口去克隆一个对象，而该对象对应的类没有实现Cloneable接口，就会抛出"),s("br"),a._v("\nCloneNotSupportedException异常。被检查异常通常都是可以恢复的。 如："),s("br"),a._v("\nIOException"),s("br"),a._v("\nFileNotFoundException"),s("br"),a._v("\nSQLException"),s("br"),a._v("\n被检查的异常适用于那些不是因程序引起的错误情况，比如：读取文件时文件不存在引发的"),s("br"),a._v("\nFileNotFoundException 。然而，不被检查的异常通常都是由于糟糕的编程引起的，比如：在对象"),s("br"),a._v("\n引用时没有确保对象非空而引起的 NullPointerException 。")]),a._v(" "),s("p",[s("strong",[a._v("3、错误")]),s("br"),a._v("\n定义 : Error类及其子类。"),s("br"),a._v("\n特点 : 和运行时异常一样，编译器也不会对错误进行检查。"),s("br"),a._v("\n当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。程序本身无法修"),s("br"),a._v("\n复这些错误的。例如，VirtualMachineError就属于错误。出现这种错误会导致程序终止运行。"),s("br"),a._v("\nOutOfMemoryError、ThreadDeath。"),s("br"),a._v("\nJava虚拟机规范规定JVM的内存分为了好几块，比如堆，栈，程序计数器，方法区等")]),a._v(" "),s("h2",{attrs:{id:"_25、oom你遇到过哪些情况-sof你遇到过哪些情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25、oom你遇到过哪些情况-sof你遇到过哪些情况"}},[a._v("#")]),a._v(" 25、OOM你遇到过哪些情况，SOF你遇到过哪些情况")]),a._v(" "),s("p",[s("strong",[a._v("OOM")]),a._v("：")]),a._v(" "),s("p",[a._v("1，OutOfMemoryError异常")]),a._v(" "),s("p",[a._v("除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生OutOfMemoryError(OOM)异常的   可能。")]),a._v(" "),s("p",[a._v("Java Heap 溢出：")]),a._v(" "),s("p",[a._v("一般的异常信息：java.lang.OutOfMemoryError:Java heap spacess。")]),a._v(" "),s("p",[a._v("java堆用于存储对象实例，我们只要不断的创建对象，并且保证GC  Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量限制后产生内存溢出异常。")]),a._v(" "),s("p",[a._v("出现这种异常，一般手段是先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，先分清是因为内存泄漏(Memory Leak)还是内存溢出(Memory Overﬂow)。")]),a._v(" "),s("p",[a._v("如果是内存泄漏，可进一步通过工具查看泄漏对象到GCRoots的引用链。于是就能找到泄漏对象是  通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收。")]),a._v(" "),s("p",[a._v("如果不存在泄漏，那就应该检查虚拟机的参数(-Xmx与-Xms)的设置是否适当。")]),a._v(" "),s("p",[a._v("2，虚拟机栈和本地方法栈溢出")]),a._v(" "),s("p",[a._v("如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverﬂowError异常。  如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常")]),a._v(" "),s("p",[a._v("这里需要注意当栈的大小越大可分配的线程数就越少。")]),a._v(" "),s("p",[a._v("3，运行时常量池溢出")]),a._v(" "),s("p",[a._v("异常信息：java.lang.OutOfMemoryError:PermGenspace")]),a._v(" "),s("p",[a._v("如果要向运行时常量池中添加内容，最简单的做法就是使用String.intern()这个Native方法。该方法 的作用是：如果池中已经包含一个等于此String的字符串，则返回代表池中这个字符串的String对   象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。由于常量  池分配在方法区内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区的大小，从而间接  限制其中常量池的容量。")]),a._v(" "),s("p",[a._v("4，方法区溢出")]),a._v(" "),s("p",[a._v("方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。也有可  能是方法区中保存的class对象没有被及时回收掉或者class信息占用的内存超过了我们配置。")]),a._v(" "),s("p",[a._v("异常信息：java.lang.OutOfMemoryError:PermGenspace")]),a._v(" "),s("p",[a._v("方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是很苛刻 的。在经常动态生成大量Class的应用中，要特别注意这点。")]),a._v(" "),s("p",[s("strong",[a._v("SOF（堆栈溢出StackOverflow）：")])]),a._v(" "),s("p",[a._v("StackOverﬂowError 的定义：当应用程序递归太深而发生堆栈溢出时，抛出该错误。")]),a._v(" "),s("p",[a._v("因为栈一般默认为1-2m，一旦出现死循环或者是大量的递归调用，在不断的压栈过程中，造成栈容  量超过1m而导致溢出。")]),a._v(" "),s("p",[a._v("栈溢出的原因：递归调用，大量循环或死循环，全局变量是否过多，数组、List、map数据过大。")]),a._v(" "),s("h2",{attrs:{id:"_26、-简述线程、程序、进程的基本概念。以及他们之间关系是什"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26、-简述线程、程序、进程的基本概念。以及他们之间关系是什"}},[a._v("#")]),a._v(" 26、 简述线程、程序、进程的基本概念。以及他们之间关系是什")]),a._v(" "),s("p",[a._v("么?")]),a._v(" "),s("p",[s("strong",[a._v("线程")]),a._v("与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个 线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个 线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻 量级进程。")]),a._v(" "),s("p",[s("strong",[a._v("程序")]),a._v("是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代 码。")]),a._v(" "),s("p",[s("strong",[a._v("进程")]),a._v("是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序 即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算 机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如  CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存   中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系 统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同 时执行一个以上的程序段。")]),a._v(" "),s("h2",{attrs:{id:"_27、java-序列化中如果有些字段不想进行序列化-怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27、java-序列化中如果有些字段不想进行序列化-怎么办"}},[a._v("#")]),a._v(" 27、Java 序列化中如果有些字段不想进行序列化，怎么办？")]),a._v(" "),s("p",[a._v("对于不想进行序列化的变量，使用 transient 关键字修饰。")]),a._v(" "),s("p",[a._v("transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。")]),a._v(" "),s("h2",{attrs:{id:"_28、说说java-中-io-流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28、说说java-中-io-流"}},[a._v("#")]),a._v(" 28、说说Java 中 IO 流")]),a._v(" "),s("p",[a._v("Java 中 IO 流分为几种?")]),a._v(" "),s("ul",[s("li",[a._v("按照流的流向分，可以分为输入流和输出流；")]),a._v(" "),s("li",[a._v("按照操作单元划分，可以划分为字节流和字符流；")]),a._v(" "),s("li",[a._v("按照流的角色划分为节点流和处理流。")])]),a._v(" "),s("p",[a._v("Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧"),s("br"),a._v("\n密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。")]),a._v(" "),s("ul",[s("li",[a._v("InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。")]),a._v(" "),s("li",[a._v("OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。")])]),a._v(" "),s("p",[a._v("按操作方式分类结构图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/639ec442b39898de071c3e4fd098215fb48f11e9/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f494f2d2545362539332538442545342542442539432545362539362542392545352542432538462545352538382538362545372542312542422e706e67",alt:"img"}})]),a._v(" "),s("p",[a._v("按操作对象分类结构图：")]),a._v(" "),s("p",[a._v("![img](file:////private/var/folders/84/yp82d91d5jvdwmx6kd1td9640000gn/T/com.kingsoft.wpsoffice.mac/wps-mac/ksohtml/wpsuaznJL.png)")]),a._v(" "),s("h2",{attrs:{id:"_29、-java-io与-nio的区别-补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29、-java-io与-nio的区别-补充"}},[a._v("#")]),a._v(" 29、 Java IO与 NIO的区别（补充）")]),a._v(" "),s("p",[a._v("NIO即New IO，这个库是在JDK1.4中才引入的。NIO和IO有相同的作用和目的，但实现方式不同， NIO主要用到的是块，所以NIO的效率要比IO高很多。在Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。")]),a._v(" "),s("h2",{attrs:{id:"_30、java反射的作用于原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30、java反射的作用于原理"}},[a._v("#")]),a._v(" 30、java反射的作用于原理")]),a._v(" "),s("h4",{attrs:{id:"_1、定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、定义"}},[a._v("#")]),a._v(" 1、定义：")]),a._v(" "),s("p",[a._v("反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象， 都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所 有信息。")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。")])]),a._v(" "),s("p",[s("strong",[a._v("2、哪里会用到反射机制？")]),a._v(" jdbc就是典型的反射")])]),a._v(" "),s("p",[a._v("这就是反射。如hibernate，struts等框架使用反射实现的。")]),a._v(" "),s("h4",{attrs:{id:"_3、反射的实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、反射的实现方式"}},[a._v("#")]),a._v(" 3、反射的实现方式：")]),a._v(" "),s("p",[a._v('第一步：获取Class对象，有4中方法： 1）Class.forName("类的路径")； 2）类名.class 3）对象名.getClass() 4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象')]),a._v(" "),s("h4",{attrs:{id:"_4、实现java反射的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、实现java反射的类"}},[a._v("#")]),a._v(" 4、实现Java反射的类：")]),a._v(" "),s("p",[a._v("1）Class：表示正在运行的Java应用程序中的类和接口 注意： 所有获取对象的信息都需要Class类来实现。 2）Field：提供有关类和接口的属性信息，以及对它的动态访问权限。 3）Constructor： 提供关于类的单个构造方法的信息以及它的访问权限 4）Method：提供类或接口中某个方法的信息")]),a._v(" "),s("h4",{attrs:{id:"_5、反射机制的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、反射机制的优缺点"}},[a._v("#")]),a._v(" 5、反射机制的优缺点：")]),a._v(" "),s("p",[s("strong",[a._v("优点：")]),a._v(" 1）能够运行时动态获取类的实例，提高灵活性； 2）与动态编译结合 "),s("strong",[a._v("缺点：")]),a._v(" 1）使用反射性能较低，需要解析字节码，将内存中的对象进行解析。 解决方案： 1、通过setAccessible(true) 关闭JDK的安全检查来提升反射速度； 2、多次创建一个类的实例时，有缓存会快很多 3、ReﬂectASM工具类，通过字节码生成的方式加快反射速度 2）相对不安全，破坏了封装性（因为通过反射可以获得私有方法和属性）")]),a._v(" "),s("h2",{attrs:{id:"_31、说说list-set-map三者的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31、说说list-set-map三者的区别"}},[a._v("#")]),a._v(" 31、说说List,Set,Map三者的区别？")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("List(对付顺序的好帮手)：")]),a._v(" List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象")]),a._v(" "),s("p",[s("strong",[a._v("Set(注重独一无二的性质):")]),a._v(" 不允许重复的集合。不会有多个元素引用相同的对象。")]),a._v(" "),s("p",[s("strong",[a._v("Map(用Key来搜索的专家):")]),a._v(" 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。")])]),a._v(" "),s("h2",{attrs:{id:"、object-有哪些常用方法-大致说一下每个方法的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#、object-有哪些常用方法-大致说一下每个方法的含义"}},[a._v("#")]),a._v(" 、Object 有哪些常用方法？大致说一下每个方法的含义")]),a._v(" "),s("p",[a._v("java.lang.Object")]),a._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"media/image5.png",alt:""}}),a._v('{width="2.9791666666666665in" height="3.1145833333333335in"}')])]),a._v(" "),s("p",[a._v("下面是对应方法的含义。")]),a._v(" "),s("h4",{attrs:{id:"clone-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clone-方法"}},[a._v("#")]),a._v(" clone 方法")]),a._v(" "),s("p",[a._v("保护方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出CloneNotSupportedException 异常，深拷贝也需要实现 Cloneable，同时其成员变量为引用类型的也需要实现 Cloneable，然后重写 clone 方法。")]),a._v(" "),s("h4",{attrs:{id:"finalize-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finalize-方法"}},[a._v("#")]),a._v(" ﬁnalize 方法")]),a._v(" "),s("p",[a._v("该方法和垃圾收集器有关系，判断一个对象是否可以被回收的最后一步就是判断是否重写了此方 法。")]),a._v(" "),s("h4",{attrs:{id:"equals-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals-方法"}},[a._v("#")]),a._v(" equals 方法")]),a._v(" "),s("p",[a._v("该方法使用频率非常高。一般 equals 和 == 是不一样的，但是在 Object 中两者是一样的。子类一般都要重写这个方法。")]),a._v(" "),s("h4",{attrs:{id:"hashcode-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-方法"}},[a._v("#")]),a._v(" hashCode 方法")]),a._v(" "),s("p",[a._v("该方法用于哈希查找，重写了 equals 方法一般都要重写 hashCode 方法，这个方法在一些具有哈希功能的 Collection 中用到。")]),a._v(" "),s("p",[a._v("一般必须满足")]),a._v(" "),s("p",[a._v("。可以推出")]),a._v(" "),s("blockquote",[s("p",[a._v("，但是")])]),a._v(" "),s("p",[a._v("hashCode 相等不一定就满足 equals。不过为了提高效率，应该尽量使上面两个条件接近等价。")]),a._v(" "),s("blockquote",[s("p",[a._v("JDK 1.6、1.7 默认是返回随机数；")]),a._v(" "),s("p",[a._v("JDK 1.8 默认是通过和当前线程有关的一个随机数 + 三个确定值，运用 Marsaglia's xorshift scheme 随机数算法得到的一个随机数。")])]),a._v(" "),s("h4",{attrs:{id:"wait-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-方法"}},[a._v("#")]),a._v(" wait 方法")]),a._v(" "),s("p",[a._v("配合 synchronized 使用，wait 方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait() 方法一直等待，直到获得锁或者被中断。wait(long timeout) 设定一个超时间隔，如果在规定时间内没有获得锁就返回。")]),a._v(" "),s("p",[a._v("调用该方法后当前线程进入睡眠状态，直到以下事件发生。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("其他线程调用了该对象的 notify 方法；")])]),a._v(" "),s("li",[s("p",[a._v("其他线程调用了该对象的 notifyAll 方法；")])]),a._v(" "),s("li",[s("p",[a._v("其他线程调用了 interrupt 中断该线程；")])]),a._v(" "),s("li",[s("p",[a._v("时间间隔到了。")])])]),a._v(" "),s("p",[a._v("此时该线程就可以被调度了，如果是被中断的话就抛出一个 InterruptedException 异常。")]),a._v(" "),s("h4",{attrs:{id:"notify-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notify-方法"}},[a._v("#")]),a._v(" notify 方法")]),a._v(" "),s("p",[a._v("配合 synchronized 使用，该方法唤醒在该对象上"),s("strong",[a._v("等待队列")]),a._v("中的某个线程（同步队列中的线程是给抢占 CPU 的线程，等待队列中的线程指的是等待唤醒的线程）。")]),a._v(" "),s("h4",{attrs:{id:"notifyall-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifyall-方法"}},[a._v("#")]),a._v(" notifyAll 方法")]),a._v(" "),s("p",[a._v("配合 synchronized 使用，该方法唤醒在该对象上等待队列中的所有线程。"),s("strong",[a._v("总结")])]),a._v(" "),s("p",[a._v("只要把上面几个方法熟悉就可以了，toString 和 getClass 方法可以不用去讨论它们。该题目考察的是对 Object 的熟悉程度，平时用的很多方法并没看其定义但是也在用，比如说：wait() 方法， equals() 方法等。")]),a._v(" "),s("p",[a._v("大致意思：Object 是所有类的根，是所有类的父类，所有对象包括数组都实现了 Object 的方法。")]),a._v(" "),s("h2",{attrs:{id:"_33、java-创建对象有几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33、java-创建对象有几种方式"}},[a._v("#")]),a._v(" 33、Java 创建对象有几种方式？")]),a._v(" "),s("p",[a._v("这题目看似简单，要好好回答起来还是有点小复杂的，我们来看看，到底有哪些方式可以创建对 象？")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("使用 new 关键字")]),a._v("，这也是我们平时使用的最多的创建对象的方式，示例：")])]),a._v(" "),s("p",[s("strong",[a._v("使用反射方式创建对象")]),a._v("，使用 newInstance()，但是得处理两个异常 InstantiationException、IllegalAccessException：")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("使用 clone 方法")]),a._v("，前面题目中 clone 是 Object 的方法，所以所有对象都有这个方法。"),s("strong",[a._v("使用反序列化创建对象")]),a._v("，调用 ObjectInputStream 类的 readObject() 方法。")])]),a._v(" "),s("p",[a._v("我们反序列化一个对象，JVM 会给我们创建一个单独的对象。JVM 创建对象并不会调用任何构造函数。一个对象实现了 Serializable 接口，就可以把对象写入到文件中，并通过读取文件来创建对象。")]),a._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("p",[a._v("创建对象的方式关键字：new、反射、clone 拷贝、反序列化。")]),a._v(" "),s("h2",{attrs:{id:"_34、获取一个类class对象的方式有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34、获取一个类class对象的方式有哪些"}},[a._v("#")]),a._v(" 34、获取一个类Class对象的方式有哪些？")]),a._v(" "),s("p",[a._v("搞清楚类对象和实例对象，但都是对象。")]),a._v(" "),s("p",[a._v("第一种：通过类对象的 getClass() 方法获取，细心点的都知道，这个 getClass 是 Object 类里面的方法。")]),a._v(" "),s("p",[a._v("第二种：通过类的静态成员表示，每个类都有隐含的静态成员 class。")]),a._v(" "),s("p",[a._v("第三种：通过 Class 类的静态方法 forName() 方法获取。")]),a._v(" "),s("h2",{attrs:{id:"_35、arraylist-和-linkedlist-的区别有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35、arraylist-和-linkedlist-的区别有哪些"}},[a._v("#")]),a._v(" 35、ArrayList 和 LinkedList 的区别有哪些？")]),a._v(" "),s("h4",{attrs:{id:"arraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[a._v("#")]),a._v(" ArrayList")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("优点")]),a._v("：ArrayList 是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。")]),a._v(" "),s("p",[s("strong",[a._v("缺点")]),a._v("：因为地址连续，ArrayList 要移动数据，所以插入和删除操作效率比较低。")])]),a._v(" "),s("h4",{attrs:{id:"linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[a._v("#")]),a._v(" LinkedList")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("优点")]),a._v("：LinkedList 基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址。对于新增和删除操作，LinkedList 比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。")]),a._v(" "),s("p",[s("strong",[a._v("缺点")]),a._v("：因为 LinkedList 要移动指针，所以查询操作性能比较低。")])]),a._v(" "),s("h4",{attrs:{id:"适用场景分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景分析"}},[a._v("#")]),a._v(" 适用场景分析")]),a._v(" "),s("blockquote",[s("p",[a._v("当需要对数据进行对随机访问的时候，选用 ArrayList。")]),a._v(" "),s("p",[a._v("当需要对数据进行多次增加删除修改时，采用 LinkedList。")])]),a._v(" "),s("p",[a._v("如果容量固定，并且只会添加到尾部，不会引起扩容，优先采用 ArrayList。")]),a._v(" "),s("p",[a._v("当然，绝大数业务的场景下，使用 ArrayList 就够了，但需要注意避免 ArrayList 的扩容，以及非顺序的插入。")]),a._v(" "),s("h2",{attrs:{id:"_36、用过-arraylist-吗-说一下它有什么特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36、用过-arraylist-吗-说一下它有什么特点"}},[a._v("#")]),a._v(" 36、用过 ArrayList 吗？说一下它有什么特点？")]),a._v(" "),s("p",[a._v('只要是搞 Java 的肯定都会回答"用过"。所以，回答题目的后半部分------ArrayList 的特点。可以从这几个方面去回答：')]),a._v(" "),s("p",[a._v("Java 集合框架中的一种存放相同类型的元素数据，是一种变长的集合类，基于定长数组实现，当加入数据达到一定程度后，会实行自动扩容，即扩大数组大小。")]),a._v(" "),s("p",[a._v("底层是使用数组实现，添加元素。")]),a._v(" "),s("blockquote",[s("p",[a._v("如果 add(o)，添加到的是数组的尾部，如果要增加的数据量很大，应该使用 ensureCapacity()")]),a._v(" "),s("p",[a._v("方法，该方法的作用是预先设置 ArrayList 的大小，这样可以大大提高初始化速度。")]),a._v(" "),s("p",[a._v("如果使用 add(int,o)，添加到某个位置，那么可能会挪动大量的数组元素，并且可能会触发扩容机制。")])]),a._v(" "),s("p",[a._v("高并发的情况下，线程不安全。多个线程同时操作 ArrayList，会引发不可预知的异常或错误。")]),a._v(" "),s("p",[a._v("ArrayList 实现了 Cloneable 接口，标识着它可以被复制。注意：ArrayList 里面的 clone() 复制其实是浅复制。")]),a._v(" "),s("h2",{attrs:{id:"_37、有数组了为什么还要搞个-arraylist-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37、有数组了为什么还要搞个-arraylist-呢"}},[a._v("#")]),a._v(" 37、有数组了为什么还要搞个 ArrayList 呢？")]),a._v(" "),s("p",[a._v("通常我们在使用的时候，如果在不明确要插入多少数据的情况下，普通数组就很尴尬了，因为你不 知道需要初始化数组大小为多少，而 ArrayList 可以使用默认的大小，当元素个数到达一定程度")]),a._v(" "),s("p",[a._v("后，会自动扩容。")]),a._v(" "),s("p",[a._v("可以这么来理解：我们常说的数组是定死的数组，ArrayList 却是动态数组。")]),a._v(" "),s("h2",{attrs:{id:"_38、说说什么是-fail-fast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38、说说什么是-fail-fast"}},[a._v("#")]),a._v(" 38、说说什么是 fail-fast？")]),a._v(" "),s("p",[a._v("fail-fast 机制是 Java 集合（Collection）中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。")]),a._v(" "),s("p",[a._v("例如：当某一个线程 A 通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了，那么线程 A 访问集合时，就会抛出 ConcurrentModiﬁcationException 异常，产生 fail-fast 事件。这里的操作主要是指 add、remove 和 clear，对集合元素个数进行修改。")]),a._v(" "),s("p",[a._v('解决办法：建议使用"java.util.concurrent 包下的类"去取代"java.util 包下的类"。')]),a._v(" "),s("p",[a._v("可以这么理解：在遍历之前，把 modCount 记下来 expectModCount，后面 expectModCount 去和 modCount 进行比较，如果不相等了，证明已并发了，被修改了，于是抛出ConcurrentModiﬁcationException 异常。")]),a._v(" "),s("h2",{attrs:{id:"_39、说说hashtable-与-hashmap-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39、说说hashtable-与-hashmap-的区别"}},[a._v("#")]),a._v(" 39、说说Hashtable 与 HashMap 的区别")]),a._v(" "),s("p",[a._v("本来不想这么写标题的，但是无奈，面试官都喜欢这么问 HashMap。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("出生的版本不一样，Hashtable 出生于 Java 发布的第一版本 JDK 1.0，HashMap 出生于 JDK 1.2。")])]),a._v(" "),s("li",[s("p",[a._v("都实现了 Map、Cloneable、Serializable（当前 JDK 版本 1.8）。")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 继承的是 AbstractMap，并且 AbstractMap 也实现了 Map 接口。Hashtable 继承")])])]),a._v(" "),s("blockquote",[s("p",[a._v("Dictionary。")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("Hashtable 中大部分 public 修饰普通方法都是 synchronized 字段修饰的，是线程安全的，")])]),a._v(" "),s("blockquote",[s("p",[a._v("HashMap 是非线程安全的。")])]),a._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[s("p",[a._v("Hashtable 的 key 不能为 null，value 也不能为 null，这个可以从 Hashtable 源码中的 put 方法看到，判断如果 value 为 null 就直接抛出空指针异常，在 put 方法中计算 key 的 hash 值之前并没有判断 key 为 null 的情况，那说明，这时候如果 key 为空，照样会抛出空指针异常。")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 的 key 和 value 都可以为 null。在计算 hash 值的时候，有判断，如果")])])]),a._v(" "),s("p",[a._v("，则其 ；至于 value 是否为 null，根本没有判断过。")]),a._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[s("p",[a._v("Hashtable 直接使用对象的 hash 值。hash 值是 JDK 根据对象的地址或者字符串或者数字算出来的 int 类型的数值。然后再使用除留余数法来获得最终的位置。然而除法运算是非常耗费时间的，效率很低。HashMap 为了提高计算效率，将哈希表的大小固定为了 2 的幂，这样在取模预算时，不需要做除法，只需要做位运算。位运算比除法的效率要高很多。")])]),a._v(" "),s("li",[s("p",[a._v("Hashtable、HashMap 都使用了 Iterator。而由于历史原因，Hashtable 还使用了")])])]),a._v(" "),s("blockquote",[s("p",[a._v("Enumeration 的方式。")])]),a._v(" "),s("ol",{attrs:{start:"9"}},[s("li",[a._v("默认情况下，初始容量不同，Hashtable 的初始长度是 11，之后每次扩充容量变为之前的2n+1（n 为上一次的长度）而 HashMap 的初始长度为 16，之后每次扩充变为原来的两倍。")])]),a._v(" "),s("p",[a._v("另外在 Hashtable 源码注释中有这么一句话：")]),a._v(" "),s("p",[a._v("大致意思：Hashtable 是线程安全，推荐使用 HashMap 代替 Hashtable；如果需要线程安全高并发的话，推荐使用 ConcurrentHashMap 代替 Hashtable。")]),a._v(" "),s("p",[a._v("这个回答完了，面试官可能会继续问：HashMap 是线程不安全的，那么在需要线程安全的情况下还要考虑性能，有什么解决方式？")]),a._v(" "),s("p",[a._v("这里最好的选择就是 ConcurrentHashMap 了，但面试官肯定会叫你继续说一下")]),a._v(" "),s("p",[a._v("ConcurrentHashMap 数据结构以及底层原理等。")]),a._v(" "),s("h2",{attrs:{id:"_40、hashmap-中的-key-我们可以使用任何类作为-key-吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40、hashmap-中的-key-我们可以使用任何类作为-key-吗"}},[a._v("#")]),a._v(" 40、HashMap 中的 key 我们可以使用任何类作为 key 吗？")]),a._v(" "),s("p",[a._v("平时可能大家使用的最多的就是使用 String 作为 HashMap 的 key，但是现在我们想使用某个自定义类作为 HashMap 的 key，那就需要注意以下几点：")]),a._v(" "),s("blockquote",[s("p",[a._v("如果类重写了 equals 方法，它也应该重写 hashCode 方法。类的所有实例需要遵循与 equals 和 hashCode 相关的规则。")]),a._v(" "),s("p",[a._v("如果一个类没有使用 equals，你不应该在 hashCode 中使用它。")]),a._v(" "),s("p",[a._v("咱们自定义 key 类的最佳实践是使之为不可变的，这样，hashCode 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode 和 equals 在未来不会改变，这样就会解决与可变相关的问题了。")])]),a._v(" "),s("h2",{attrs:{id:"_41、hashmap-的长度为什么是-2-的-n-次方呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_41、hashmap-的长度为什么是-2-的-n-次方呢"}},[a._v("#")]),a._v(" 41、HashMap 的长度为什么是 2 的 N 次方呢？")]),a._v(" "),s("p",[a._v("为了能让 HashMap 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞，也就是说尽量把数据能均匀的分配，每个链表或者红黑树长度尽量相等。")]),a._v(" "),s("p",[s("img",{attrs:{src:"media/image6.png",alt:""}}),a._v('{width="0.17777777777777778in" height="0.1986111111111111in"}我们首先可能会想到 下面是回答的重点哟：')]),a._v(" "),s("p",[a._v("取模的操作来实现。")]),a._v(" "),s("blockquote",[s("p",[a._v("取余（%）操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&）操作（也就是说")]),a._v(" "),s("p",[s("img",{attrs:{src:"media/image6.png",alt:""}}),a._v('{width="0.17777777777777778in" height="0.1986111111111111in"}'),s("img",{attrs:{src:"media/image6.png",alt:""}}),a._v('{width="0.17777777777777778in" height="0.1986111111111111in"}的前提是 length 是 2 的 n 次方）。并且，采用二进')]),a._v(" "),s("p",[a._v("制位操作")]),a._v(" "),s("p",[a._v("，相对于")]),a._v(" "),s("p",[a._v("能够提高运算效率。")])]),a._v(" "),s("p",[a._v("这就是为什么 HashMap 的长度需要 2 的 N 次方了。")]),a._v(" "),s("h2",{attrs:{id:"_42、hashmap-与-concurrenthashmap-的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42、hashmap-与-concurrenthashmap-的异同"}},[a._v("#")]),a._v(" 42、HashMap 与 ConcurrentHashMap 的异同")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("都是 key-value 形式的存储数据；")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 是线程不安全的，ConcurrentHashMap 是 JUC 下的线程安全的；")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 底层数据结构是数组 + 链表（JDK 1.8 之前）。JDK 1.8 之后是数组 + 链表 + 红黑树。当链表中元素个数达到 8 的时候，链表的查询速度不如红黑树快，链表会转为红黑树，红黑树查询速度快；")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 初始数组大小为 16（默认），当出现扩容的时候，以 0.75 * 数组大小的方式进行扩容；")])]),a._v(" "),s("li",[s("p",[a._v("ConcurrentHashMap 在 JDK 1.8 之 前 是 采 用 分 段 锁 来 现 实 的 Segment + HashEntry， Segment 数组大小默认是 16，2 的 n 次方；JDK 1.8 之后，采用 Node + CAS + Synchronized 来保证并发安全进行实现。")])])]),a._v(" "),s("h2",{attrs:{id:"_43、红黑树有哪几个特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_43、红黑树有哪几个特征"}},[a._v("#")]),a._v(" 43、红黑树有哪几个特征？")]),a._v(" "),s("p",[a._v("紧接上个问题，面试官很有可能会问红黑树，下面把红黑树的几个特征列出来：")]),a._v(" "),s("p",[s("img",{attrs:{src:"media/image7.jpeg",alt:""}}),a._v('{width="6.811111111111111in" height="2.920138888888889in"}')]),a._v(" "),s("h2",{attrs:{id:"_44、说说你平时是怎么处理-java-异常的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44、说说你平时是怎么处理-java-异常的"}},[a._v("#")]),a._v(" 44、说说你平时是怎么处理 Java 异常的")]),a._v(" "),s("p",[a._v("try-catch-ﬁnally")]),a._v(" "),s("blockquote",[s("p",[a._v("try 块负责监控可能出现异常的代码")]),a._v(" "),s("p",[a._v("catch 块负责捕获可能出现的异常，并进行处理")]),a._v(" "),s("p",[a._v("ﬁnally 块负责清理各种资源，不管是否出现异常都会执行")]),a._v(" "),s("p",[a._v("其中 try 块是必须的，catch 和 ﬁnally 至少存在一个标准异常处理流程")]),a._v(" "),s("p",[s("img",{attrs:{src:"media/image8.jpeg",alt:""}}),a._v('{width="6.807638888888889in" height="2.9611111111111112in"}')]),a._v(" "),s("p",[a._v("抛出异常→捕获异常→捕获成功（当 catch 的异常类型与抛出的异常类型匹配时，捕获成功）")]),a._v(" "),s("p",[a._v("→异常被处理，程序继续运行 抛出异常→捕获异常→捕获失败（当 catch 的异常类型与抛出异常类型不匹配时，捕获失败）→异常未被处理，程序中断运行")])]),a._v(" "),s("p",[a._v("在开发过程中会使用到自定义异常，在通常情况下，程序很少会自己抛出异常，因为异常的类名通 常也包含了该异常的有用信息，所以在选择抛出异常的时候，应该选择合适的异常类，从而可以明 确地描述该异常情况，所以这时候往往都是自定义异常。")]),a._v(" "),s("p",[a._v("自定义异常通常是通过继承 java.lang.Exception 类，如果想自定义 Runtime 异常的话，可以继承")]),a._v(" "),s("p",[a._v("java.lang.RuntimeException 类，实现一个无参构造和一个带字符串参数的有参构造方法。")]),a._v(" "),s("p",[a._v("在业务代码里，可以针对性的使用自定义异常。比如说：该用户不具备某某权限、余额不足等。")]),a._v(" "),s("h2",{attrs:{id:"_45、说说深拷贝和浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_45、说说深拷贝和浅拷贝"}},[a._v("#")]),a._v(" 45、说说深拷贝和浅拷贝？")]),a._v(" "),s("p",[a._v("浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，")]),a._v(" "),s("p",[a._v("深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新 的内存，")]),a._v(" "),s("p",[a._v("使用深拷贝的情况下，释放内存的时候不会因为出现浅拷贝时释放同一个内存的错误。最好是结合克隆已经原型模式联系在一起哈，记得复习的时候，把这几个联系起来的。")])])}),[],!1,null,null,null);t.default=e.exports}}]);