(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{531:function(t,r,o){"use strict";o.r(r);var a=o(25),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,o=t._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"springboot篇"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#springboot篇"}},[t._v("#")]),t._v(" SpringBoot篇")]),t._v(" "),o("h2",{attrs:{id:"_1、为什么要用springboot"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1、为什么要用springboot"}},[t._v("#")]),t._v(" 1、为什么要用SpringBoot")]),t._v(" "),o("p",[t._v("Spring Boot 优点非常多，如：")]),t._v(" "),o("p",[t._v("一、独立运行")]),t._v(" "),o("p",[t._v("Spring Boot而且内嵌了各种servlet容器，Tomcat、Jetty等，现在不再需要打成war包部署到容器中，Spring Boot只要打成一个可执行的jar包就能独立运行，所有的依赖包都在一个jar包内。")]),t._v(" "),o("p",[t._v("二、简化配置")]),t._v(" "),o("p",[t._v("spring-boot-starter-web启动器自动依赖其他组件，简少了maven的配置。 三、自动配置")]),t._v(" "),o("p",[t._v("Spring Boot能根据当前类路径下的类、jar包来自动配置bean，如添加一个spring-boot-starter- web启动器就能拥有web的功能，无需其他配置。")]),t._v(" "),o("p",[t._v("四、无代码生成和XML配置")]),t._v(" "),o("p",[t._v("Spring Boot配置过程中无代码生成，也无需XML配置文件就能完成所有配置工作，这一切都是借助于条件注解完成的，这也是Spring4.x的核心功能之一。")]),t._v(" "),o("p",[t._v("五、应用监控")]),t._v(" "),o("p",[t._v("Spring Boot提供一系列端点可以监控服务及应用，做健康检测。")]),t._v(" "),o("h2",{attrs:{id:"_2、spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2、spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"}},[t._v("#")]),t._v(" 2、Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？")]),t._v(" "),o("p",[t._v("启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：")]),t._v(" "),o("p",[t._v("@SpringBootConﬁguration：组合了 @Conﬁguration 注解，实现配置文件的功能。")]),t._v(" "),o("p",[t._v("@EnableAutoConﬁguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数 据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConﬁguration.class")]),t._v(" "),o("p",[t._v("})。")]),t._v(" "),o("p",[t._v("@ComponentScan：Spring组件扫描。")]),t._v(" "),o("h2",{attrs:{id:"_3、运行spring-boot有哪几种方式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3、运行spring-boot有哪几种方式"}},[t._v("#")]),t._v(" 3、运行Spring Boot有哪几种方式？")]),t._v(" "),o("ol",[o("li",[t._v("打包用命令或者放到容器中运行2）用 Maven/Gradle 插件运行3）直接执行 main 方法运行")])]),t._v(" "),o("h2",{attrs:{id:"_4、如何理解-spring-boot-中的-starters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4、如何理解-spring-boot-中的-starters"}},[t._v("#")]),t._v(" 4、如何理解 Spring Boot 中的 Starters？")]),t._v(" "),o("p",[t._v("Starters是什么：")]),t._v(" "),o("p",[t._v("Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring及其他技术，而不需要到处找示例代码和依赖包。如你想使用Spring JPA访问数据库，只要加入spring-boot-starter-data-jpa启动器依赖就能使用了。Starters包含了许多项目中需要用到的 依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。")]),t._v(" "),o("p",[t._v("Starters命名：")]),t._v(" "),o("p",[t._v("Spring Boot官方的启动器都是以spring-boot-starter-命名的，代表了一个特定的应用类型。第三方的启动器不能以spring-boot开头命名，它们都被Spring Boot官方保留。一般一个第三方的应该这样命名，像mybatis的mybatis-spring-boot-starter。")]),t._v(" "),o("p",[t._v("Starters分类：")]),t._v(" "),o("ol",[o("li",[t._v("Spring Boot应用类启动器")])]),t._v(" "),o("p",[o("img",{attrs:{src:"media/image1.jpeg",alt:""}}),t._v('{width="6.809722222222222in" height="2.2736111111111112in"}')]),t._v(" "),o("blockquote",[o("p",[t._v("1. Spring Boot生产启动器")])]),t._v(" "),o("p",[o("img",{attrs:{src:"media/image2.jpeg",alt:""}}),t._v('{width="6.822916666666667in" height="0.8881944444444444in"}')]),t._v(" "),o("blockquote",[o("p",[t._v("1. Spring Boot技术类启动器")])]),t._v(" "),o("p",[o("img",{attrs:{src:"media/image3.jpeg",alt:""}}),t._v('{width="6.833333333333333in" height="1.7583333333333333in"}')]),t._v(" "),o("blockquote",[o("p",[t._v("1. 其他第三方启动器")])]),t._v(" "),o("h2",{attrs:{id:"_5、-如何在spring-boot启动的时候运行一些特定的代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5、-如何在spring-boot启动的时候运行一些特定的代码"}},[t._v("#")]),t._v(" 5、 如何在Spring Boot启动的时候运行一些特定的代码？")]),t._v(" "),o("blockquote",[o("p",[t._v("如果你想在Spring Boot启动的时候运行一些特定的代码，你可以实现接口"),o("strong",[t._v("ApplicationRunner")]),t._v("或者"),o("strong",[t._v("CommandLineRunner")]),t._v("，这两个接口实现方式一样，它们都只提供了一个run方法。")]),t._v(" "),o("p",[o("strong",[t._v("CommandLineRunner")]),t._v("：启动获取命令行参数")])]),t._v(" "),o("h2",{attrs:{id:"_6、-spring-boot-需要独立的容器运行吗"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_6、-spring-boot-需要独立的容器运行吗"}},[t._v("#")]),t._v(" 6、 Spring Boot 需要独立的容器运行吗？")]),t._v(" "),o("p",[t._v("可以不需要，内置了 Tomcat/ Jetty 等容器。")]),t._v(" "),o("h2",{attrs:{id:"_7、-spring-boot中的监视器是什么"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_7、-spring-boot中的监视器是什么"}},[t._v("#")]),t._v(" 7、 Spring Boot中的监视器是什么？")]),t._v(" "),o("p",[t._v("Spring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些 外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作 为HTTP URL访问的REST端点来检查状态。")]),t._v(" "),o("h2",{attrs:{id:"_8、-如何使用spring-boot实现异常处理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_8、-如何使用spring-boot实现异常处理"}},[t._v("#")]),t._v(" 8、 如何使用Spring Boot实现异常处理？")]),t._v(" "),o("p",[t._v("Spring提供了一种使用ControllerAdvice处理异常的非常有用的方法。 我们通过实现一个")]),t._v(" "),o("p",[t._v("ControlerAdvice类，来处理控制器类抛出的所有异常。")]),t._v(" "),o("h2",{attrs:{id:"_9、-你如何理解-spring-boot-中的-starters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_9、-你如何理解-spring-boot-中的-starters"}},[t._v("#")]),t._v(" 9、 你如何理解 Spring Boot 中的 Starters？")]),t._v(" "),o("p",[t._v("Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成Spring 及其他技术，而不需要到处找示例代码和依赖包。如你想使用 Spring JPA 访问数据库，只要加入 spring-boot-starter-data-jpa 启动器依赖就能使用了。")]),t._v(" "),o("h2",{attrs:{id:"_10、-springboot常用的starter有哪些"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_10、-springboot常用的starter有哪些"}},[t._v("#")]),t._v(" 10、 springboot常用的starter有哪些")]),t._v(" "),o("p",[t._v("spring-boot-starter-web 嵌入tomcat和web开发需要servlet与jsp支持")]),t._v(" "),o("p",[t._v("spring-boot-starter-data-jpa 数据库支持spring-boot-starter-data-redis redis数据库支持spring-boot-starter-data-solr solr支持")]),t._v(" "),o("p",[t._v("mybatis-spring-boot-starter 第三方的mybatis集成starter")]),t._v(" "),o("h2",{attrs:{id:"_11、-springboot-实现热部署有哪几种方式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_11、-springboot-实现热部署有哪几种方式"}},[t._v("#")]),t._v(" 11、 SpringBoot 实现热部署有哪几种方式？")]),t._v(" "),o("p",[t._v("主要有两种方式：")]),t._v(" "),o("blockquote",[o("p",[t._v("Spring Loaded Spring-boot-devtools")])]),t._v(" "),o("h2",{attrs:{id:"_12、-如何理解-spring-boot-配置加载顺序"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_12、-如何理解-spring-boot-配置加载顺序"}},[t._v("#")]),t._v(" 12、 如何理解 Spring Boot 配置加载顺序？")]),t._v(" "),o("p",[t._v("在 Spring Boot 里面，可以使用以下几种方式来加载配置。")]),t._v(" "),o("p",[t._v("1）properties文件； 2）YAML文件；")]),t._v(" "),o("ol",{attrs:{start:"3"}},[o("li",[o("p",[t._v("系统环境变量；")])]),t._v(" "),o("li",[o("p",[t._v("命令行参数； 等等......")])])]),t._v(" "),o("h2",{attrs:{id:"_13、-spring-boot-的核心配置文件有哪几个-它们的区别是什么"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_13、-spring-boot-的核心配置文件有哪几个-它们的区别是什么"}},[t._v("#")]),t._v(" 13、 Spring Boot 的核心配置文件有哪几个？它们的区别是什么？")]),t._v(" "),o("p",[t._v("pring Boot 的核心配置文件是 application 和 bootstrap 配置文件。")]),t._v(" "),o("p",[t._v("application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。")]),t._v(" "),o("p",[t._v("bootstrap 配置文件有以下几个应用场景。")]),t._v(" "),o("blockquote",[o("p",[t._v("使用 Spring Cloud Conﬁg 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；")]),t._v(" "),o("p",[t._v("一些固定的不能被覆盖的属性； 一些加密/解密的场景；")])]),t._v(" "),o("h2",{attrs:{id:"_14、如何集成-spring-boot-和-activemq"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_14、如何集成-spring-boot-和-activemq"}},[t._v("#")]),t._v(" 14、如何集成 Spring Boot 和 ActiveMQ？")]),t._v(" "),o("p",[t._v("对于集成 Spring Boot 和 ActiveMQ，我们使用 spring-boot-starter-activemq 依赖关系。 它只需要很少的配置，并且不需要样板代码。")])])}),[],!1,null,null,null);r.default=s.exports}}]);